{'code': 'public final void removeMessages(int what){\n  mExec.removeMessages(what);\n}\n', 'nl': "Remove any pending posts of messages with code 'what' that are in the message queue."}
{'code': 'public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,int w,int h,int[] pix){\n  super(ullat,ullon,w,h,pix);\n  lat2=lrlat;\n  lon2=lrlon;\n}\n', 'nl': 'Creates an OMRaster images, Lat/Lon placement with a direct colormodel image.'}
{'code': 'public void addCollected(BigDecimal amount){\n  addCollectedWithTolerance(amount,BigDecimal.ZERO);\n}\n', 'nl': 'Add an amount to the existing collected amount, with zero tolerance i.e. balance cannot be exceeded.'}
{'code': 'public void enforceContext(Resource... contexts){\n  OpenRDFUtil.verifyContextNotNull(contexts);\n  this.contexts=contexts;\n}\n', 'nl': 'Enforces the supplied contexts upon all statements that are reported to this RDFSailRemover.'}
{'code': 'public void enableGrid(boolean enable){\n  gridEnabled=enable;\n  layerEffects.gridCell=gridCellSize;\n  layerEffects.gridColor=gridColor.toArray(null);\n  layerEffects.gridEnabled=enable;\n}\n', 'nl': 'Show the surface grid'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.877 -0400",hash_original_method="450793B14B2760672928AE5911F3EF0A",hash_generated_method="D61AB6A8D39F54AA6F6EE26C3F3F9493") public static void disable(){\n}\n', 'nl': 'Disables the JIT compiler. Does nothing on Android.'}
{'code': 'public void addMapObserver(Observer<IOObjectMapEvent> observer){\n  mapObservable.addObserver(observer,false);\n}\n', 'nl': 'Adds an observer, which receives updates when the map changes, i.e. an object is added/removed/changed or multiple objects are added/removed at the same time.'}
{'code': 'public void addHeader(String header,String value){\n  clientHeaderMap.put(header,value);\n}\n', 'nl': 'Sets headers that will be added to all requests this client makes (before sending).'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_noderemovechildnode.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public DViewPrivateKey(JDialog parent,String title,PrivateKey privateKey,Provider provider) throws CryptoException {\n  super(parent,title,ModalityType.DOCUMENT_MODAL);\n  this.privateKey=privateKey;\n  this.provider=provider;\n  initComponents();\n}\n', 'nl': 'Creates new DViewPrivateKey dialog where the parent is a dialog.'}
{'code': 'public void add(Individual individual){\n  individuals.add(individual);\n}\n', 'nl': 'Adds a single individual.'}
{'code': 'private void checkContact(ContactResource contact,String contactId,String repoId){\n  assertThat(contact).isNotNull();\n  assertThat(contact.getContactId()).isEqualTo(contactId);\n  assertThat(contact.getRepoId()).isEqualTo(repoId);\n}\n', 'nl': 'Verifies that contact id and ROID match expected values'}
{'code': 'public void cancelFade(){\n  this.fadeOut=false;\n}\n', 'nl': 'Cancels the fade out'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:\n    setDeprecated((Boolean)newValue);\n  return;\ncase SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:\nsetComment((String)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void addProgressListener(ProgressListener listener){\n  listeners.addListener(listener);\n}\n', 'nl': 'Adds the given listener to receive progress reports.'}
{'code': 'public void waitForVolumesToBeVisible(CGRequestParams request){\n  scan(request.getCopies(),request.getRsets());\n}\n', 'nl': 'scans all sites until all volumes involved in the Recoverpoint protection are visible'}
{'code': 'public void clearChoices(){\n}\n', 'nl': 'Clear any choices previously set'}
{'code': 'public void doExportInternal(final JobContext context) throws IOException {\n  doDataExport(context);\n}\n', 'nl': 'Perform bulk export.'}
{'code': 'public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table profile'}
{'code': 'public final void popNamespaceContext(){\n  m_prefixResolvers.pop();\n}\n', 'nl': 'Pop the current namespace context for the xpath.'}
{'code': 'public void elementAttributesProcessed(String name,Properties extraAttributes,String systemId,int lineNr) throws Exception {\n  this.delegate.elementAttributesProcessed(name,extraAttributes,systemId,lineNr);\n}\n', 'nl': 'Indicates that an attribute has been added to the current element.'}
{'code': 'public void addRequestTags(Span span,URI uri,String method){\n  addRequestTags(span,uri.toString(),uri.getHost(),uri.getPath(),method);\n}\n', 'nl': 'Adds tags from the HTTP request to the given Span'}
{'code': 'public void show(PopupVPosition vAlign,PopupHPosition hAlign){\n  this.show(vAlign,hAlign,0,0);\n}\n', 'nl': 'show the popup according to the specified position'}
{'code': 'public void loadData(Table t,String query,String keyField,Object lock){\n  loadData(t,query,keyField,lock,null);\n}\n', 'nl': 'Asynchronously executes a query and stores the results in the given  table instance. All data processing is done in a separate thread of execution.'}
{'code': 'public final void invert(){\n  invertGeneral(this);\n}\n', 'nl': 'Inverts this matrix in place.'}
{'code': 'public void write(OutputStream out,Integer indent,String xmlVersion) throws TransformerException {\n  write(out,new XCalOutputProperties(indent,xmlVersion));\n}\n', 'nl': 'Writes the xCal document to an output stream.'}
{'code': '@Override public void publish(LogRecord record){\n  super.publish(record);\n  super.flush();\n}\n', 'nl': 'Logs a record if necessary. A flush operation will be done afterwards.'}
{'code': 'public void stop(){\n  mediaPlayer.stop();\n  mState=State.STOPPED;\n  notifyPlayerStopped();\n}\n', 'nl': 'Stop music streaming'}
{'code': 'public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table dependency'}
{'code': 'public void schedule(TimerTask task,long delay){\n  timer.schedule(new TimerTaskWrapper(task),delay);\n}\n', 'nl': 'Schedules the specified task for execution after the specified delay.'}
{'code': 'public void textValueChanged(TextEvent textEvent){\n  Integer cpos=Integer.valueOf(TextComponent.this.getCaretPosition());\n  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,cpos);\n}\n', 'nl': 'TextListener notification of a text value change.'}
{'code': 'public void initialise() throws Exception {\n  initialise(k,tau,((MutualInfoCalculatorMultiVariateKernel)miCalc).getKernelWidth());\n}\n', 'nl': 'Initialises the calculator with the existing values for embedding length k, embedding delay tau and kernel width epsilon'}
{'code': 'public static void main(String[] args){\n  Set<Emoticon> emotes=makeEmoticons("e1");\n  System.out.println(emotes.size());\n  for (  Emoticon emote : emotes) {\n    System.out.println(emote.getInfos());\n  }\n}\n', 'nl': 'For testing.'}
{'code': 'public void debug(Throwable throwable,String msg,Object arg0,Object arg1){\n  innerLog(Level.DEBUG,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);\n}\n', 'nl': 'Log a debug message with a throwable.'}
{'code': 'public void runProcess(){\n  runProcess(true);\n}\n', 'nl': 'Runs or resumes the current process. If the process is started, checks for potential errors first and prevents execution unless the user has disabled the pre-run check.'}
{'code': 'public void clearDeploymentThisRound(){\n  deploymentTable.remove(new Integer(getRoundCount()));\n}\n', 'nl': 'Clear this round from this list of entities to deploy'}
{'code': 'private void assertCostReceiptReversal(CostResult costResult,int M_InOutLine_ID,MAcctSchema as,String trxName){\n  MCost cost=assertCost(costResult);\n  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=? AND M_InOutLine_ID=?";\n  ArrayList<Object> parameters=new ArrayList();\n  parameters.add(costResult.M_Product_ID);\n  parameters.add(cost.getM_CostElement_ID());\n  parameters.add(cost.getM_CostType_ID());\n  parameters.add(M_InOutLine_ID);\n  assertCostDetail(costResult,whereClause,parameters);\n}\n', 'nl': 'assert Cost Receipt'}
{'code': 'public void appendChannel(YouTubeChannel channel){\n  append(channel);\n}\n', 'nl': 'Append channel to this adapter.'}
{'code': 'public BedReader(BufferedReader in,int minAnnotations) throws IOException {\n  mMinAnnotations=minAnnotations;\n  mIn=new BrLineReader(in);\n  mHeader=parseHeader(mIn);\n}\n', 'nl': 'create a new BED reader with a minimum number of annotations'}
{'code': 'public MethodNotFoundException(String methodName){\n  super("Method " + methodName + " without arguments not found");\n}\n', 'nl': 'Creates exception with given method name'}
{'code': '@TargetApi(Build.VERSION_CODES.LOLLIPOP) public static void updateBarsColor(Window src,Window dest){\n  updateBarsColor(src.getStatusBarColor(),dest,false);\n}\n', 'nl': 'LOLLIPOP ONLY Apply the color of one window to another'}
{'code': 'public void enableDashedLine(float lineLength,float spaceLength,float phase){\n  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);\n}\n', 'nl': 'Enables the line to be drawn in dashed mode, e.g. like this "- - - - - -". THIS ONLY WORKS IF HARDWARE-ACCELERATION IS TURNED OFF. Keep in mind that hardware acceleration boosts performance.'}
{'code': 'public void addButton(Button button){\n  addComponentsLeft(button);\n}\n', 'nl': 'alias for addComponentsLeft for ease of porting swing form'}
{'code': 'public CMSSignedData(Map hashes,byte[] sigBlock) throws CMSException {\n  this(hashes,CMSUtils.readContentInfo(sigBlock));\n}\n', 'nl': 'Content with detached signature, digests precomputed'}
{'code': 'private void readObject(){\n}\n', 'nl': '<!-- begin-user-doc --> Write your own initialization here <!-- end-user-doc -->'}
{'code': 'public void testFindProvider() throws IOException {\n  String id=Long.toString((new Date()).getTime());\n  Profile p=new Profile(this.getName(),id,new File(this.workspace.toFile(),id));\n  JmriPreferencesProvider shared=JmriPreferencesProvider.findProvider(p.getPath(),true);\n  JmriPreferencesProvider privat=JmriPreferencesProvider.findProvider(p.getPath(),false);\n  assertNotNull(shared);\n  assertNotNull(privat);\n  assertNotSame(shared,privat);\n  FileUtil.delete(p.getPath());\n}\n', 'nl': 'Test of findProvider method, of class JmriPreferencesProvider.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.306 -0500",hash_original_method="4E298BD73CB3CE4838A0E376A85EE2C2",hash_generated_method="9F8B92C222B5ED89131795F1C9479C84") public static void execShell(String command){\n  nativeExecShell(command);\n}\n', 'nl': 'Executes "/system/bin/sh -c &lt;command&gt;" using the exec() system call. This method never returns.'}
{'code': 'public void types(String types[]){\n  this.types=types;\n}\n', 'nl': 'Callback method used while the query is executed.'}
{'code': 'public void startDownload(final String hostname,final String uri,final int reportInterval){\n  startDownload(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri,reportInterval);\n}\n', 'nl': 'Start download process with default to port 80 with specified report interval.'}
{'code': 'public void dispose(){\n  mRed=null;\n  mGreen=null;\n  jmri.InstanceManager.turnoutManagerInstance().removeVetoableChangeListener(this);\n  super.dispose();\n}\n', 'nl': 'Remove references to and from this object, so that it can eventually be garbage-collected.'}
{'code': 'public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {\n}\n', 'nl': 'Report the start of DTD declarations, if any. Any declarations are assumed to be in the internal subset unless otherwise indicated.'}
{'code': 'public static void main(String[] argv) throws IOException, SAXException {\n  Scanner s=new HTMLScanner();\n  Reader r=new InputStreamReader(System.in,"UTF-8");\n  Writer w=new OutputStreamWriter(System.out,"UTF-8");\n  PYXWriter pw=new PYXWriter(w);\n  s.scan(r,pw);\n  w.close();\n}\n', 'nl': 'Test procedure.  Reads HTML from the standard input and writes PYX to the standard output.'}
{'code': 'public static void showNotification(Project project,MessageType type,String text){\n  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);\n  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(statusBar.getComponent()),Balloon.Position.atRight);\n}\n', 'nl': 'Display simple notification of given type'}
{'code': 'public void bytesReceived(int cnt){\n  bytesRcvd+=cnt;\n  lastRcvTime=U.currentTimeMillis();\n}\n', 'nl': 'Adds given amount ob bytes to the received bytes counter. <p> Note that this method is designed to be called in one thread only.'}
{'code': 'public void evictAll() throws IOException {\n  cache.evictAll();\n}\n', 'nl': 'Deletes all values stored in the cache. In-flight writes to the cache will complete normally, but the corresponding responses will not be stored.'}
{'code': 'public void addDescription(Description description){\n  getDescriptions().add(description);\n}\n', 'nl': 'Adds a new description.'}
{'code': 'private void openGallery(){\n  Intent intent=new Intent();\n  intent.setType("video/*");\n  intent.setAction(Intent.ACTION_GET_CONTENT);\n  startActivityForResult(intent,Const.RequestCode.GALLERY);\n}\n', 'nl': 'open gallery to choose video'}
{'code': 'public static void addSecondaryObjective(SecondaryObjective<?> objective){\n  secondaryObjectives.add(objective);\n}\n', 'nl': 'Add an additional secondary objective to the end of the list of objectives'}
{'code': 'public void returnValue(){\n  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));\n}\n', 'nl': 'Generates the instruction to return the top stack value to the caller.'}
{'code': 'public static void checkNewData(SupportUpdateListener updateListener,EventBean[] expectedValues){\n  EventBean[] newData=updateListener.getLastNewData();\n  EPAssertionUtil.assertEqualsExactOrder(expectedValues,newData);\n  updateListener.setLastNewData(null);\n}\n', 'nl': 'Compare the new data captured by the child against expected values in the exact same order. Clears the last new data in the test child view after comparing.'}
{'code': 'public void addSeriesRenderer(SimpleSeriesRenderer renderer){\n  mRenderers.add(renderer);\n}\n', 'nl': 'Adds a simple renderer to the multiple renderer.'}
{'code': 'public static void addDatasource(String sourcePath,DsDef newDatasource,boolean saveBackup) throws IOException {\n  addDatasources(sourcePath,Collections.singleton(newDatasource),saveBackup);\n}\n', 'nl': '<p>Adds one more datasource to a RRD file.</p> <p>WARNING: This method is potentially dangerous! It will modify your RRD file. It is highly recommended to preserve the original RRD file (<i>saveBackup</i> should be set to <code>true</code>). The backup file will be created in the same directory as the original one with <code>.bak</code> extension added to the original name.</p> <p>Before applying this method, be sure that the specified RRD file is not in use (not open)</p>'}
{'code': 'public void draw(String text,int x,int y){\n  this.draw(text,x,y,this.lineHeight);\n}\n', 'nl': 'Draw a multi-line text string with bounding rectangle top starting at the y position. Depending on the current textAlign, the x position is either the rectangle left side, middle or right side. <p/> Uses the current line height.'}
{'code': 'public void onChildThreadResumeEnd(){\n  _threadCount.getAndDecrement();\n  wake();\n}\n', 'nl': "End housekeeping for a child thread managed by the launcher's housekeeping, but not spawned by the launcher itself, e.g. comet, websocket, keepalive."}
{'code': 'public void testLoggingAccordingToLogLevels(){\n  TestableAbstractLogger logger=new TestableAbstractLogger();\n  logger.setLevel(LogLevel.WARN);\n  logger.debug("test1","category");\n  assertNull(logger.popMessage());\n  logger.info("test2","category");\n  assertNull(logger.popMessage());\n  logger.warn("test3","category");\n  assertEquals("[warn][category][test3]",logger.popMessage());\n  logger.setLevel(LogLevel.INFO);\n  logger.debug("test4","category");\n  assertNull(logger.popMessage());\n  logger.info("test5","category");\n  assertEquals("[info][category][test5]",logger.popMessage());\n  logger.warn("test6","category");\n  assertEquals("[warn][category][test6]",logger.popMessage());\n  logger.setLevel(LogLevel.DEBUG);\n  logger.debug("test7","category");\n  assertEquals("[debug][category][test7]",logger.popMessage());\n  logger.info("test8","category");\n  assertEquals("[info][category][test8]",logger.popMessage());\n  logger.warn("test9","category");\n  assertEquals("[warn][category][test9]",logger.popMessage());\n}\n', 'nl': 'Test the matching between logging levels.'}
{'code': 'public void makeAdditionalChecks(MetaData received){\n}\n', 'nl': 'Override this method to make additional checks. The default implementation does nothing.'}
{'code': 'public static void runStop(){\n  printMessage("Simulation completed.");\n}\n', 'nl': 'Internal method used to stop the simulation. This method should <b>not</b> be used directly.'}
{'code': 'private void initData(){\n  this.locationList=DatabaseHelper.getInstance(this).readLocation();\n}\n', 'nl': '<br> data.'}
{'code': 'public static void test_getStaticVariable(){\n  Target.setStaticVariable(22);\n  assertSame(22,Target.staticVariable);\n}\n', 'nl': 'Test getting a static variable of a sibling class.'}
{'code': 'public void onClick(View view,String videoId,int position){\n  setVideoId(videoId);\n  attachToView(view,position);\n}\n', 'nl': 'Used for handling onclick in AbsListView. Overlay takes size of view passed.'}
{'code': 'public void turnChecksOff(){\n  m_checksTurnedOff=true;\n}\n', 'nl': 'Turns off checks for missing values, etc. Use with caution.'}
{'code': 'public JSONArray(String source) throws JSONException {\n  this(new JSONTokener(source));\n}\n', 'nl': 'Construct a JSONArray from a source JSON text.'}
{'code': 'private void viewFile(Player player,String input){\n}\n', 'nl': 'Views current information for a provided Door.'}
{'code': '@Override public void onAnimationCancel(Animator animation){\n}\n', 'nl': 'For overriding'}
{'code': 'public void propertyChange(PropertyChangeEvent evt){\n  super.propertyChange(evt);\n}\n', 'nl': 'This method gets called when a bound property is changed on the associated JTextComponent.  This is a hook which UI implementations may change to reflect how the UI displays bound properties of JTextComponent subclasses.'}
{'code': '@TypeInfo("java.lang::ObjectArray<T>") public Object[] $clone(){\n  throw Util.makeJavaArrayWrapperException();\n}\n', 'nl': 'A clone of this Java object array.'}
{'code': 'public static void main(String... args) throws Exception {\n  TestDropTableLarge.test();\n}\n', 'nl': 'Run just this test.'}
{'code': 'public void reset(ActionMapping mapping,HttpServletRequest request){\n  ignoreTooFar=false;\n  ignoreRoomCheck=false;\n  control=null;\n  examEnabled.clear();\n  previos=null;\n  next=null;\n  eventDepartment=null;\n  pictures.clear();\n}\n', 'nl': 'Method reset'}
{'code': 'public static void printSizes(Component c){\n  System.out.println("minimumSize = " + c.getMinimumSize());\n  System.out.println("preferredSize = " + c.getPreferredSize());\n  System.out.println("maximumSize = " + c.getMaximumSize());\n}\n', 'nl': "A debugging utility that prints to stdout the component's minimum, preferred, and maximum sizes."}
{'code': 'public void mouseClicked(java.awt.event.MouseEvent e){\n}\n', 'nl': 'Invoked when the mouse has been clicked on a component.'}
{'code': 'public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGet(request,response);\n}\n', 'nl': 'Process the HTTP Post request'}
{'code': '@Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){\n  buildThirdFloor(zone);\n}\n', 'nl': 'Configure a zone.'}
{'code': 'public static void mySetSystemScope(IdentityScope scope){\n  IdentityScope.setSystemScope(scope);\n}\n', 'nl': "Sets the system's identity scope"}
{'code': '@Override public final void preTearDown() throws Exception {\n  this.expectedEx=IgnoredException.addIgnoredException(ServerConnectivityException.class.getName());\n  vm0.invoke(null);\n  vm1.invoke(null);\n}\n', 'nl': 'Closes the cache on server and client'}
{'code': '@SuppressWarnings("unchecked") @Override public void initGui(){\n  autoMaximize=WurstClient.INSTANCE.files.loadAutoMaximize();\n  buttonList.clear();\n  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 144 - 16,200,20,"Back"));\n  buttonList.add(new GuiButton(1,width / 2 - 154,height / 4 + 24 - 16,100,20,"Click Friends: " + (WurstClient.INSTANCE.options.middleClickFriends ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(2,width / 2 - 154,height / 4 + 48 - 16,100,20,"Mod List: " + modListModes[WurstClient.INSTANCE.options.modListMode]));\n  buttonList.add(new GuiButton(3,width / 2 - 154,height / 4 + 72 - 16,100,20,"AutoMaximize: " + (autoMaximize ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(4,width / 2 - 154,height / 4 + 96 - 16,100,20,"Wurst News: " + (WurstClient.INSTANCE.options.wurstNews ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(5,width / 2 - 154,height / 4 + 120 - 16,100,20,"Analytics: " + (WurstClient.INSTANCE.options.google_analytics.enabled ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(6,width / 2 - 50,height / 4 + 24 - 16,100,20,"Keybinds"));\n  buttonList.add(new GuiButton(7,width / 2 - 50,height / 4 + 48 - 16,100,20,"X-Ray Blocks"));\n  buttonList.add(new GuiButton(8,width / 2 - 50,height / 4 + 72 - 16,100,20,"Zoom"));\n  buttonList.add(new GuiButton(11,width / 2 + 54,height / 4 + 24 - 16,100,20,"Official Website"));\n  buttonList.add(new GuiButton(12,width / 2 + 54,height / 4 + 48 - 16,100,20,"YouTube Channel"));\n  buttonList.add(new GuiButton(13,width / 2 + 54,height / 4 + 72 - 16,100,20,"Twitter Page"));\n  buttonList.add(new GuiButton(14,width / 2 + 54,height / 4 + 96 - 16,100,20,"FAQ"));\n  buttonList.add(new GuiButton(15,width / 2 + 54,height / 4 + 120 - 16,100,20,"Bug Tracker"));\n  ((GuiButton)buttonList.get(3)).enabled=!Minecraft.isRunningOnMac;\n}\n', 'nl': 'Adds the buttons (and other controls) to the screen in question.'}
{'code': '@Override public void onAction(){\n  onAction(ActionType.ATTACK);\n}\n', 'nl': 'Perform the default action.'}
{'code': 'public void paintInternalFrameBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the background of an internal frame.'}
{'code': 'public void loadSettingsFromJson(){\nsynchronized (LOCK) {\n    loadSettingsFromJson(defaultFile);\n    for (    String fileName : files) {\n      loadSettingsFromJson(fileName);\n    }\n  }\n}\n', 'nl': 'Loads the settings from a JSON file.'}
{'code': 'public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table PUBLIC.SAMPLETABLE2'}
{'code': 'private void temporarilyDisableUnsupportedSettings(Preferences preferences){\n  NotificationsPrefs notification=preferences.getNotification();\n  notification.setFriendOnlineSoundEnabled(false);\n  notification.setFriendOfflineSoundEnabled(false);\n  notification.setFriendOfflineSoundEnabled(false);\n  notification.setFriendPlaysGameSoundEnabled(false);\n  notification.setFriendPlaysGameToastEnabled(false);\n}\n', 'nl': 'Disables preferences that should not be enabled since they are not supported yet.'}
{'code': 'public void resetRecipes(){\n  clearRecipes();\n  loadRecipes();\n  dynamicRecipes.add(new DynamicRecipe(new GlowBannerMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowBannerCopyMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowRepairMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowArmorDyeMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowChargeMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowChargeFadeMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowFireworkMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowBookCopyMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowMapCopyMatcher()));\n  dynamicRecipes.add(new DynamicRecipe(new GlowMapZoomMatcher()));\n  furnaceFuels.put(Material.COAL,1600);\n  furnaceFuels.put(Material.WOOD,300);\n  furnaceFuels.put(Material.SAPLING,100);\n  furnaceFuels.put(Material.STICK,100);\n  furnaceFuels.put(Material.FENCE,300);\n  furnaceFuels.put(Material.WOOD_STAIRS,300);\n  furnaceFuels.put(Material.TRAP_DOOR,300);\n  furnaceFuels.put(Material.LOG,300);\n  furnaceFuels.put(Material.WORKBENCH,300);\n  furnaceFuels.put(Material.BOOKSHELF,300);\n  furnaceFuels.put(Material.CHEST,300);\n  furnaceFuels.put(Material.JUKEBOX,300);\n  furnaceFuels.put(Material.NOTE_BLOCK,300);\n  furnaceFuels.put(Material.LAVA_BUCKET,20000);\n  furnaceFuels.put(Material.COAL_BLOCK,16000);\n  furnaceFuels.put(Material.BLAZE_ROD,2400);\n  furnaceFuels.put(Material.WOOD_PLATE,300);\n  furnaceFuels.put(Material.FENCE_GATE,300);\n  furnaceFuels.put(Material.TRAPPED_CHEST,300);\n  furnaceFuels.put(Material.DAYLIGHT_DETECTOR,300);\n  furnaceFuels.put(Material.DAYLIGHT_DETECTOR_INVERTED,300);\n  furnaceFuels.put(Material.BANNER,300);\n  furnaceFuels.put(Material.WOOD_AXE,200);\n  furnaceFuels.put(Material.WOOD_HOE,200);\n  furnaceFuels.put(Material.WOOD_PICKAXE,200);\n  furnaceFuels.put(Material.WOOD_SPADE,200);\n  furnaceFuels.put(Material.WOOD_SWORD,200);\n  furnaceFuels.put(Material.WOOD_STEP,150);\n}\n', 'nl': 'Reset the crafting recipe lists to their default states.'}
{'code': 'public final void testAddAllHelperTextIdsFromCollection(){\n  CharSequence helperText1=getContext().getText(android.R.string.cancel);\n  CharSequence helperText2=getContext().getText(android.R.string.copy);\n  Collection<Integer> helperTextIds=new LinkedList<>();\n  helperTextIds.add(android.R.string.cancel);\n  helperTextIds.add(android.R.string.copy);\n  PasswordEditText passwordEditText=new PasswordEditText(getContext());\n  passwordEditText.addAllHelperTextIds(helperTextIds);\n  passwordEditText.addAllHelperTextIds(helperTextIds);\n  Collection<CharSequence> helperTexts=passwordEditText.getHelperTexts();\n  assertEquals(helperTextIds.size(),helperTexts.size());\n  Iterator<CharSequence> iterator=helperTexts.iterator();\n  assertEquals(helperText1,iterator.next());\n  assertEquals(helperText2,iterator.next());\n}\n', 'nl': 'Tests the functionality of the method, which allows to add all helper texts by the ids, which are contained by a collection.'}
{'code': 'public void testGetSpeed_large(){\n  testSpeed(99,100);\n}\n', 'nl': 'Tests when the slow speed and the normal speed are both large number. E.g., 99 and 100.'}
{'code': 'public static void main(String[] args) throws UnknownHostException {\n  SpringApplication app=new SpringApplication(Application.class);\n  app.setShowBanner(false);\n  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);\n  addDefaultProfile(app,source);\n  addLiquibaseScanPackages();\n  Environment env=app.run(args).getEnvironment();\n  log.info("Access URLs:\\n----------------------------------------------------------\\n\\t" + "Local: \\t\\thttp://127.0.0.1:{}\\n\\t" + "External: \\thttp://{}:{}\\n----------------------------------------------------------",env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));\n}\n', 'nl': 'Main method, used to run the application.'}
{'code': 'public void addCPUTime(long delta){\n  cpuTime.addAndGet(delta);\n}\n', 'nl': 'Adds CPU time.'}
{'code': '@Override public final void onAdded(final RPObject object){\n}\n', 'nl': 'An object was added.'}
{'code': '@Override public void close(){\n  _inputStream=null;\n}\n', 'nl': 'Close/free the connection'}
{'code': 'public final void testGetModulus(){\n  RSAPublicKeySpec rpks=new RSAPublicKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));\n  assertTrue(BigInteger.valueOf(1234567890L).equals(rpks.getModulus()));\n}\n', 'nl': 'Test for <code>getModulus()</code> method<br> Assertion: returns modulus'}
{'code': '@After public void teardown(){\n  logger.info("--> resetting breaker settings");\n  Settings resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,HierarchyCircuitBreakerService.DEFAULT_FIELDDATA_BREAKER_LIMIT).put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,HierarchyCircuitBreakerService.DEFAULT_FIELDDATA_OVERHEAD_CONSTANT).put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,HierarchyCircuitBreakerService.DEFAULT_REQUEST_BREAKER_LIMIT).put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_TYPE_SETTING,CircuitBreaker.Type.MEMORY).put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0).build();\n  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings));\n}\n', 'nl': 'Reset all breaker settings back to their defaults'}
{'code': 'public static void shrinkSelectionUp(final ZyGraph graph){\n  checkArguments(graph);\n  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);\n  GraphHelpers.shrinkSelectionUp(selectableGraph);\n}\n', 'nl': 'Does a Shrink Selection Up operation on a graph.'}
{'code': 'public void runInjectorPipeline(String inputFile,String topic){\n  runInjectorPipeline(TextIO.Read.from(inputFile),topic,null);\n}\n', 'nl': 'Runs a batch pipeline to inject data into the PubSubIO input topic. <p>The injector pipeline will read from the given text file, and inject data into the Google Cloud Pub/Sub topic.'}
{'code': 'public void dispose(){\n  graphics.dispose();\n  graphics=null;\n}\n', 'nl': 'Overrides <code>Graphics.dispose</code>.'}
{'code': '@Override public void generateCode(BlockScope currentScope,boolean valueRequired){\n  this.expression.generateCode(currentScope,true);\n}\n', 'nl': 'Code generation for instanceOfExpression'}
{'code': 'public void reset(){\n  super.reset();\n  fmod.reset();\n}\n', 'nl': 'Resets this wave and its modulating wave as well.'}
{'code': 'public AggregateableEvaluation(Instances data,CostMatrix costMatrix) throws Exception {\n  super(data,costMatrix);\n  m_delegate=new weka.classifiers.evaluation.AggregateableEvaluation(data,costMatrix);\n}\n', 'nl': 'Constructs a new AggregateableEvaluation object'}
{'code': 'public synchronized void reset(){\n  bufferHolder.setCollection(new LinkedList());\n}\n', 'nl': 'Reset BufferList.  It will empty the buffer and leave its size at the current value'}
{'code': 'public void resumeJob(JobKey jobKey) throws SchedulerException {\n  sched.resumeJob(jobKey);\n}\n', 'nl': "<p> Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>. </p>"}
{'code': 'public void unsetNextExcuteDate(){\n  issetBitfield=EncodingUtils.clearBit(issetBitfield,NEXTEXCUTEDATE_ISSET_ID);\n}\n', 'nl': 'Description: <br>'}
{'code': '@Override public void putAll(Map<? extends K,? extends V> map){\n  ensureCapacity(map.size());\n  super.putAll(map);\n}\n', 'nl': 'Copies all the mappings in the specified map to this map. These mappings will replace all mappings that this map had for any of the keys currently in the given map.'}
{'code': 'public void countUp(){\n  count.addAndGet(1);\n}\n', 'nl': 'Increments the count. Once the count has reached zero once, incrementing the count back above zero will have no affect.'}
{'code': 'public void updateAlertDefinitions(StatAlertDefinition[] alertDefs,int actionCode){\n  sendAsync(UpdateAlertDefinitionMessage.create(alertDefs,actionCode));\n}\n', 'nl': 'This method would be used to set Sta Alert Definitions for the GemFireVM. This method would mostly be called on each member after initial set up whenever one or more Stat Alert Definitions get added/updated/removed.'}
{'code': 'public static <T>void subsribeToTraversable(Traversable<T> s,Subscriber<T> sub){\n  Javaslang.traversable(s).subscribe(sub);\n}\n', 'nl': 'Have a reactive-stream subscriber subscribe to a Javaslang Stream.'}
{'code': '@Override public void clearSession(long id){\n  sessionManager.clearSession(id);\n}\n', 'nl': 'Clears the session associated with the id.'}
{'code': 'public void beginShape(){\n  beginShape(POLYGON);\n}\n', 'nl': 'Start a new shape of type POLYGON'}
{'code': 'public void estopAll(){\n  slots.stream().filter(null).forEach(null);\n}\n', 'nl': 'Send emergency stop to all slots'}
{'code': 'public void callStringAsync(String key,Callback<String> callback){\n  callAsync(key,callback);\n}\n', 'nl': 'Calls a method on the underlying Javascript object that returns a String.  Call is asynchronous.  Return value or error is passed to the provided callback.'}
{'code': 'public void testEqualsOnNew(){\n  MockModel model1=new MockModel();\n  MockModel model2=new MockModel();\n  assertFalse(model1.equals(model2));\n  assertFalse(model2.equals(model1));\n  assertTrue(model1.equals(model1));\n}\n', 'nl': 'A new object does not have PK assigned yet, therefore by default it is equal only to itself.'}
{'code': '@Override public void onTokenRefresh(){\n  Intent intent=new Intent(this,RegistrationIntentService.class);\n  startService(intent);\n}\n', 'nl': 'Called if InstanceID token is updated. This may occur if the security of the previous token had been compromised. This call is initiated by the InstanceID provider.'}
{'code': 'public void clear(){\n  map.clear();\n}\n', 'nl': 'Removes all of the mappings from this map. The map will be empty after this call returns. <p/> <p>This method is not atomic: the map may not be empty after returning if there were concurrent writes.'}
{'code': 'public void addSegment(Segment segment){\n  getSegments().add(segment);\n}\n', 'nl': 'Adds a new segment.'}
{'code': 'public void accept(MemberValueVisitor visitor){\n  visitor.visitBooleanMemberValue(this);\n}\n', 'nl': 'Accepts a visitor.'}
{'code': 'private void initialize(){\n  this.setSize(414,290);\n  this.setResizable(false);\n  this.setTitle(Messages.getString("AboutDialog.About_JPlag"));\n  this.setContentPane(getJContentPane());\n}\n', 'nl': 'This method initializes this'}
{'code': 'public PriorityQueue(PriorityQueue<? extends E> c){\n  getFromPriorityQueue(c);\n}\n', 'nl': 'Constructs a priority queue that contains the elements of another priority queue. The constructed priority queue has the initial capacity of 110% of the specified one. Both priority queues have the same comparator.'}
{'code': 'private void updateNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity,List<NamespacePermissionEnum> namespacePermissions){\n  userNamespaceAuthorizationEntity.setReadPermission(namespacePermissions.contains(NamespacePermissionEnum.READ));\n  userNamespaceAuthorizationEntity.setWritePermission(namespacePermissions.contains(NamespacePermissionEnum.WRITE));\n  userNamespaceAuthorizationEntity.setExecutePermission(namespacePermissions.contains(NamespacePermissionEnum.EXECUTE));\n  userNamespaceAuthorizationEntity.setGrantPermission(namespacePermissions.contains(NamespacePermissionEnum.GRANT));\n}\n', 'nl': 'Sets relative flags on the user namespace authorization entity as per specified list of namespace permissions.'}
{'code': 'private void failTask(Throwable e){\n  ServiceUtils.logSevere(this,e);\n  this.sendStageProgressPatch(buildPatch(TaskState.TaskStage.FAILED,e));\n}\n', 'nl': 'Moves the service into the FAILED state.'}
{'code': 'public void configure(){\n  TrafficController tc=new LawicellTrafficController();\n  this.getSystemConnectionMemo().setTrafficController(tc);\n  log.debug("Connecting port");\n  tc.connectPort(this);\n  log.debug("send version request");\n  jmri.jmrix.can.CanMessage m=new jmri.jmrix.can.CanMessage(new int[]{\'V\',13,\'S\',\'4\',13,\'O\',13},tc.getCanid());\n  m.setTranslated(true);\n  tc.sendCanMessage(m,null);\n  this.getSystemConnectionMemo().setProtocol(getOptionState(option1Name));\n  this.getSystemConnectionMemo().configureManagers();\n}\n', 'nl': 'set up all of the other objects to operate with a CAN RS adapter connected to this port'}
{'code': 'public void ping(){\n  checkSocket();\n  this.socket.sendTextMessage("ping");\n}\n', 'nl': 'Test the connection. A pong message will be returned, this message will not be broadcast to the channel. This call is asynchronous, any error or success with be sent as a separate message to the listener.'}
{'code': 'public static synchronized void install(){\n}\n', 'nl': 'Installs the JSSE provider.'}
{'code': 'public void collect(Thread thread){\n  final StackTraceElement[] stackTrace=thread.getStackTrace();\n  collectByKey(GLOBAL,stackTrace);\n}\n', 'nl': "Override this method to collect based other criteria <p/> If the application knows that a certain type of task happens in a certain thread, it is possible to group the information by that type of task. <p/> Example collect the information grouped by request path, api call, or actor. <p/>It's advisable to either override this method or to call collectByKey directly <p/>Collecting per thread usually produces too much information. Some idle threads are also irrelevant for instance idle worker threads and skew the data."}
{'code': 'public void testMixedInstances(){\n  runTestOnData(generateData(5,5,5));\n}\n', 'nl': 'tests constructing a vector from a mixed instance'}
{'code': 'public static void addIsPreviousVersionOfDOIRelatedIdentifier(@NotNull DataCiteMetadata metadata,@NotNull DOI replacing){\n  DataCiteMetadata.RelatedIdentifiers.RelatedIdentifier rid=FACTORY.createDataCiteMetadataRelatedIdentifiersRelatedIdentifier();\n  rid.setRelatedIdentifierType(RelatedIdentifierType.DOI);\n  rid.setValue(replacing.getDoiName());\n  rid.setRelationType(RelationType.IS_PREVIOUS_VERSION_OF);\n  metadata.getRelatedIdentifiers().getRelatedIdentifier().add(rid);\n}\n', 'nl': 'Add RelatedIdentifier describing the DOI of the resource replacing the resource being registered.'}
{'code': 'public void store(String key,PreparedStatement ps,String query){\n  PreparedStatementHolder psh=new PreparedStatementHolder(key,ps,query);\n  cache.put(key,psh);\n}\n', 'nl': 'Store prepared statement.'}
{'code': 'private void stackMoveHelper(GPR dest,Offset off){\n  stackMoveHelper(asm,dest,off);\n}\n', 'nl': 'Move a value from the stack into a register using the shortest encoding and the appropriate width for 32/64'}
{'code': 'public void load_args(){\n  load_args(0,state.argumentTypes.length);\n}\n', 'nl': 'Pushes all of the arguments of the current method onto the stack.'}
{'code': 'public void putJSON(final String key,String value){\n  value=JSONObject.quote(value);\n  value=value.substring(1,value.length() - 1);\n  put(key,value);\n}\n', 'nl': 'Add a String to the map. The content of the String is escaped to be usable in JSON output.'}
{'code': '@Override public void addLayoutComponent(String name,Component comp){\n}\n', 'nl': 'Adds the specified component with the specified name to the layout.'}
{'code': 'public VcfSortRefiner(VcfReader in) throws IOException {\n  mIn=in;\n  setNext();\n}\n', 'nl': 'Wraps around an existing VCF reader.'}
{'code': 'public final void testDisjunctiveWithContextAndResourceIdParameters(){\n  assertNotNull(Validators.disjunctive(getContext(),android.R.string.cancel,Validators.notEmpty("foo"),Validators.minLength("foo",1)));\n}\n', 'nl': 'Tests the functionality of the disjunctive-method, which expects a context and a resource id as parameters.'}
{'code': 'public SnapshotInfo(String path,String prefix,String jvmInfo,int identifierSize,Date creationDate,int numberOfObjects,int numberOfGCRoots,int numberOfClasses,int numberOfClassLoaders,long usedHeapSize){\n  this.path=path;\n  this.prefix=prefix;\n  this.jvmInfo=jvmInfo;\n  this.identifierSize=identifierSize;\n  this.creationDate=creationDate != null ? new Date(creationDate.getTime()) : null;\n  this.numberOfObjects=numberOfObjects;\n  this.numberOfGCRoots=numberOfGCRoots;\n  this.numberOfClasses=numberOfClasses;\n  this.numberOfClassLoaders=numberOfClassLoaders;\n  this.usedHeapSize=usedHeapSize;\n  this.properties=new HashMap<String,Serializable>();\n}\n', 'nl': 'Construct a snapshot info.'}
{'code': 'public void processEvent(SystemEvent event) throws AbortProcessingException {\n  FacesContext context=FacesContext.getCurrentInstance();\n  HtmlOutputText outputText=(HtmlOutputText)context.getApplication().createComponent("javax.faces.HtmlOutputText");\n  outputText.setValue("Dynamic Text");\n  outputText.setEscape(false);\n  getChildren().add(1,outputText);\n}\n', 'nl': "Process the system event. <p> Here we'll add a child in between static text. If dynamic component state saving works properly then upon redisplay it should have first static, then dynamic and then static text. </p>"}
{'code': 'private void searchText(){\n  String query=searchEditText.getText().toString();\n  presenter.onScrollFinished(query);\n}\n', 'nl': "Method that retrieves the AutoCompleteTextView's text and passes it to the presenter"}
{'code': 'private void doTranslation(float dx,float dy){\n  mRenderer.matrixTranslate(dx,-dy,0);\n}\n', 'nl': 'Do rotation (plate rotation, not model rotation)'}
{'code': 'public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){\n  fragment.startActivityForResult(getIntent(context),requestCode);\n}\n', 'nl': 'Send the crop Intent with a custom request code'}
{'code': 'public void remove(){\n  iterator.remove();\n}\n', 'nl': 'Remove the current SocketChannel from the iterator'}
{'code': 'public void expectServerProxyFailed(){\n  expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED));\n}\n', 'nl': 'Expect a server proxy failure.'}
{'code': '@Override public void writeStartElement(String localName) throws XMLStreamException {\n  writeStartElement(null,localName,null);\n}\n', 'nl': 'Writes a start tag to the output. All writeStartElement methods open a  new scope in the internal namespace context. Writing the corresponding  EndElement causes the scope to be closed'}
{'code': '@Override public void deleteMessage(String msgId){\n  mImService.tryToDeleteChatMessage(msgId);\n}\n', 'nl': 'Delete a message from its message id from history. Will resolve if the message is one to one or from a group chat.'}
{'code': 'public void write(Writer out,ELContext ctx) throws ELException, IOException {\n  out.write(this.literal);\n}\n', 'nl': 'Allow this instance to write to the passed Writer, given the ELContext state'}
{'code': 'public static void enterSearchQuery(Activity activity,String query){\n  EspressoTestUtils.clickMenuItem(activity,activity.getString(R.string.action_search),R.id.action_search);\n  onView(isAssignableFrom(AutoCompleteTextView.class)).perform(click(),typeText(query),clearFocus());\n  Espresso.closeSoftKeyboard();\n}\n', 'nl': 'Clicks on the search menu item and enters the given search query'}
{'code': 'private void assertRoleCount(UserAssignmentDetails details,int expectedRoleCount){\n  assertEquals(expectedRoleCount,details.getRoleKeys().size());\n}\n', 'nl': 'Assert the number of the role assignment details'}
{'code': 'private void defineRootPanes(UIDefaults d){\n  String c=PAINTER_PREFIX + "FrameAndRootPainter";\n  String p="RootPane";\n  d.put(p + ".States","Enabled,WindowFocused,NoFrame");\n  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));\n  d.put(p + ".opaque",Boolean.FALSE);\n  d.put(p + ".NoFrame",new RootPaneNoFrameState());\n  d.put(p + ".WindowFocused",new RootPaneWindowFocusedState());\n  d.put(p + "[Enabled+NoFrame].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED_NOFRAME));\n  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED));\n  d.put(p + "[Enabled+WindowFocused].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED_WINDOWFOCUSED));\n}\n', 'nl': 'Initialize the root pane settings.'}
{'code': 'public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGet(request,response);\n}\n', 'nl': 'Process Post Request (handled by get)'}
{'code': '@AfterClass public static void tearDownAfterClass() throws Exception {\n}\n', 'nl': 'Method tearDownAfterClass.'}
{'code': 'private void popOffset(GPR reg){\n  asm.emitLAddr(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_OFFSET,FP);\n  discardSlot();\n}\n', 'nl': "Emits the code to pop an Offset (a value of the unboxed type Offset) from the expression stack into the register 'reg'."}
{'code': '@Override public synchronized void disconnectionNotification(String eventName,Object source){\n  m_listenees.remove(eventName);\n}\n', 'nl': 'Notify this object that it has been deregistered as a listener with a source with respect to the supplied event name'}
{'code': 'public void dispatch(NamingListener listener){\nswitch (type) {\ncase OBJECT_ADDED:\n    ((NamespaceChangeListener)listener).objectAdded(this);\n  break;\ncase OBJECT_REMOVED:\n((NamespaceChangeListener)listener).objectRemoved(this);\nbreak;\ncase OBJECT_RENAMED:\n((NamespaceChangeListener)listener).objectRenamed(this);\nbreak;\ncase OBJECT_CHANGED:\n((ObjectChangeListener)listener).objectChanged(this);\nbreak;\n}\n}\n', 'nl': 'Invokes the appropriate listener method on this event. The default implementation of this method handles the following event types: <tt>OBJECT_ADDED</TT>, <TT>OBJECT_REMOVED</TT>, <TT>OBJECT_RENAMED</TT>, <TT>OBJECT_CHANGED</TT>. <p> The listener method is executed in the same thread as this method.  See the <a href=package-summary.html#THREADING>package description</a> for more information on threading issues.'}
{'code': 'public void incrementLocalSequenceNumber(){\n  ++this.localSequenceNumber;\n}\n', 'nl': 'Increment the local CSeq # for the dialog. This is useful for if you want to create a hole in the sequence number i.e. route a request outside the dialog and then resume within the dialog.'}
{'code': '@Override public void redriveTask(Long taskId){\n  CloseableHttpResponse httpResponse=null;\n  httpResponse=postOverHttp(null,"/redrivetask/" + taskId);\n  HttpClientUtils.closeQuietly(httpResponse);\n}\n', 'nl': 'Interface method implementation. Posts to Flux Runtime API to redrive a task.'}
{'code': 'public void onContractDetails(final Contract contract) throws BrokerModelException {\n  m_contractRequests.put(contract.getId(),contract);\n}\n', 'nl': 'Method onContractDetails.'}
{'code': 'public void removeSrcClass(SootClass clz){\n  srcClasses.remove(clz.getName());\n}\n', 'nl': 'Remove a class from the list of src classes.'}
{'code': 'public void start(){\n  registerReceiver();\n  activity();\n}\n', 'nl': 'Start the activity timer.'}
{'code': 'private PostgreSQLRawModuleFunctions(){\n}\n', 'nl': 'Do not instantiate this class.'}
{'code': 'public static void resetAccessedStatus(){\n  ACCESSED_FLAGS.clear();\n  DEFAULT_FLAGS.reset();\n  sFlags=DEFAULT_FLAGS;\n}\n', 'nl': 'Unsets list of flags which have been accessed/set. If your test is failing due to another test using a global flag, find THAT test and put a call to this into the tear down method.'}
{'code': 'public ScriptedProblem(String script,String name) throws ScriptException {\n  this(new StringReader(script),name);\n}\n', 'nl': 'Constructs a new problem implemented in a scripting language.'}
{'code': 'public void reply(Object... args){\n  reply(ArgArrayBuilder.buildArgumentsArray(stateController.clientConfig().objectMapper(),args),null);\n}\n', 'nl': 'Send a normal response to the request.<br> This version of the function will use Jacksons object mapping capabilities to transform the argument objects in a JSON argument array which will be sent as the positional arguments of the call. If keyword arguments are needed then this function can not be used.<br> If this is called more than once then the following invocations will have no effect. Respones will be only sent once.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:\n    getCodeLang_1().clear();\n  return;\ncase UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:\ngetCodeLangs_1().clear();\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void define(HGHandle handle,HGHandle type,Object instance,int flags){\n  graph.define(handle,type,instance,flags);\n  add(handle);\n}\n', 'nl': 'Define in global graph and mark as member of this subgraph.'}
{'code': 'public WAppsAction(String action,String accelerator) throws IOException {\n  this(action,accelerator,null);\n}\n', 'nl': 'Application Action'}
{'code': 'public void closeNetwork(){\n}\n', 'nl': 'Close model Network.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.629 -0400",hash_original_method="618D7845515FD0AE91AC232728DBE8EB",hash_generated_method="10A12555120830F4CD4383CA872BA8B8") public void pair(BluetoothAdapter adapter,BluetoothDevice device,int passkey,byte[] pin){\n  pairOrAcceptPair(adapter,device,passkey,pin,true);\n}\n', 'nl': 'Initiates a pairing with a remote device and checks to make sure that the devices are paired and that the correct actions were broadcast.'}
{'code': 'public void testBasics() throws IOException {\n  Analyzer a=new IndonesianAnalyzer();\n  checkOneTerm(a,"peledakan","ledak");\n  checkOneTerm(a,"pembunuhan","bunuh");\n  assertAnalyzesTo(a,"bahwa",new String[]{});\n  a.close();\n}\n', 'nl': 'test stopwords and stemming'}
{'code': 'public void startElement(String localName) throws SAXException {\n  startElement("",localName,"",EMPTY_ATTS);\n}\n', 'nl': 'Start a new element without a qname, attributes or a Namespace URI. <p/> <p>This method will provide an empty string for the Namespace URI, and empty string for the qualified name, and a default empty attribute list. It invokes #startElement(String, String, String, Attributes)} directly.</p>'}
{'code': 'public void testTimeoutNotGreedy(){\n  doTestTimeout(false,false);\n}\n', 'nl': 'Test that timeout is obtained, and soon enough!'}
{'code': 'public void destroy(){\n  log.fine("destroy");\n  super.destroy();\n}\n', 'nl': 'Clean up resources'}
{'code': 'public void testSize0IsolatedMode() throws Exception {\n  processSize0Test(DeploymentMode.ISOLATED);\n}\n', 'nl': 'Test GridDeploymentMode.ISOLATED mode.'}
{'code': 'public YadisUrl(XriIdentifier xriId) throws YadisException {\n  this(urlFromString(xriId.toURINormalForm()));\n}\n', 'nl': 'Constructs a YadisURL from an XRI identifier.'}
{'code': 'public void defineDictionary(String name,Map<String,Object> mapping){\n  dictionaries.put(name,mapping);\n}\n', 'nl': 'Define a map for this group. <p> Not thread safe...do not keep adding these while you reference them.</p>'}
{'code': 'public void actionPerformed(ActionEvent e){\n  String license=LicenseUtils.license();\n  JTextArea textArea=new JTextArea(license);\n  textArea.setFont(new Font("Monospaced",Font.PLAIN,12));\n  JScrollPane scroll=new JScrollPane(textArea);\n  scroll.setPreferredSize(new Dimension(600,400));\n  Box b=Box.createVerticalBox();\n  b.add(scroll);\n  JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),b,"License",JOptionPane.PLAIN_MESSAGE);\n}\n', 'nl': "Closes the frontmost session of this action's desktop."}
{'code': 'private void initWidget(){\n  this.widgetCard=(ImageView)findViewById(R.id.widget_day_week_card);\n  widgetCard.setVisibility(View.GONE);\n  this.widgetIcon=(ImageView)findViewById(R.id.widget_day_week_icon);\n  this.widgetWeather=(TextView)findViewById(R.id.widget_day_week_weather);\n  this.widgetTemp=(TextView)findViewById(R.id.widget_day_week_temp);\n  this.widgetRefreshTime=(TextView)findViewById(R.id.widget_day_week_refreshTime);\n  this.widgetWeeks=new TextView[]{(TextView)findViewById(R.id.widget_day_week_week_1),(TextView)findViewById(R.id.widget_day_week_week_2),(TextView)findViewById(R.id.widget_day_week_week_3),(TextView)findViewById(R.id.widget_day_week_week_4),(TextView)findViewById(R.id.widget_day_week_week_5)};\n  this.widgetIcons=new ImageView[]{(ImageView)findViewById(R.id.widget_day_week_icon_1),(ImageView)findViewById(R.id.widget_day_week_icon_2),(ImageView)findViewById(R.id.widget_day_week_icon_3),(ImageView)findViewById(R.id.widget_day_week_icon_4),(ImageView)findViewById(R.id.widget_day_week_icon_5)};\n  this.widgetTemps=new TextView[]{(TextView)findViewById(R.id.widget_day_week_temp_1),(TextView)findViewById(R.id.widget_day_week_temp_2),(TextView)findViewById(R.id.widget_day_week_temp_3),(TextView)findViewById(R.id.widget_day_week_temp_4),(TextView)findViewById(R.id.widget_day_week_temp_5)};\n  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_day_week_wall);\n  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());\n  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_day_week_container);\n  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);\n  adapter.setDropDownViewResource(R.layout.spinner_text);\n  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_day_week_spinner);\n  locationSpinner.setAdapter(adapter);\n  locationSpinner.setOnItemSelectedListener(this);\n  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_day_week_showCardSwitch);\n  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());\n  this.hideRefreshTimeSwitch=(Switch)findViewById(R.id.activity_create_widget_day_week_hideRefreshTimeSwitch);\n  hideRefreshTimeSwitch.setOnCheckedChangeListener(new HideRefreshTimeSwitchCheckListener());\n  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_day_week_blackTextSwitch);\n  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());\n  Button doneButton=(Button)findViewById(R.id.activity_create_widget_day_week_doneButton);\n  doneButton.setOnClickListener(this);\n}\n', 'nl': '<br> UI.'}
{'code': 'private void handleSelectorDimmerClick(int idx,String[] levelNames){\n  listener.onSelectorDimmerClick(idx,levelNames);\n}\n', 'nl': 'Handles the selector dimmer click'}
{'code': 'public void markSaved(){\n  this.entities.markSaved(this.world.getTotalWorldTime());\n  this.isModified=false;\n}\n', 'nl': 'Mark this cube as saved to disk'}
{'code': 'public void destroy(){\n  context.removeVisualizationListener(this);\n  context.removeResultListener(this);\n  plot.dispose();\n}\n', 'nl': 'Destroy this overview plot.'}
{'code': '@Override public void endSampling(Sampler<?,?,?> sampler){\n}\n', 'nl': 'Does nothing.'}
{'code': '@Override public void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator) throws IOException {\n  writeVertices(outputStream,vertexIterator,null);\n}\n', 'nl': 'Writes a list of vertices without edges.'}
{'code': 'public synchronized void finer(String msg){\n  LogRecord record=new LogRecord(Level.FINER,msg);\n  log(record);\n}\n', 'nl': 'Logs a FINER message'}
{'code': '@AfterMethod public void cleanUp() throws IOException {\n  root.setApplicationId(-1);\n  root.setBusinessTransactionId(-1);\n}\n', 'nl': 'Clean test folder after each test.'}
{'code': 'public AccessStructure(String user,jplagWebService.server.Option usr_option) throws JPlagException {\n  dec=new StatusDecorator(new Status());\n  submissionID=JPlagCentral.getNextSubmissionID();\n  commandLineInString=generateCMD(usr_option);\n  username=user;\n  title=usr_option.getTitle();\n  date=System.currentTimeMillis();\n  generateStructure(usr_option,commandLineInString);\n}\n', 'nl': 'Constructs a new AccessStructure object for an Option'}
{'code': 'public void testUnconcernedParentIsNotError() throws Exception {\n  assertEquals(NO_WARNINGS,lintClassFile("bin/classes/ExampleApi.class"));\n}\n', 'nl': 'Test that a java file where a subscription is made in a class that is not a leak concern.'}
{'code': 'public void addListener(DiscoveryManagerListener listener){\n  for (  ConnectableDevice device : compatibleDevices.values()) {\n    listener.onDeviceAdded(this,device);\n  }\n  discoveryListeners.add(listener);\n}\n', 'nl': 'Listener which should receive discovery updates. It is not necessary to set this listener property unless you are implementing your own device picker. Connect SDK provides a default DevicePicker which acts as a DiscoveryManagerListener, and should work for most cases. If you have provided a capabilityFilters array, the listener will only receive update messages for ConnectableDevices which satisfy at least one of the CapabilityFilters. If no capabilityFilters array is provided, the listener will receive update messages for all ConnectableDevice objects that are discovered.'}
{'code': 'public void addComparator(Comparator<T> comparator,boolean ascending){\n  this.comparators.add(new InvertibleComparator<T>(comparator,ascending));\n}\n', 'nl': 'Add a Comparator to the end of the chain using the provided sort order.'}
{'code': 'public void recordProcessingTime(EppMetric metric){\n  String eppStatusCode=metric.getStatus().isPresent() ? String.valueOf(metric.getStatus().get().code) : "";\n  processingTime.record(metric.getEndTimestamp().getMillis() - metric.getStartTimestamp().getMillis(),metric.getCommandName().or(""),metric.getClientId().or(""),eppStatusCode);\n}\n', 'nl': 'Record the server-side processing time for an EPP request.'}
{'code': 'public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBackground(context,g,x,y,w,h,orientation);\n}\n', 'nl': 'Paints the background of a scrollbar. This implementation invokes the method of the same name without the orientation.'}
{'code': 'public void replaceSteppables(Steppable[] steppables){\n  toReplace=(Steppable[])(steppables.clone());\n}\n', 'nl': 'Requests that the provided Steppables replace the existing Steppables in the internal array prior to the next step() call.'}
{'code': 'public void deleteAllDistributionPreferences(org.hibernate.Session hibSession){\n  deleteAllDistributionPreferences(hibSession,true);\n}\n', 'nl': 'Deletes all distribution prefs and updates the class_ objects'}
{'code': '@Override public void notifyServerConflict(){\n  notifyConflict();\n}\n', 'nl': 'Notifies the user that he/she is trying to connect to a server that is not the currently-connected (default) server.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(namednodemapsetnameditem.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void fireNeuronTypeChanged(final NeuronUpdateRule old,final NeuronUpdateRule changed){\n  for (  NeuronListener listener : neuronListeners) {\n    listener.neuronTypeChanged(new NetworkEvent<NeuronUpdateRule>(this,old,changed));\n  }\n}\n', 'nl': 'Fire a neuron type changed event to all registered model listeners.'}
{'code': 'public void java_lang_System_initProperties(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  ReferenceVariable sysProps=helper.staticField("java.lang.System","props");\n  helper.assign(returnVar,sysProps);\n  helper.assign(sysProps,params[0]);\n}\n', 'nl': 'NOTE: this method is not documented, it should do following:'}
{'code': 'public void update(){\n  super.fireContentsChanged(this,0,data.size() - 1);\n}\n', 'nl': 'Mark all entries as changed, so they get repainted.'}
{'code': 'public synchronized void disableExclusiveProcessing(String controllerId,String instanceId,PropertyHandler paramHandler) throws APPlatformException {\n  logger.debug("disableExclusiveProcessing(\'{}\')",instanceId);\n  platformService.unlockServiceInstance(controllerId,instanceId,paramHandler.getTPAuthentication());\n}\n', 'nl': 'Disables exclusive processing.'}
{'code': 'public void indexDocument(Document doc){\n  indexDocuments(Arrays.asList(new Document[]{doc}));\n}\n', 'nl': 'Indexes a document'}
{'code': 'public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\'GroupImage\'";\n  db.execSQL(sql);\n}\n', 'nl': 'Drops the underlying database table.'}
{'code': 'public void appendToDDLWriter(String stringToWrite){\n  appendToDDLWriter(createSchemaWriter,stringToWrite);\n}\n', 'nl': 'PUBLIC: If the schema manager is writing to a writer, append this string to that writer.'}
{'code': 'public void addHeaderLine(String line){\n  mLines.add(line);\n}\n', 'nl': 'Add a BED header line.'}
{'code': 'public void removeAll(){\n  checkWidget();\n  text.setText("");\n  table.removeAll();\n}\n', 'nl': "Removes all of the items from the receiver's list and clear the contents of receiver's text field. <p>"}
{'code': '@SuppressWarnings("UnusedDeclaration") @Beta(Beta.Feature.Sandbox) public static void enableSandbox(){\n  Fabric.getLogger().i(Digits.TAG,"Sandbox is enabled");\n  getInstance().getSandboxConfig().enable();\n  getInstance().getApiClientManager().createNewClient();\n}\n', 'nl': 'Enable sandbox mode'}
{'code': 'public void removeFromLists(int key){\n  this.subjectArea.remove(key);\n  this.courseNbr.remove(key);\n  this.itype.remove(key);\n  this.classNumber.remove(key);\n}\n', 'nl': 'Remove object specified by the index from the lists'}
{'code': 'public void endVisit(ArrayInitializer node){\n}\n', 'nl': 'End of visit the given type-specific AST node. <p> The default implementation does nothing. Subclasses may reimplement. </p>'}
{'code': 'public void mouseReleased(MouseEvent event){\n  tryPopup(event);\n}\n', 'nl': 'Invoked when a mouse button has been released on a component.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.882 -0400",hash_original_method="5702A363D6AA8AC6DC93E3805C32E157",hash_generated_method="B62E1D2DA86DD6FBB9E0231DBC0CFAD3") private PrintDocumentInfo(){\n}\n', 'nl': 'Creates a new instance.'}
{'code': 'public static void drawToPng(final String dest,final AnnotatedTypeMirror type){\n  drawToPng(new File(dest),type);\n}\n', 'nl': 'Draws a dot file for type in a temporary directory then calls the "dot" program to convert that file into a png at the location dest.  This method will fail if a temp file can\'t be created.'}
{'code': 'public static void registerFirewallContentObserver(Context context,ContentObserver observer){\n  context.getContentResolver().registerContentObserver(Uri.parse(String.format(FIREWALL_URI_STR,"")),true,observer);\n}\n', 'nl': 'Register firewall content provider observer'}
{'code': 'public void addCommonBits(Geometry geom){\n  Translater trans=new Translater(commonCoord);\n  geom.apply(trans);\n  geom.geometryChanged();\n}\n', 'nl': 'Adds the common coordinate bits back into a Geometry. The coordinates of the Geometry are changed.'}
{'code': 'public void enableUserDefinedRPC(){\n  int enabledRpc=scannerParam.getTargetParamsEnabledRPC();\n  enabledRpc|=ScannerParam.RPC_USERDEF;\n  scannerParam.setTargetParamsEnabledRPC(enabledRpc);\n}\n', 'nl': 'Force UserDefinedRPC setting'}
{'code': 'private void copyAndShift(Object src,long off,int len){\n  ensureCapacity(pos + len);\n  GridUnsafe.copyMemory(src,off,null,data + pos,len);\n  shift(len);\n}\n', 'nl': 'Copy source object to the stream shifting position afterwards.'}
{'code': 'public DividerItemDecoration(Context context){\n  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);\n  mDivider=styledAttributes.getDrawable(0);\n  styledAttributes.recycle();\n}\n', 'nl': 'Default divider will be used'}
{'code': 'public void reset(){\n  packetCount=0;\n  octetCount=0;\n  setLong(packetCount,20,24);\n  setLong(octetCount,24,28);\n  delta=now=oldnow=0;\n}\n', 'nl': 'Resets the reports (total number of bytes sent, number of packets sent, etc.)'}
{'code': 'public static void bindBack(Form currentForm,LazyValue<Form> destination){\n  new SwipeBackSupport().bind(currentForm,destination);\n}\n', 'nl': 'Binds support for swiping to the given forms'}
{'code': '@Override public void close(){\n  setHosting(false);\n}\n', 'nl': 'Sets hosting to false and returns without closing. Calling closeAdvisor will actually close this advisor.'}
{'code': 'public void sendReject(long refSeqNum,long sessionRejectReason,CharSequence text) throws IOException {\n  prepare(txMessage,Reject);\n  txMessage.addField(RefSeqNum).setInt(refSeqNum);\n  txMessage.addField(SessionRejectReason).setInt(sessionRejectReason);\n  txMessage.addField(Text).setString(text);\n  send(txMessage);\n}\n', 'nl': 'Send a Reject(3) message.'}
{'code': 'public void updateAccess(boolean chat,boolean editor,boolean commercial,boolean user,boolean subs,boolean follow){\n  boolean empty=currentUsername.isEmpty() || currentToken.isEmpty();\n  access.setVisible(!empty);\n  accessLabel.setVisible(!empty);\n  StringBuilder b=new StringBuilder("<html><body style=\'line-height:28px;\'>");\n  b.append(accessStatusImage(chat)).append("&nbsp;Chat access<br />");\n  b.append(accessStatusImage(user)).append("&nbsp;Read user info<br />");\n  b.append(accessStatusImage(editor)).append("&nbsp;Editor access<br />");\n  b.append(accessStatusImage(commercial)).append("&nbsp;Run commercials<br />");\n  b.append(accessStatusImage(subs)).append("&nbsp;Show subscribers<br />");\n  b.append(accessStatusImage(follow)).append("&nbsp;Follow channels");\n  access.setText(b.toString());\n  update();\n}\n', 'nl': 'Update the text showing what scopes are available.'}
{'code': 'public synchronized void addListener(final IGlobalProgressManagerListener listener){\n  m_listeners.addListener(listener);\n}\n', 'nl': 'Adds a new listener that is notified about changes in the manager.'}
{'code': 'private void showPickAction(boolean show){\n  mCards.getCard(CARD_PICKER).setActionVisibility(ACTION_PICK_PLACE,show);\n}\n', 'nl': "Sets the visibility of the 'Pick Action' option on the 'Pick a place' card. The action should be hidden when the PlacePicker Intent has been fired to prevent it from being launched multiple times simultaneously."}
{'code': 'public void updateRendering(AffineTransform u2d,boolean dbr,boolean cpt,Shape aoi,int width,int height){\n  repaintManager.setupRenderer(u2d,dbr,aoi,width,height);\n  List l=new ArrayList(1);\n  l.add(aoi);\n  updateRendering(l,cpt);\n}\n', 'nl': 'Updates the rendering buffer.  Only to be called from the update thread.'}
{'code': 'public static void transformedBooleanComparison(){\n  transformedBooleanComparison++;\n}\n', 'nl': 'IFEQ -> IFLE / IFNE -> IFGT'}
{'code': 'public void clearWho(){\n  super.removeElement(Who.KEY);\n}\n', 'nl': 'Removes all existing person description instances.'}
{'code': '@Override public void show(){\n  final Stage stage=getStage();\n  stage.getRoot().clearChildren();\n  LmlUtilities.appendActorsToStage(stage,actors);\n}\n', 'nl': 'Invoked after previous view is hidden and this view is about to show. Might be called when the view is being reloaded. Clears previous stage actors and adds managed actor to stage. If overridden, call super.'}
{'code': '@Override public void insert(Item x,int position){\n  Item[] newItems=(Item[])new Object[items.length + 1];\n  System.arraycopy(items,0,newItems,0,position);\n  newItems[position]=x;\n  System.arraycopy(items,position,newItems,position + 1,items.length - position);\n  items=newItems;\n}\n', 'nl': 'Inserts item into given position. Code from discussion #3'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.094 -0500",hash_original_method="512A5161660D68AB5470903C03DA343E",hash_generated_method="9A8C94856F8B55E80E440B65AAF5FD74") public void copyFrom(Bitmap b){\n  mRS.validate();\n  validateBitmapSize(b);\n  validateBitmapFormat(b);\n  mRS.nAllocationCopyFromBitmap(getID(),b);\n}\n', 'nl': 'Copy an allocation from a bitmap.  The height, width, and format of the bitmap must match the existing allocation.'}
{'code': 'public void connect(int timeout,String host,int tcpPort,int udpPort) throws IOException {\n  connect(timeout,InetAddress.getByName(host),tcpPort,udpPort);\n}\n', 'nl': 'Opens a TCP and UDP client.'}
{'code': 'public Comment createComment(Note note,String action,String comment){\n  Comment newComment=new Comment();\n  newComment.setText(comment);\nswitch (action) {\ncase NoteActivity.CLOSE:\n    newComment.setAction(Comment.ACTION_CLOSE);\n  break;\ncase NoteActivity.COMMENT:\nnewComment.setAction(Comment.ACTION_COMMENT);\nbreak;\ncase NoteActivity.REOPEN:\nnewComment.setAction(Comment.ACTION_REOPEN);\nbreak;\ndefault :\nnewComment.setAction(Comment.ACTION_OPEN);\nbreak;\n}\nnewComment.setNote(note);\nreturn newComment;\n}\n', 'nl': 'Create a Comment with the given parameters without modifying the Note.'}
{'code': 'public void clean(){\n  clean(stringClassMap.values());\n  clean(stringClassMap2.values());\n  clean(classStringMap.keySet());\n}\n', 'nl': 'remove classes which are not in the default class loaders.'}
{'code': '@After public void tearDown(){\n  webClient.closeAllWindows();\n}\n', 'nl': 'Tear down after testing.'}
{'code': 'public void runtimeInit(TransformerImpl transformer) throws TransformerException {\n}\n', 'nl': 'This function will be called on top-level elements only, just before the transform begins.'}
{'code': 'public void add(Permission permission){\n  perms.put(permission,permission);\n}\n', 'nl': 'Adds the argument to the collection.'}
{'code': 'public static void main(String[] argv){\n  runFilter(new RemoveWithValues(),argv);\n}\n', 'nl': 'Main method for testing this class.'}
{'code': 'public AddWorldParameterDialog(java.awt.Frame parent,boolean modal,Diagram diagram,Point clickPosition){\n  super(parent,modal);\n  initComponents();\n  DefaultComboBoxModel model=new DefaultComboBoxModel();\n  for (  UniformBinding binding : UniformBinding.values()) {\n    model.addElement(binding);\n  }\n  this.diagram=diagram;\n  this.clickPosition=clickPosition;\n  nameField.setModel(model);\n}\n', 'nl': 'Creates new form AddMaterialParameter'}
{'code': 'public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {\n  m_prefixMappings.addElement(prefix);\n  m_prefixMappings.addElement(uri);\n}\n', 'nl': 'Receive notification of the start of a Namespace mapping. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the start of each element (such as allocating a new tree node or writing output to a file).</p>'}
{'code': 'public void testConstrBIScale(){\n  String a="1231212478987482988429808779810457634781384756794987";\n  BigInteger bA=new BigInteger(a);\n  int aScale=10;\n  BigDecimal aNumber=new BigDecimal(bA,aScale);\n  assertEquals("incorrect value",bA,aNumber.unscaledValue());\n  assertEquals("incorrect scale",aScale,aNumber.scale());\n}\n', 'nl': 'new BigDecimal(BigInteger value, int scale)'}
{'code': 'private void populateXtremIOAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){\n  accessProfile.setSystemId(providerInfo.getId());\n  accessProfile.setSystemClazz(providerInfo.getClass());\n  accessProfile.setIpAddress(providerInfo.getIPAddress());\n  accessProfile.setUserName(providerInfo.getUserName());\n  accessProfile.setPassword(providerInfo.getPassword());\n  accessProfile.setSystemType(DiscoveredDataObject.Type.xtremio.name());\n  accessProfile.setPortNumber(providerInfo.getPortNumber());\n  accessProfile.setSslEnable(String.valueOf(providerInfo.getUseSSL()));\n}\n', 'nl': 'inject details needed for Scanning'}
{'code': 'public void paintCheckBoxMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the background of a check box menu item.'}
{'code': 'public void loadFile(String filename,AbstractFileLoader... loaders){\n  ArffPanel panel;\n  panel=new ArffPanel(filename,loaders);\n  panel.addChangeListener(this);\n  tabbedPane.addTab(panel.getTitle(),panel);\n  tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);\n}\n', 'nl': 'loads the specified file'}
{'code': 'public void createVertexAndNormalBuffersOnly(){\n  mVertices.compact().position(0);\n  mNormals.compact().position(0);\n  createBuffer(mVertexBufferInfo,BufferType.FLOAT_BUFFER,mVertices,GLES20.GL_ARRAY_BUFFER);\n  createBuffer(mNormalBufferInfo,BufferType.FLOAT_BUFFER,mNormals,GLES20.GL_ARRAY_BUFFER);\n  GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);\n  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);\n}\n', 'nl': "Creates the vertex and normal buffers only. This is typically used for a VertexAnimationObject3D's frames."}
{'code': 'public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {\n  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");\n  charProcessor.setXslTextElement(null);\n}\n', 'nl': 'Receive notification of the end of an element.'}
{'code': 'private CGraphFunctions(){\n}\n', 'nl': 'You are not supposed to instantiate this class.'}
{'code': 'public static void addPackage(String packagename){\n  packages.add(packagename);\n}\n', 'nl': 'Adds the given package name to the list of known package names.'}
{'code': 'public void testConfigure() throws Exception {\n  configuration.configure(container);\n  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/config.xml"));\n  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/DefaultAuthenticatorInit.ldift"));\n  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/applications/cargocpc.war"));\n}\n', 'nl': 'Test configuration.'}
{'code': 'public AlternativeName(boolean which,byte[] encoding) throws IOException {\n  super(encoding);\n  this.which=which;\n  this.alternativeNames=(GeneralNames)GeneralNames.ASN1.decode(encoding);\n}\n', 'nl': 'Creates the extension object on the base of its encoded form.'}
{'code': 'public void writeEntityToNBT(NBTTagCompound p_70014_1_){\n  p_70014_1_.setShort("xTile",(short)this.field_145791_d);\n  p_70014_1_.setShort("yTile",(short)this.field_145792_e);\n  p_70014_1_.setShort("zTile",(short)this.field_145789_f);\n  p_70014_1_.setShort("life",(short)this.ticksInGround);\n  p_70014_1_.setByte("inTile",(byte)Block.getIdFromBlock(this.field_145790_g));\n  p_70014_1_.setByte("inData",(byte)this.inData);\n  p_70014_1_.setByte("shake",(byte)this.arrowShake);\n  p_70014_1_.setByte("inGround",(byte)(this.inGround ? 1 : 0));\n  p_70014_1_.setByte("pickup",(byte)this.canBePickedUp);\n  p_70014_1_.setDouble("damage",this.damage);\n}\n', 'nl': '(abstract) Protected helper method to write subclass entity data to NBT.'}
{'code': 'public void dismiss(){\n  dismissInternal(false);\n}\n', 'nl': "Dismiss the fragment and it's bottom sheet. If the fragment was added to the back stack, all back stack state up to and including this entry will be popped. Otherwise, a new transaction will be committed to remove this fragment."}
{'code': 'public final void testValidateFails(){\n  DomainNameValidator domainNameValidator=new DomainNameValidator("foo");\n  assertFalse(domainNameValidator.validate("foo.t.t.c"));\n  assertFalse(domainNameValidator.validate("foo,com"));\n  assertFalse(domainNameValidator.validate("foo"));\n  assertFalse(domainNameValidator.validate("foo.123"));\n  assertFalse(domainNameValidator.validate(".com"));\n  assertFalse(domainNameValidator.validate("foo.a"));\n  assertFalse(domainNameValidator.validate("foo.com/users"));\n  assertFalse(domainNameValidator.validate("-foo.com"));\n  assertFalse(domainNameValidator.validate("foo-.com"));\n  assertFalse(domainNameValidator.validate("sub.-foo.com"));\n  assertFalse(domainNameValidator.validate("sub.foo-.com"));\n}\n', 'nl': 'Tests the functionality of the validate-method, if it fails.'}
{'code': 'private void initializeLiveAttributes(){\n  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);\n  surfaceScale=createLiveAnimatedNumber(null,SVG_SURFACE_SCALE_ATTRIBUTE,1f);\n  diffuseConstant=createLiveAnimatedNumber(null,SVG_DIFFUSE_CONSTANT_ATTRIBUTE,1f);\n}\n', 'nl': 'Initializes the live attribute values of this element.'}
{'code': 'public DenseDoubleMatrix3D(int slices,int rows,int columns){\n  setUp(slices,rows,columns);\n  this.elements=new double[slices * rows * columns];\n}\n', 'nl': 'Constructs a matrix with a given number of slices, rows and columns. All entries are initially <tt>0</tt>.'}
{'code': 'private void checkFailedOrCancelledCount(final State current){\n  Operation.CompletionHandler handler=null;\n  QueryTask.QuerySpecification spec=QueryTaskUtils.buildChildServiceTaskStatusQuerySpec(this.getSelfLink(),ImageDatastoreSweeperService.State.class,TaskState.TaskStage.FAILED,TaskState.TaskStage.CANCELLED);\n  this.sendQuery(spec,handler);\n}\n', 'nl': 'Triggers a query to retrieve the "child" ImageDatastoreSweeperService instances in FAILED or CANCELLED state.'}
{'code': 'public void newMethod() throws IOException {\n  writeCode(CALL_NEW_METHOD);\n}\n', 'nl': 'SWFActions interface'}
{'code': 'public void disconnect(LogConnection client) throws ReplicatorException {\n  client.release();\n}\n', 'nl': 'Disconnect from the log. Adapters must call this to free resources and avoid leaks.'}
{'code': 'public void addCollider(Triple colliderTrip){\n  colliders.add(colliderTrip);\n}\n', 'nl': 'Add another collider operation to the GraphChange.'}
{'code': 'public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n', 'nl': 'Paints the border of a progress bar.'}
{'code': 'public static void error(String msg,Throwable ex){\n  error(msg,ex,true);\n}\n', 'nl': 'Version that automatically pops a message.'}
{'code': 'public final void negate(){\n  x=-x;\n  y=-y;\n}\n', 'nl': "Negate the point's coordinates"}
{'code': 'public void generate(Queue<Pair<Env<AttrContext>,JCClassDecl>> queue){\n  generate(queue,null);\n}\n', 'nl': "Generates the source or class file for a list of classes. The decision to generate a source file or a class file is based upon the compiler's options. Generation stops if an error occurs while writing files."}
{'code': 'public AggregateFuture(Future<T>... futures){\n  for (  Future<T> f : futures)   components.add(f);\n}\n', 'nl': '<p> Construct from a set of futures which is copied internally. </p>'}
{'code': 'private void checkGETStatusCodeWithAwait(final String request,final Integer statusCode){\n  await().atMost(Duration.FIVE_SECONDS).until(null,equalTo(String.valueOf(statusCode)));\n}\n', 'nl': 'Checks if the GET request for the resource gets a response with the given status code.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(notationgetpublicidnull.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public MailAddress(String localPart,String domain) throws AddressException {\n  this(new InternetAddress(localPart + "@" + domain));\n}\n', 'nl': 'Constructs a MailAddress with the provided local part and domain.'}
{'code': 'public void join() throws InterruptedException {\n  _thread.join();\n}\n', 'nl': 'Wait for thread to complete'}
{'code': 'public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  request.getSession().setAttribute("school","gdou");\n  response.sendRedirect("servlet/SchoolServlet");\n  return;\n}\n', 'nl': 'The doGet method of the servlet. <br> This method is called when a form has its tag value method equals to get.'}
{'code': 'public void send(String msg,String to){\n  send(new XmppMsg(msg),to);\n}\n', 'nl': 'Wrapper for send(XmppMsg msg... method'}
{'code': 'public ExceptionQueuedEventContext(FacesContext context,Throwable thrown,UIComponent component,PhaseId phaseId){\n  this.context=context;\n  this.thrown=thrown;\n  this.component=component;\n  this.phaseId=((phaseId == null) ? context.getCurrentPhaseId() : phaseId);\n}\n', 'nl': '<p class="changed_added_2_0">Instantiate a new <code>ExceptionQueuedEventContext</code> that indicates the argument <code>Throwable</code> just occurred, relevant to the argument <code>component</code>, during the lifecycle phase <code>phaseId</code>.</p>'}
{'code': 'public void notationDecl(String name,String publicId,String systemId){\n}\n', 'nl': 'Receive notification of a notation declaration. <p>By default, do nothing.  Application writers may override this method in a subclass if they wish to keep track of the notations declared in a document.</p>'}
{'code': 'public void addIStore(int local){\n  xop(ByteCode.ISTORE_0,ByteCode.ISTORE,local);\n}\n', 'nl': 'Store integer from stack top into the given local.'}
{'code': 'public void forgetLoadedWallpaper(){\n  sGlobals.forgetLoadedWallpaper();\n}\n', 'nl': 'Remove all internal references to the last loaded wallpaper.  Useful for apps that want to reduce memory usage when they only temporarily need to have the wallpaper.  After calling, the next request for the wallpaper will require reloading it again from disk.'}
{'code': '@Override public void transform(final Coordinate c,final Point2D p){\n  p.setLocation(xFromModelUnitsToPixels(c.x),yFromModelUnitsToPixels(c.y));\n}\n', 'nl': 'Implements PointTransformation.transform'}
{'code': 'public void testGetCheckSum(){\n  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();\n  assertEquals("F8",instance.getCheckSum(msgStandalone));\n}\n', 'nl': 'Test of getCheckSum method, of class SeeedStudioRfidProtocol.'}
{'code': 'public void fallocate(long size){\n  LibaioContext.fallocate(fd,size);\n}\n', 'nl': 'It will use fallocate to initialize a file.'}
{'code': 'private void dispatchMessage(OFMessage m){\n  this.switchManager.handleMessage(this.sw,m,null);\n}\n', 'nl': 'Dispatches the message to the controller packet pipeline'}
{'code': 'public void testResourcePrivateMode() throws Exception {\n  processTestGridifyResource(DeploymentMode.PRIVATE);\n}\n', 'nl': 'Test GridDeploymentMode.ISOLATED mode.'}
{'code': 'public void publicMethod(){\n}\n', 'nl': 'This method should override the same public method in the base class.'}
{'code': 'private void addTuple(KeyHashValPair<MachineKey,AverageData> tuple){\n  MachineKey key=tuple.getKey();\n  dataMap.put(key,tuple.getValue());\n}\n', 'nl': 'This adds the given tuple to the dataMap'}
{'code': 'private void addObjectToBuilder(@NotNull StringBuilder builder,@NotNull String object,@NotNull ObjectTypes type){\n  builder.append(encapsulateObject(object,type));\n}\n', 'nl': 'Method encapsulates object, then adds object to the builder. Note the object cannot be null.'}
{'code': 'public void java_lang_Class_getDeclaringClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  helper.assignObjectTo(returnVar,Environment.v().getClassObject());\n}\n', 'nl': 'If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared. This method returns null if this class or interface is not a member of any other class. If this Class object represents an array class, a primitive type, or void,then this method returns null. Returns: the declaring class for this class public native java.lang.Class getDeclaringClass();'}
{'code': 'public void recordInvalidClassName(String name){\n}\n', 'nl': 'Records a class name that never exists. For example, a package name can be recorded by this method. This would improve execution performance since <code>get()</code> quickly throw an exception without searching the class path at all if the given name is an invalid name recorded by this method. Note that searching the class path takes relatively long time. <p>The current implementation of this method performs nothing.'}
{'code': 'public UnitChooser(final Collection<Unit> units,final Map<Unit,Collection<Unit>> dependent,final GameData data,final boolean allowTwoHit,final IUIContext uiContext){\n  this(units,Collections.emptyList(),dependent,data,allowTwoHit,uiContext);\n}\n', 'nl': 'Creates new UnitChooser'}
{'code': 'public void reset(){\n  mLastSelectedItem=MenuItem.MENU_ITEM1;\n}\n', 'nl': 'Initializes the drawer state.'}
{'code': '@SuppressWarnings("unchecked") public EnumeratedData(DataSource original,double offset,double steps){\n  this.original=original;\n  this.offset=offset;\n  this.steps=steps;\n  Class<? extends Comparable<?>>[] typesOrig=original.getColumnTypes();\n  Class<? extends Comparable<?>>[] types=new Class[typesOrig.length + 1];\n  System.arraycopy(typesOrig,0,types,1,typesOrig.length);\n  types[0]=Double.class;\n  setColumnTypes(types);\n  original.addDataListener(this);\n}\n', 'nl': 'Initializes a new data source based on an original data source which will contain an additional column which enumerates all rows. The enumeration will start at a specified offset and will have a specified step size.'}
{'code': 'public void startInternalActivity(Intent intent,boolean requireBackStack){\n  helper.startInternalActivity(intent,requireBackStack);\n}\n', 'nl': 'Starts an internal activity and keeps password if already present'}
{'code': 'public void reset(){\n}\n', 'nl': 'Reset for fresh reuse.'}
{'code': 'public void endNonEscaping() throws org.xml.sax.SAXException {\n  m_disableOutputEscapingStates.pop();\n}\n', 'nl': 'Ends an un-escaping section.'}
{'code': 'public void dispose(){\n  g.dispose();\n}\n', 'nl': 'Disposes of this graphics context and releases any system resources that it is using. A <code>Graphics</code> object cannot be used after <code>dispose</code>has been called. <p> When a Java program runs, a large number of <code>Graphics</code> objects can be created within a short time frame. Although the finalization process of the garbage collector also disposes of the same system resources, it is preferable to manually free the associated resources by calling this method rather than to rely on a finalization process which may not run to completion for a long period of time. <p> Graphics objects which are provided as arguments to the <code>paint</code> and <code>update</code> methods of components are automatically released by the system when those methods return. For efficiency, programmers should call <code>dispose</code> when finished using a <code>Graphics</code> object only if it was created directly from a component or another <code>Graphics</code> object.'}
{'code': 'public void printCfMaps(){\n  Iterator it=_cfMap.entrySet().iterator();\n  while (it.hasNext()) {\n    Entry entry=(Entry)it.next();\n    System.out.println(String.format("\\t\\tColumn family: %s",entry.getKey()));\n  }\n}\n', 'nl': 'Print column families.'}
{'code': 'public void destination(Object buildDir){\n  this.destination=buildDir;\n}\n', 'nl': 'Sets the target directory.'}
{'code': 'public void reset(){\n  digest.reset();\n  digest.update(inputPad,0,inputPad.length);\n}\n', 'nl': 'Reset the mac generator.'}
{'code': 'public void rollback(final Set<String> graphSourceNamesToCloseTxOn){\n  closeTx(graphSourceNamesToCloseTxOn,Transaction.Status.ROLLBACK);\n}\n', 'nl': 'Selectively rollback transactions on the specified graphs or the graphs of traversal sources.'}
{'code': 'public void resetBase(){\n  init();\n}\n', 'nl': 'Resets the axis to its default value. Same as init().'}
{'code': 'public void close() throws IOException {\n  manager.sendClose(info);\n}\n', 'nl': 'Close this connection.'}
{'code': 'public void testStatistic() throws Exception {\n  CountStatisticImpl stat=new CountStatisticImpl("myCounter","seconds","myDescription");\n  stat.setEnabled(true);\n  assertStatistic(stat,"myCounter","seconds","myDescription");\n  assertEquals(0,stat.getCount());\n  stat.increment();\n  assertEquals(1,stat.getCount());\n  stat.increment();\n  assertEquals(2,stat.getCount());\n  stat.decrement();\n  assertEquals(1,stat.getCount());\n  Thread.sleep(500);\n  stat.increment();\n  assertLastTimeNotStartTime(stat);\n  LOG.info("Counter is: " + stat);\n  stat.reset();\n  assertEquals(0,stat.getCount());\n}\n', 'nl': 'Use case for CountStatisticImple class.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:\n    setAnnotationList((ExpressionAnnotationList)null);\n  return;\ncase N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:\ngetTypeVars().clear();\nreturn;\ncase N4JSPackage.FUNCTION_EXPRESSION__NAME:\nsetName(NAME_EDEFAULT);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void insert(String s){\n  tree.insert(s,true);\n}\n', 'nl': 'Insert the string into our collection. <p> Note that since there are no duplicates, attempts to insert the same string multiple times are silently ignored.'}
{'code': 'public void activate(){\n  node.activate();\n}\n', 'nl': 'hook for JSVC'}
{'code': 'public void add(int element){\n  ensureCapacity(size + 1);\n  array[size++]=element;\n}\n', 'nl': 'Appends the specified element to the end of this list.'}
{'code': 'public void saveSavingsToAssetAccountMapping(final JsonElement element,final String paramName,final Long productId,final int placeHolderTypeId){\n  saveProductToAccountMapping(element,paramName,productId,placeHolderTypeId,GLAccountType.ASSET,PortfolioProductType.SAVING);\n}\n', 'nl': 'Set of abstractions for saving Saving Products to GL Account Mappings'}
{'code': 'public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final boolean purgeValues){\n  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);\n}\n', 'nl': 'Constructs a new <code>ReferenceMap</code> that will use the specified types of references.'}
{'code': 'public void push(ElementType type){\n  stack.add(type);\n}\n', 'nl': 'Adds an element type to the stack.'}
{'code': 'public void addBugCodeToFilter(BugCode code){\n  elementChecked(code,true);\n}\n', 'nl': 'Accessor method for tests to simulate the user selecting a bug code.'}
{'code': 'public void update(byte[] buffer){\n  update(buffer,0,buffer.length);\n}\n', 'nl': 'Updates the current checksum with the specified array of bytes. Equivalent to calling <code>update(buffer, 0, buffer.length)</code>.'}
{'code': 'public void vertex(float[] v){\n  g.vertex(v);\n}\n', 'nl': 'Used by renderer subclasses or PShape to efficiently pass in already formatted vertex information.'}
{'code': 'public void assertArrayEqual(byte[] expected,byte[] actual){\n  TestUtils.assertArrayEqual(expected,actual);\n}\n', 'nl': 'This method just invokes the test utils method, it is here for convenience'}
{'code': 'public void addCoalescingKey(long downTime){\n  mDownTimeToCoalescingKey.put((int)downTime,0);\n}\n', 'nl': 'Starts tracking a new coalescing key corresponding to the gesture with this down time.'}
{'code': 'public static void resetSecuritySystemProperties(){\n  System.clearProperty("javax.net.ssl.keyStore");\n  System.clearProperty("javax.net.ssl.keyStorePassword");\n  System.clearProperty("javax.net.ssl.trustStore");\n  System.clearProperty("javax.net.ssl.trustStorePassword");\n  System.clearProperty("javax.rmi.ssl.client.enabledCipherSuites");\n  System.clearProperty(SecurityConf.SYSTEM_PROP_CLIENT_SSLPROTOCOLS);\n  System.clearProperty(SecurityConf.SYSTEM_PROP_CLIENT_SSLCIPHERS);\n  System.clearProperty("https.protocols");\n}\n', 'nl': 'Reset system properties to null value'}
{'code': 'private CProjectTreeNodeHelpers(){\n}\n', 'nl': 'You are not supposed to instantiate this class.'}
{'code': '@Override public void onGeolocationPermissionsShowPrompt(String origin,Callback callback){\n  super.onGeolocationPermissionsShowPrompt(origin,callback);\n  callback.invoke(origin,true,false);\n}\n', 'nl': 'Instructs the client to show a prompt to ask the user to set the Geolocation permission state for the specified origin.'}
{'code': 'public NbtTagByteArray(String name,byte[] value){\n  super(name);\n  Validate.notNull(value,"array can\'t be null.");\n  this.value=value;\n}\n', 'nl': 'Construct new NbtTagByteArray with given name and value.'}
{'code': 'public void addRisikoMassnahmenUmsetzungen(List<RisikoMassnahme> allRisikoMassnahmen){\n  for (  RisikoMassnahme massnahme : allRisikoMassnahmen) {\n    addRisikoMassnahmeUmsetzung(massnahme);\n  }\n}\n', 'nl': 'Adds the own Massnahmen to the List of all Massnahmen from BSI IT-Grundschutz-Kataloge.'}
{'code': 'public static void start(Activity activity){\n  new FirstRunSignInProcessor(activity,false,null);\n}\n', 'nl': 'Initiates the automatic sign-in process in background.'}
{'code': 'public DoubleRangeField(String name,final double[] min,final double[] max){\n  super(name,getType(min.length));\n  setRangeValues(min,max);\n}\n', 'nl': 'Create a new DoubleRangeField type, from min/max parallel arrays'}
{'code': '@DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.933 -0500",hash_original_method="5FC4A2324FC6DD99D16BF2BD98355D7B",hash_generated_method="F6F0B09859D5F33E88782A14F5B94A7F") public void sendDtmf(int code){\n  sendDtmf(code,null);\n}\n', 'nl': 'Sends a DTMF code. According to <a href="http://tools.ietf.org/html/rfc2833">RFC 2883</a>, event 0--9 maps to decimal value 0--9, \'*\' to 10, \'#\' to 11, event \'A\'--\'D\' to 12--15, and event flash to 16. Currently, event flash is not supported.'}
{'code': 'public void add(String keyword,byte id){\n  int key=getStringMapKey(keyword);\n  map[key]=new Keyword(keyword.toCharArray(),id,map[key]);\n}\n', 'nl': 'Adds a key-value mapping.'}
{'code': 'public void draw(Shape s){\n  System.out.println("draw(Shape)");\n}\n', 'nl': 'Strokes the outline of a <code>Shape</code> using the settings of the current <code>Graphics2D</code> context.  The rendering attributes applied include the <code>Clip</code>, <code>Transform</code>, <code>Paint</code>, <code>Composite</code> and <code>Stroke</code> attributes.'}
{'code': 'public void remove(){\n  src.remove();\n}\n', 'nl': 'Removes the last visited block for the file version.'}
{'code': 'public void incExceptionsOccured(){\n  this.stats.incInt(exceptionsOccuredId,1);\n}\n', 'nl': 'Increments the number of exceptions occured by 1.'}
{'code': 'public void displayLineCount(final int linecount){\n  setCharPosition(null);\n  setLineNumber(linecount + 1);\n}\n', 'nl': 'Update the line and char display to show the line count.'}
{'code': '@Override public void sendRedirect(String location){\n  this.request.setAttribute(ATTR_KEY,location);\n}\n', 'nl': 'This method captures the redirect request and stores it to the Request so it can be leveraged later.'}
{'code': 'public synchronized void throwing(String sourceClass,String sourceMethod,Throwable thrown){\n  LogRecord record=new LogRecord(Level.FINER,"THROWN");\n  record.setSourceClassName(sourceClass);\n  record.setSourceMethodName(sourceMethod);\n  record.setThrown(thrown);\n  log(record);\n}\n', 'nl': 'Log throwing an exception. The logging is done using the FINER level.'}
{'code': 'public void clear(){\n  this.size=0;\n}\n', 'nl': "Sets the receiver's size to zero. In other words, forgets about any internally buffered elements."}
{'code': '@Override public void close() throws java.io.IOException {\n  flushBase64();\n  super.close();\n  buffer=null;\n  out=null;\n}\n', 'nl': 'Flushes and closes (I think, in the superclass) the stream.'}
{'code': 'public void focusGlobalField(){\n}\n', 'nl': 'Focused the editing field of the global comment. TODO(thomasdullien): Focusing still needs to be sorted & made visible somehow.'}
{'code': 'private void clean(){\n}\n', 'nl': 'Remove nodes with no connections from the graph. While this does not guarantee that any two nodes in the remaining graph are connected, we can reasonably assume this since typically roads are connected.'}
{'code': 'public void addToFirst(E ent,double dist,int pos){\n  firstAssignments.add(new DistanceEntry<>(ent,dist,pos));\n}\n', 'nl': 'Add an entry to the first set.'}
{'code': 'private void shutdown(){\nsynchronized (mJobs) {\n    mProcessJobs=false;\n    mJobs.notifyAll();\n  }\n}\n', 'nl': 'Stops the thread pool'}
{'code': 'private LogUtil(){\n}\n', 'nl': 'Utility class'}
{'code': 'public static void stop(Context context){\n  Intent intent=new Intent(context,EspPushService.class);\n  context.stopService(intent);\n}\n', 'nl': 'Stop EspPushService'}
{'code': 'public void testDoConfigureSetsDefaultPort() throws Exception {\n  configuration.configure(container);\n  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");\n  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(ServletPropertySet.PORT),"//weblogic:listen-port",config);\n}\n', 'nl': 'Test default port.'}
{'code': 'private void encounter(Person p1,Person p2){\n  p1.encounter(p2);\n  p2.encounter(p1);\n}\n', 'nl': 'When p1 and p2 encounter one another, we call p1.encounter(p2) and vice versa.'}
{'code': 'public static void postCollection(){\n  traceBusy=true;\n  findDeaths();\n  traceBusy=false;\n  trace.process();\n}\n', 'nl': 'Do the work necessary following each garbage collection. This HAS to be called after EACH collection.'}
{'code': 'public synchronized void merge(Network network){\n  super.merge(network);\n  this.size=-1;\n}\n', 'nl': 'Merge the vertices and relations of the network into this network.'}
{'code': 'public final void update(){\n  update((String)this.getSelectedItem());\n}\n', 'nl': 'Update the combo box and reselect the current selection.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList acronymList;\n  Node testNode;\n  NamedNodeMap attributes;\n  Attr titleAttr;\n  String value;\n  Text textNode;\n  Node retval;\n  Node firstChild;\n  Node secondChild;\n  doc=(Document)load("hc_staff",true);\n  acronymList=doc.getElementsByTagName("acronym");\n  testNode=acronymList.item(3);\n  attributes=testNode.getAttributes();\n  titleAttr=(Attr)attributes.getNamedItem("title");\n  textNode=doc.createTextNode("terday");\n  retval=titleAttr.appendChild(textNode);\n  textNode=doc.createTextNode("");\n  retval=titleAttr.appendChild(textNode);\n  ((Element)testNode).normalize();\n  value=titleAttr.getNodeValue();\n  assertEquals("attrNodeValue","Yesterday",value);\n  firstChild=titleAttr.getFirstChild();\n  value=firstChild.getNodeValue();\n  assertEquals("firstChildValue","Yesterday",value);\n  secondChild=firstChild.getNextSibling();\n  assertNull("secondChildIsNull",secondChild);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void processEvent(World world){\n}\n', 'nl': 'Processes the external event.'}
{'code': 'public void handleSetTemperatureClick(int idx){\n  listener.onSetTemperatureClick(idx);\n}\n', 'nl': 'Handles the temperature click'}
{'code': 'private void configureParent(){\n  EasyMock.expect(myView.getSelectedParent()).andReturn(getClassByName("Parent")).anyTimes();\n}\n', 'nl': 'Makes view to return class "Parent" as selected parent'}
{'code': 'public void play() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {\n  play(null);\n}\n', 'nl': 'Resumes the playback from where it was left (can be the beginning).'}
{'code': 'public void addCheckObject(RuleDescription object){\n  this.ruleDescriptions.add(object);\n}\n', 'nl': 'Add another rule description'}
{'code': 'public ReciprocalFloatFunction(ValueSource source,float m,float a,float b){\n  this.source=source;\n  this.m=m;\n  this.a=a;\n  this.b=b;\n}\n', 'nl': 'f(source) = a/(m*float(source)+b)'}
{'code': 'public UnixTerminal() throws IOException {\n  this(System.in,System.out,Charset.defaultCharset());\n}\n', 'nl': 'Creates a UnixTerminal with default settings, using System.in and System.out for input/output, using the default character set on the system as the encoding and trap ctrl+c signal instead of killing the application.'}
{'code': 'public void init() throws ServletException {\n}\n', 'nl': 'Initialization of the servlet. <br>'}
{'code': 'public void committed(CompositeTransaction tx){\n  removeTransaction(tx);\n}\n', 'nl': 'Called if a tx is ended successfully. In order to remove the tx from the mapping.'}
{'code': 'public void initialize(){\n  lightState=new LightState();\n  lightState.setGlobalAmbient(globalAmbientIntensity);\n  lightState.setEnabled(true);\n  headlight=new DirectionalLight();\n  headlight.setDiffuse(headlightIntensity);\n  headlight.setSpecular(new ColorRGBA(0.2f,0.2f,0.2f,1f));\n  headlight.setEnabled(headlightEnabled);\n  lightState.attach(headlight);\n  light=new DirectionalLightNode("Sol",azimuth,elevation,direction);\n  light.getLight().setAmbient(ambientIntensity);\n  light.getLight().setDiffuse(diffuseIntensity);\n}\n', 'nl': 'Set up OpenGL lighting'}
{'code': 'public void addEmail(NgnEmail.EmailType type,String value,String description){\n  mEmails.add(new NgnEmail(type,value,description));\n}\n', 'nl': 'Attach a new email to this contact'}
{'code': 'public void pushMessage(Message message){\n  for (  IMessageListener listener : listeners) {\n    listener.pushMessage(message);\n  }\n}\n', 'nl': 'Push a message to all listeners'}
{'code': '@Override public void disconnect(String scaleDownNodeID,boolean criticalError){\n  disconnect(criticalError);\n}\n', 'nl': 'Disconnect the connection, closing all channels'}
{'code': '@Override public void readFromNBT(NBTTagCompound tag){\n  super.readFromNBT(tag);\n  NBTTagCompound data=tag.getCompoundTag("IC2BasicSink");\n  energyStored=data.getDouble("energy");\n}\n', 'nl': "Forward for the base TileEntity's readFromNBT(), used for loading the state."}
{'code': 'public static void main(String[] args){\n  runFileLoader(new MatlabLoader(),args);\n}\n', 'nl': 'Main method.'}
{'code': 'public void updateText(int x,int y,String stuff,String font,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {\n  writeGraphicGestureHeader(graphicUpdateMask);\n  LinkText.write(x,y,stuff,font,justify,properties,link.dos);\n}\n', 'nl': 'Write a text in the response.'}
{'code': 'public void explain(boolean explain){\n  this.explain=explain;\n}\n', 'nl': 'Indicate if detailed information about query is requested'}
{'code': 'public static void newrelease(final Player player){\n}\n', 'nl': 'player > level 2 logged in for new release.'}
{'code': 'public void removeCheckConstraint(){\n  checkConstraint=null;\n  checkConstraintSQL=null;\n}\n', 'nl': 'Remove the check constraint if there is one.'}
{'code': 'public void emptyLine(){\n  out.println();\n  out.println("\\t\\t// -----------------------------------------------");\n  out.println();\n}\n', 'nl': 'an empty line'}
{'code': 'public static void d(String tag,String msg,Throwable tr){\n  println(DEBUG,tag,msg,tr);\n}\n', 'nl': 'Prints a message at DEBUG priority.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  DocumentType docType;\n  NamedNodeMap notations;\n  Node notationNode;\n  String notationName;\n  doc=(Document)load("staff",false);\n  docType=doc.getDoctype();\n  assertNotNull("docTypeNotNull",docType);\n  notations=docType.getNotations();\n  assertNotNull("notationsNotNull",notations);\n  notationNode=notations.getNamedItem("notation1");\n  assertNotNull("notationNotNull",notationNode);\n  notationName=notationNode.getNodeName();\n  assertEquals("nodeName","notation1",notationName);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'private DeleteGlossaryCommand(){\n}\n', 'nl': 'This is a singleton.'}
{'code': 'public void startDetection(String containerId,String machineId,String workspaceId){\n  instances.put(containerId,Pair.of(machineId,workspaceId));\n}\n', 'nl': 'Start container stop detection.'}
{'code': 'public void dec(){\n  dec(1);\n}\n', 'nl': 'Convenience method to decrement atomic numeric types.'}
{'code': 'public void testSimple() throws IOException {\n  fetch("www.fortify.net",443,true,"/sslcheck.html",1,1,0,60);\n  fetch("mail.google.com",443,true,"/mail/",1,1,0,60);\n  fetch("www.paypal.com",443,true,"/",1,1,0,60);\n  fetch("www.yellownet.ch",443,true,"/",1,1,0,60);\n}\n', 'nl': 'Does a single request for each of the hosts. Consumes the response.'}
{'code': 'public void removeResultListener(ResultListener listener){\n  getHierarchy().removeResultListener(listener);\n}\n', 'nl': 'Remove a result listener.'}
{'code': 'public void testTermInDisguise() throws Exception {\n  Query expected=new TermQuery(new Term("field","st*ar\\\\*"));\n  assertEquals(expected,parse("sT*Ar\\\\\\\\\\\\*"));\n}\n', 'nl': 'not a prefix query! the prefix operator is escaped'}
{'code': 'private void remeasure(){\n  measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.EXACTLY));\n}\n', 'nl': 'Convenience for calling own measure method.'}
{'code': 'public static void quickSort(double[] a,int fromIndex,int toIndex,DoubleComparator c){\n  rangeCheck(a.length,fromIndex,toIndex);\n  quickSort1(a,fromIndex,toIndex - fromIndex,c);\n}\n', 'nl': 'Sorts the specified range of the specified array of elements according to the order induced by the specified comparator.  All elements in the range must be <i>mutually comparable</i> by the specified comparator (that is, <tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the range).<p> The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy\'s "Engineering a Sort Function", Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993).  This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance.'}
{'code': 'public void registerSpecialTileEntities(){\n  GameRegistry.registerTileEntity(TileEntityAdvancedSolarGenerator.class,"AdvancedSolarGenerator");\n  GameRegistry.registerTileEntity(TileEntitySolarGenerator.class,"SolarGenerator");\n  GameRegistry.registerTileEntity(TileEntityBioGenerator.class,"BioGenerator");\n  GameRegistry.registerTileEntity(TileEntityHeatGenerator.class,"HeatGenerator");\n  GameRegistry.registerTileEntity(TileEntityGasGenerator.class,"GasGenerator");\n  GameRegistry.registerTileEntity(TileEntityWindTurbine.class,"WindTurbine");\n  GameRegistry.registerTileEntity(TileEntityReactorController.class,"ReactorController");\n}\n', 'nl': 'Register tile entities that have special models. Overwritten in client to register TESRs.'}
{'code': 'public void startCDATA() throws SAXException {\n  m_handler.startCDATA();\n}\n', 'nl': 'Pass the call on to the underlying handler'}
{'code': 'public static void onEvent(final Context context,final String event_id,final String label){\n  onEvent(context,event_id,label,1);\n}\n', 'nl': 'log the event'}
{'code': 'public JoinStateData(StateHolder<S,E> state,Guard<S,E> guard){\n  Assert.notNull(state,"Holder must be set");\n  this.state=state;\n  this.guard=guard;\n}\n', 'nl': 'Instantiates a new join state data.'}
{'code': 'public void addFileTransferInvitationRejected(ContactId remoteContact,MmContent content,MmContent fileIcon,FileTransfer.ReasonCode reasonCode,long timestamp,long timestampSent){\n  mFileTransferService.addFileTransferInvitationRejected(remoteContact,content,fileIcon,reasonCode,timestamp,timestampSent);\n}\n', 'nl': 'Handle the case of rejected file transfer'}
{'code': 'public void testSubmitQuery() throws Throwable {\n  Connection connection=mock(Connection.class);\n  when(connection.send(any(QueryRequest.class))).thenReturn(CompletableFuture.completedFuture(QueryResponse.builder().withStatus(Response.Status.OK).withIndex(10).withResult("Hello world!").build()));\n  ClientSessionState state=new ClientSessionState(UUID.randomUUID()).setSessionId(1).setState(Session.State.OPEN);\n  Executor executor=new MockExecutor();\n  ThreadContext context=mock(ThreadContext.class);\n  when(context.executor()).thenReturn(executor);\n  ClientSessionSubmitter submitter=new ClientSessionSubmitter(connection,state,new ClientSequencer(state),context);\n  assertEquals(submitter.submit(new TestQuery()).get(),"Hello world!");\n  assertEquals(state.getResponseIndex(),10);\n}\n', 'nl': 'Tests submitting a query to the cluster.'}
{'code': 'public void header(int version,long length,int twipsWidth,int twipsHeight,int frameRate,int frameCount) throws IOException {\n  tagtypes.header(version,length,twipsWidth,twipsHeight,frameRate,frameCount);\n}\n', 'nl': 'Interface SWFTags'}
{'code': '@Override public void generateCode(BlockScope currentScope,boolean valueRequired){\n}\n', 'nl': 'MessageSendDotClass code generation'}
{'code': 'public void animateFromZero(Integer endValue){\n  animateText(0,endValue);\n}\n', 'nl': 'Animates from zero to given endValue'}
{'code': 'public void testNoEventWhenDragOutOfFirstTouchableParentToItsTouchableParent(){\n  View topLevelTouchable=getViewByTestId("C");\n  View innerButton=getViewByTestId("A");\n  SingleTouchGestureGenerator gestureGenerator=createGestureGenerator();\n  gestureGenerator.startGesture(innerButton);\n  waitForBridgeAndUIIdle();\n  gestureGenerator.dragTo(topLevelTouchable,15).endGesture();\n  waitForBridgeAndUIIdle();\n  assertTrue(mRecordingModule.getCalls().isEmpty());\n}\n', 'nl': 'In this scenario we start gesture at view A (has two touchable parents {B} and {D}) then we drag and release gesture on view {D}, but outside of {B}. We expect no touch handler to fire'}
{'code': 'public void scale(double value){\n  Transform3D other=new Transform3D();\n  other.setScale(value);\n  transform(other);\n}\n', 'nl': 'Modifies the global model transform by uniformly scaling it in all directions by the provided amount.   Has  <i>nothing to do</i> with the setScale(...) and getScale(...) methods.'}
{'code': '@DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.825 -0500",hash_original_method="3ADDFDCD3FB84301D1E5780B2C0B6096",hash_generated_method="AABE4865C1CC5E636F585E88017D1892") public URI(String scheme,String host,String path,String fragment) throws URISyntaxException {\n  this(scheme,null,host,-1,path,null,fragment);\n}\n', 'nl': 'Creates a new URI instance of the given unencoded component parts.'}
{'code': 'public void addRequestAsReplacement(ActionRequest request,LimitedQueueInfo queueInfo){\n  cancelPrevious(request.type());\n  addRequest(request,queueInfo);\n}\n', 'nl': 'Cancel the last request of this type made by this keeper and then add it to the queue.'}
{'code': 'public void testConstantScoreQuery() throws Exception {\n  Query term=new TermQuery(new Term("field","this"));\n  Query constantScore=new ConstantScoreQuery(new AssertNeedsScores(term,false));\n  assertEquals(5,searcher.search(constantScore,5).totalHits);\n}\n', 'nl': 'nested inside constant score query'}
{'code': 'public void receiveErrordeleteServiceSession(java.lang.Exception e){\n}\n', 'nl': 'auto generated Axis2 Error handler override this method for handling error response from deleteServiceSession operation'}
{'code': 'public void refreshRow() throws SQLException {\n  checkUpdatable();\n  rowUpdater.refreshRow();\n  fbFetcher.updateRow(rowUpdater.getOldRow());\n  notifyRowUpdater();\n}\n', 'nl': 'Refreshes the current row with its most recent value in the database.  This method cannot be called when the cursor is on the insert row. <P>The <code>refreshRow</code> method provides a way for an application to explicitly tell the JDBC driver to refetch a row(s) from the database.  An application may want to call <code>refreshRow</code> when caching or prefetching is being done by the JDBC driver to fetch the latest value of a row from the database.  The JDBC driver may actually refresh multiple rows at once if the fetch size is greater than one. <P> All values are refetched subject to the transaction isolation level and cursor sensitivity.  If <code>refreshRow</code> is called after calling an <code>updateXXX</code> method, but before calling the method <code>updateRow</code>, then the updates made to the row are lost.  Calling the method <code>refreshRow</code> frequently will likely slow performance.'}
{'code': 'private void showInternalServerErrorMessage(){\n  CommonDialogUtils.stopProgressDialog(progressDialog);\n  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);\n}\n', 'nl': 'Shows internal server error message for authentication.'}
{'code': 'public void forEach(IntConsumer action){\n  while (iterator.hasNext()) {\n    action.accept(iterator.nextInt());\n  }\n}\n', 'nl': 'Performs an action for each element of this stream. <p>This is a terminal operation.'}
{'code': 'public void selectMapElement(MapElement mapElement){\n  panel.selectMapElement(mapElement);\n}\n', 'nl': 'Select a map element to display'}
{'code': 'public XMLReaderAdapter() throws SAXException {\n  setup(XMLReaderFactory.createXMLReader());\n}\n', 'nl': 'Create a new adapter. <p>Use the "org.xml.sax.driver" property to locate the SAX2 driver to embed.</p>'}
{'code': 'public WarMultiContextTest(String testName,EnvironmentTestData testData) throws Exception {\n  super(testName,testData);\n}\n', 'nl': 'Initializes the test case.'}
{'code': 'public void edit(NewArray a) throws CannotCompileException {\n}\n', 'nl': 'Edits an expression for array creation (overridable). The default implementation performs nothing.'}
{'code': '@DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.285 -0500",hash_original_method="4FF06135DA529EA5945D38DB9DEC9B0E",hash_generated_method="B945D9D44581F68296FA3FBD6173A146") private void pushRun(int runBase,int runLen){\n  this.runBase[stackSize]=runBase;\n  this.runLen[stackSize]=runLen;\n  stackSize++;\n}\n', 'nl': 'Pushes the specified run onto the pending-run stack.'}
{'code': 'private void reset(){\n  isContent=false;\n  finished=false;\n}\n', 'nl': 'Reset internal state to repeat a query.'}
{'code': 'public void zeroDrAndCrAmounts(){\n  dramount=BigDecimal.ZERO;\n  cramount=BigDecimal.ZERO;\n}\n', 'nl': 'Sets both DR and CR amounts to zero.'}
{'code': 'public void assertNotEqual(int expected,int actual,String errorMessage){\n  TestUtils.assertNotEqual(expected,actual,errorMessage);\n}\n', 'nl': 'This method just invokes the test utils method, it is here for convenience'}
{'code': 'public void addClusterConnection(SimpleString name,TransportConfiguration[] tcConfigs,ClusterConnectionConfiguration config){\n  ServerLocatorImpl serverLocator=(ServerLocatorImpl)ActiveMQClient.createServerLocatorWithHA(tcConfigs);\n  configAndAdd(name,serverLocator,config);\n}\n', 'nl': 'add a locator for a cluster connection.'}
{'code': 'public void registerSerializer(Serializer serializer){\n  serializers.registerSerializer(serializer);\n}\n', 'nl': 'Register <code>serializer</code>. <p> The class for with the serializer is being registered is directly extracted from the class definition.'}
{'code': 'public GrammarException(String message,int line){\n  super(MessageFormat.format("{0} (line {1})",message,line));\n}\n', 'nl': 'Constructs an exception indicating an error while parsing or processing  grammars.'}
{'code': 'public void startCDATA(){\n  theNextState=S_CDATA;\n}\n', 'nl': 'A callback for the ScanHandler that allows it to force the lexer state to CDATA content (no markup is recognized except the end of element.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node childNode;\n  Node clonedNode;\n  Node lastChildNode;\n  String childValue;\n  doc=(Document)load("hc_staff",true);\n  elementList=doc.getElementsByTagName("sup");\n  childNode=elementList.item(1);\n  clonedNode=childNode.cloneNode(true);\n  lastChildNode=clonedNode.getLastChild();\n  childValue=lastChildNode.getNodeValue();\n  assertEquals("cloneContainsText","35,000",childValue);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public final void testGetPublic02() throws InvalidKeySpecException {\n  PublicKey pk=TestKeyPair.getPublic();\n  KeyPair kp=new KeyPair(pk,null);\n  assertSame(pk,kp.getPublic());\n}\n', 'nl': 'Test #2 for <code>getPublic()</code> method<br> Assertion: returns public key (valid public key in this case)'}
{'code': 'public void restat(String path){\n  mStat=doStat(path);\n}\n', 'nl': 'Perform a restat of the file system referenced by this object. This is the same as re-constructing the object with the same file system path, and the new stat values are available upon return.'}
{'code': 'public static void execStandalone(String invokeWith,String classPath,String className,String[] args){\n  StringBuilder command=new StringBuilder(invokeWith);\n  command.append(" /system/bin/dalvikvm -classpath \'").append(classPath);\n  command.append("\' ").append(className);\n  Zygote.appendQuotedShellArgs(command,args);\n  Zygote.execShell(command.toString());\n}\n', 'nl': 'Executes a standalone application with a wrapper command. This method never returns.'}
{'code': 'public void testOnServerHealthy_doesNothingIfUsersAvailable(){\n  when(mTroubleshooter.isServerHealthy()).thenReturn(false);\n  mController.init();\n  JsonUser user=new JsonUser("idA","nameA");\n  mFakeEventBus.post(new KnownUsersLoadedEvent(ImmutableSet.of(user)));\n  when(mTroubleshooter.isServerHealthy()).thenReturn(true);\n  mFakeEventBus.post(new TroubleshootingActionsChangedEvent(ImmutableSet.of(TroubleshootingAction.CHECK_PACKAGE_SERVER_CONFIGURATION),null));\n  verify(mMockUserManager,times(1)).loadKnownUsers();\n}\n', 'nl': 'Tests that users are not reloaded if the server becomes healthy and users are available.'}
{'code': 'public static void fill(short[] a,short val){\n  fill(a,0,a.length,val);\n}\n', 'nl': 'Assigns the specified short value to each element of the specified array of shorts.'}
{'code': 'public static void main(String[] args){\n  runFileSaver(new XRFFSaver(),args);\n}\n', 'nl': 'Main method.'}
{'code': 'public static void clearThreadLocals(){\n  createInProgress=new ThreadLocal<>();\n}\n', 'nl': 'clear thread locals that may have been set by previous uses of CacheCreation'}
{'code': 'private void executeNext(){\n  lastSearchResult=searchExecutor.next();\n  processSearchResult(lastSearchResult);\n}\n', 'nl': 'Executes next functionality.'}
{'code': 'private GWTJavaProblem(String filename,int offset,int length,int line,int column,GWTProblemType problemType,GdtProblemSeverity severity,String[] messageArguments,String[] problemArguments){\n  super(filename,offset,length,line,column,problemType,severity,messageArguments,problemArguments);\n}\n', 'nl': 'For unit tests.'}
{'code': 'public void write(ByteCodeWriter out) throws IOException {\n  out.writeUTF8Const(getName());\n  out.writeInt(_value.length);\n  out.write(_value,0,_value.length);\n}\n', 'nl': 'Writes the field to the output.'}
{'code': 'public void shutdown(){\n  mClassNameToClassMap.clear();\n  mPackageMonitor.unregister();\n}\n', 'nl': 'Clears the package cache and unregisteres the package monitor'}
{'code': 'public void testEquals(){\n  UsernameAttribute usernameAttribute2=new UsernameAttribute();\n  usernameAttribute2.setUsername(usernameValue.getBytes());\n  assertEquals("testequals failed",usernameAttribute,usernameAttribute2);\n  usernameAttribute2=new UsernameAttribute();\n  usernameAttribute2.setUsername("some other username".getBytes());\n  assertFalse("testequals failed",usernameAttribute.equals(usernameAttribute2));\n  assertFalse("testequals failed",usernameAttribute.equals(null));\n}\n', 'nl': 'Test Equals'}
{'code': 'private void createContent(){\nswitch (this.alignment) {\ncase SWT.CENTER:\n    createSeparator();\n  createTitle();\ncreateSeparator();\nbreak;\ncase SWT.LEFT:\ncreateTitle();\ncreateSeparator();\nbreak;\ndefault :\ncreateSeparator();\ncreateTitle();\nbreak;\n}\n}\n', 'nl': 'Create the content'}
{'code': 'public void testOffer(){\n  storedQueue.clear();\n  assertTrue(storedQueue.isEmpty());\n  assertTrue(storedQueue.offer(String.valueOf(0)));\n  assertTrue(storedQueue.offer(String.valueOf(1)));\n  assertEquals(2,storedQueue.size());\n}\n', 'nl': 'Offer succeeds'}
{'code': 'private void loadDrawerFragments(){\n  getSupportFragmentManager().beginTransaction().replace(R.id.nav_drawer_container,new NavigationDrawerFragment()).commit();\n  mQueueDrawerFragment=new QueueDrawerFragment();\n  getSupportFragmentManager().beginTransaction().replace(R.id.current_queue_drawer_container,mQueueDrawerFragment).commit();\n}\n', 'nl': 'Loads the drawer fragments.'}
{'code': 'public void lineTo(float x,float y){\n  mPoints.add(PathPoint.lineTo(x,y));\n}\n', 'nl': 'Create a straight line from the current path point to the new one specified by x and y.'}
{'code': 'public void archiveList(){\n}\n', 'nl': 'Archive current list when user selects "Archive" menu item'}
{'code': '@Override public void report(){\n}\n', 'nl': 'Let each extractor output some stuff to STDERR.'}
{'code': 'private void inorder(){\n  inorder(root);\n}\n', 'nl': 'Inorder traversal from the root'}
{'code': 'public void startCDATA() throws SAXException {\n  m_handler.startCDATA();\n}\n', 'nl': 'Pass the call on to the underlying handler'}
{'code': 'public static void sort(short[] a,int fromIndex,int toIndex){\n  rangeCheck(a.length,fromIndex,toIndex);\n  sort1(a,fromIndex,toIndex - fromIndex);\n}\n', 'nl': 'Sorts the specified range of the specified array of shorts into ascending numerical order.  The range to be sorted extends from index <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive. (If <tt>fromIndex==toIndex</tt>, the range to be sorted is empty.)<p> The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy\'s "Engineering a Sort Function", Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993).  This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance.'}
{'code': 'public void pushDat11(long[] l){\n  tmp.push(l);\n}\n', 'nl': 'Pushes a dat_11 onto the stack'}
{'code': 'public void saveVoice(VoiceConfig config){\n  config.addCredentials(this);\n  POST(this.url + "/save-voice",config.toXML());\n}\n', 'nl': "Save the bot's voice configuration."}
{'code': 'public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n', 'nl': 'Adds wheel scrolling listener'}
{'code': '@Override public void runWatchers(){\n  device.runWatchers();\n}\n', 'nl': 'Force to run all watchers.'}
{'code': '@Override public void dispose(){\n  super.dispose();\n  _finishedWorkers=null;\n  _failedWorkers=null;\n  _runningWorkers=null;\n}\n', 'nl': 'dispose the object'}
{'code': 'public void mark(){\n  mark(1);\n}\n', 'nl': 'Mark the occurrence of an event.'}
{'code': '@Override public void startPrefixMapping(String str,String str1) throws SAXException {\n}\n', 'nl': 'This method does nothing.'}
{'code': 'public static void showTabErrors(Project project,String title,List<VcsException> errors){\n  AbstractVcsHelper.getInstance(project).showErrors(errors,title);\n}\n', 'nl': 'Show errors on the tab'}
{'code': 'public void addExtendedProperty(ExtendedProperty extendedProperty){\n  getExtendedProperties().add(extendedProperty);\n}\n', 'nl': 'Adds a new contact extended property.'}
{'code': 'public void syncBeforeInvoke(){\n  copyTagToPageScope(VariableInfo.NESTED);\n  copyTagToPageScope(VariableInfo.AT_BEGIN);\n}\n', 'nl': 'Synchronize variables before fragment invokation'}
{'code': '@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){\n  m_dataListeners.remove(dsl);\n}\n', 'nl': 'Remove a data source listener'}
{'code': 'public void removeRow(int row){\n  dataVector.removeElementAt(row);\n  fireTableRowsDeleted(row,row);\n}\n', 'nl': 'Removes the row at <code>row</code> from the model.  Notification of the row being removed will be sent to all the listeners.'}
{'code': '@Override public void onDestroy(){\n  this.pluginDestroyed=true;\n}\n', 'nl': 'The final call you receive before your activity is destroyed.'}
{'code': 'public void testAddLocationSimple(){\n  long startTime=1000;\n  tripStatisticsUpdater=new TripStatisticsUpdater(startTime);\n  TripStatistics tripStatistics=tripStatisticsUpdater.getTripStatistics();\n  assertEquals(0.0,tripStatisticsUpdater.getSmoothedElevation());\n  assertEquals(Double.POSITIVE_INFINITY,tripStatistics.getMinElevation());\n  assertEquals(Double.NEGATIVE_INFINITY,tripStatistics.getMaxElevation());\n  assertEquals(0.0,tripStatistics.getMaxSpeed());\n  assertEquals(Double.POSITIVE_INFINITY,tripStatistics.getMinGrade());\n  assertEquals(Double.NEGATIVE_INFINITY,tripStatistics.getMaxGrade());\n  assertEquals(0.0,tripStatistics.getTotalElevationGain());\n  assertEquals(0,tripStatistics.getMovingTime());\n  assertEquals(0.0,tripStatistics.getTotalDistance());\n  addMoveLocations(100,startTime,tripStatistics,0,0);\n  addWaitLocations(100,startTime,tripStatistics,100,99);\n  addMoveLocations(100,startTime,tripStatistics,200,100);\n  addWaitLocations(100,startTime,tripStatistics,300,199);\n  addMoveLocations(100,startTime,tripStatistics,400,200);\n  addWaitLocations(100,startTime,tripStatistics,500,299);\n  addMoveLocations(100,startTime,tripStatistics,600,300);\n}\n', 'nl': 'Sends some moving and waiting locations and then checks the statistics.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node nameNode;\n  CharacterData child;\n  String childData;\n  doc=(Document)load("hc_staff",true);\n  elementList=doc.getElementsByTagName("acronym");\n  nameNode=elementList.item(0);\n  child=(CharacterData)nameNode.getFirstChild();\n  child.replaceData(0,50,"2600");\n  childData=child.getData();\n  assertEquals("characterdataReplaceDataExceedsLengthOfDataAssert","2600",childData);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public static void unPad(byte[] src,int start,byte[] dest){\n  System.arraycopy(src,start,dest,0,CG2_PAD_POSITION);\n  System.arraycopy(src,start + CG2_PAD_POSITION + 1,dest,CG2_PAD_POSITION,CG2_RAW_READ_LENGTH - CG2_PAD_POSITION);\n}\n', 'nl': 'Strip single padding base that Complete Genomics v2 reads contain, if present.'}
{'code': 'private void periodicallyPublishLastNInfo(TStream<JsonObject> stream,int count,int nSec,String event){\n  List<JsonObject> lastN=Collections.synchronizedList(new ArrayList<>());\n  stream.last(count,JsonTuples.keyFn()).aggregate(null).tag(event + ".lastN").sink(null);\n  TStream<JsonObject> periodicLastN=t.poll(null,nSec,TimeUnit.SECONDS).tag(event + ".trigger").filter(null).tag(event + ".changed").map(null).tag(event);\n  traceStream(periodicLastN,event);\n  app.mqttDevice().events(PlumbingStreams.pressureReliever(periodicLastN,null,30).tag(event + ".pressureRelieved"),app.sensorEventId(sensorId,event),QoS.FIRE_AND_FORGET);\n}\n', 'nl': 'Periodically publish the lastN on a stream.'}
{'code': 'public void blend(PImage src,int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh,int mode){\n  g.blend(src,sx,sy,sw,sh,dx,dy,dw,dh,mode);\n}\n', 'nl': 'Copies area of one image into another PImage object.'}
{'code': 'private StorageSample(){\n}\n', 'nl': 'This class is never instantiated.'}
{'code': 'public void initialise(int dimensions,int base,double epsilon){\n  this.epsilon=epsilon;\n  usingSingleKernelWidthValue=true;\n  mvke.initialise(dimensions,epsilon);\n  initialiseCommon(base);\n}\n', 'nl': 'Initialise using the supplied kernel width for all continuous variables'}
{'code': 'public void addFooterStatement(String footerStatement){\n  footerStatements.add(footerStatement);\n}\n', 'nl': 'Adds a footer statement.'}
{'code': 'public void resultChanged(Result res){\n  fireResultChanged(res);\n}\n', 'nl': 'Signal that a result has changed (public API)'}
{'code': 'public void testUrlValidWithSimplePath(){\n  setParameterToInitMockMethod("http://myurl.com/myPage",TestSolution.PASSED);\n  SeoRule01081 test=new SeoRule01081();\n  test.setProcessResultDataService(mockProcessResultDataService);\n  test.setTest(mockTest);\n  ProcessResult processResult=test.processImpl(mockSspHandler);\n  assertEquals(mockDefiniteResult,processResult);\n}\n', 'nl': 'Test to validate an url with a specified page after the slash character.'}
{'code': 'private void rotateTurntable(double distance){\n  rotate.fromAngleNormalAxis(azimuth,Vector3.NEG_UNIT_Z);\n  workRot.fromAngleNormalAxis(elevation,Vector3.UNIT_X);\n  rotate.multiplyLocal(workRot);\n  location.set(Vector3.UNIT_Z);\n  rotate.applyPost(location,location);\n  location.normalizeLocal();\n  location.multiplyLocal(distance);\n  location.addLocal(camera.getLookAt());\n  camera.setFrame(location,rotate);\n  updateFromCamera();\n  updateGeometricState(0);\n  changed.set(true);\n  Dert.getMainWindow().updateCompass(azimuth);\n}\n', 'nl': 'Rotate around the center of rotation point (look at point) while facing the CoR.'}
{'code': '@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.main);\n}\n', 'nl': 'Called when the activity is first created.'}
{'code': 'public static void e(String tag,String msg,Throwable thr){\n  log(LEVEL.ERROR,tag,msg,thr);\n}\n', 'nl': 'Send a ERROR log message and log the exception.'}
{'code': 'public void notationDecl(String name,String publicId,String systemId) throws SAXException {\n}\n', 'nl': 'Receive notification of a notation declaration event. <p> It is up to the application to record the notation for later reference, if necessary. </p> <p> At least one of publicId and systemId must be non-null. If a system identifier is present, and it is a URL, the SAX parser must resolve it fully before passing it to the application through this event. </p> <p> There is no guarantee that the notation declaration will be reported before any unparsed entities that use it. </p>'}
{'code': 'public void createPush(RTLExpression value,StatementSequence seq){\n  createSPIncrement(-(value.getBitWidth() / 8),seq);\n  seq.addLast(new RTLMemoryAssignment(ExpressionFactory.createMemoryLocation(sp,arch.getAddressBitWidth()),value));\n}\n', 'nl': 'Add a the statements equivalent to a push instruction to the end of a sequence.'}
{'code': 'public void deleteImageSharings() throws RemoteException {\n  mRichcallService.tryToDeleteImageSharings();\n}\n', 'nl': 'Deletes all image sharing from history and abort/reject any associated ongoing session if such exists.'}
{'code': '@ModelAttribute public void addDataToModel(ModelMap model){\n  SearchData dataForSearchBar=new SearchData();\n  dataForSearchBar.setSearchMode("natural");\n  dataForSearchBar.setCurrentPage(1);\n  dataForSearchBar.setQueryText(null);\n  dataForSearchBar.setNumberResultsPerPage(10);\n  model.put("advancedSearchData",dataForSearchBar);\n}\n', 'nl': 'Add an empty searchData object to the model'}
{'code': 'private void onPrintJobSent(PrintJob printJob){\n  printJob.start();\n}\n', 'nl': 'Called on the main thread, when the job was sent to the printer'}
{'code': 'public void testGetInternalSubset() throws Throwable {\n  Document doc;\n  DocumentType docType;\n  DOMImplementation domImpl;\n  String internal;\n  String nullNS=null;\n  doc=(Document)load("staffNS",builder);\n  domImpl=doc.getImplementation();\n  docType=domImpl.createDocumentType("l2:root",nullNS,nullNS);\n  internal=docType.getInternalSubset();\n  assertNull("internalSubsetNull",internal);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void customizerClosing(){\n  m_dataVis.setOffscreenXAxis(m_xAxisBack);\n  m_dataVis.setOffscreenWidth(m_widthBack);\n  m_dataVis.setOffscreenHeight(m_heightBack);\n  m_dataVis.setOffscreenAdditionalOpts(m_optsBack);\n  m_dataVis.setOffscreenRendererName(m_rendererNameBack);\n}\n', 'nl': 'Gets called if the use closes the dialog via the close widget on the window - is treated as cancel, so restores the ImageSaver to its previous state.'}
{'code': 'public void sub(IntegerPolynomial b,int modulus){\n  sub(b);\n  mod(modulus);\n}\n', 'nl': 'Subtracts another polynomial which can have a different number of coefficients, and takes the coefficient values mod <code>modulus</code>.'}
{'code': 'public AcquireTokenByGssInitiateRequestBuilder(TokenSpec tokenSpec,byte[] initialLeg,boolean hokConfirmation,JAXBContext jaxbContext,int requestValidityInSeconds){\n  super(tokenSpec,hokConfirmation,jaxbContext,requestValidityInSeconds);\n  assert initialLeg != null;\n  this.leg=initialLeg;\n  this.contextId=Util.randomNCNameUUID();\n}\n', 'nl': 'Create the request builder.'}
{'code': 'public static void check(final boolean b){\n  check(b,"");\n}\n', 'nl': 'Checks if b holds. Call this method to check assertions like pre- and post-conditions.'}
{'code': 'public void checkStateErrors(MediaRecorderStateErrors stateErrors){\n  assertTrue(!stateErrors.errorInInitializedState);\n  assertTrue(stateErrors.errorInInitialState);\n  assertTrue(stateErrors.errorInInitialStateAfterReset);\n  assertTrue(stateErrors.errorInInitialStateAfterStop);\n  assertTrue(stateErrors.errorInPreparedState);\n  assertTrue(stateErrors.errorInRecordingState);\n  assertTrue(stateErrors.errorInErrorState);\n  assertTrue(stateErrors.errorInDataSourceConfiguredState);\n}\n', 'nl': '1. It is valid to call setOutputFormat() in the following states: {Initialized}. 2. It is invalid to call setOutputFormat() in the following states: {Initial, Prepared, DataSourceConfigured, Recording, Error}'}
{'code': 'public void save(String filename){\n  g.save(savePath(filename));\n}\n', 'nl': 'Intercepts any relative paths to make them absolute (relative to the sketch folder) before passing to save() in PImage. (Changed in 0100)'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE__ATTRIBUTE:\n    setAttribute((ModelAttribute)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void printShortString(PrintWriter pw){\n  pw.print(\'[\');\n  pw.print(left);\n  pw.print(\',\');\n  pw.print(top);\n  pw.print("][");\n  pw.print(right);\n  pw.print(\',\');\n  pw.print(bottom);\n  pw.print(\']\');\n}\n', 'nl': 'Print short representation to given writer.'}
{'code': 'public void pushCurrentTemplateRuleIsNull(boolean b){\n  m_currentTemplateRuleIsNull.push(b);\n}\n', 'nl': 'Push true if the current template rule is null, false otherwise.'}
{'code': 'public FolderControl(final Composite parent,final int style,final boolean includeFiles){\n  this(parent,style,includeFiles,true);\n}\n', 'nl': 'Create a new FolderControl.'}
{'code': 'public void create(View view){\n  InstanceConfig instance=new InstanceConfig();\n  saveProperties(instance);\n  EditText text=(EditText)findViewById(R.id.templateText);\n  instance.template=text.getText().toString().trim();\n  CheckBox checkbox=(CheckBox)findViewById(R.id.forkingCheckBox);\n  instance.allowForking=checkbox.isChecked();\n  HttpAction action=new HttpCreateAction(this,instance);\n  action.execute();\n}\n', 'nl': 'Create the instance.'}
{'code': 'public void include(String name,String encoding,boolean parse) throws IOException, TemplateException {\n  include(getTemplateForInclusion(name,encoding,parse));\n}\n', 'nl': "Emulates <code>include</code> directive, except that <code>name</code> must be tempate root relative. <p> It's the same as <code>include(getTemplateForInclusion(name, encoding, parse))</code>. But, you may want to separately call these two methods, so you can determine the source of exceptions more precisely, and thus achieve more intelligent error handling."}
{'code': 'public void notifyInvalidated(){\nsynchronized (mObservers) {\n    for (    DataSetObserverExtended observer : mObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n', 'nl': 'Invokes onInvalidated on each observer. Called when the data set being monitored has changed such that it is no longer valid.'}
{'code': '@Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){\n  buildForger(zone);\n}\n', 'nl': 'Configure a zone.'}
{'code': 'public static void exitWithFailure(){\n  exitWithFailure(1);\n}\n', 'nl': 'Exit, giving a visible failure message'}
{'code': 'private void rebuildNode(){\n  m_realizer.regenerate();\n  m_graph.updateViews();\n}\n', 'nl': 'Regenerates the content of the node and updates the graph view.'}
{'code': 'public static void main(String[] args){\n  String deviceCfg=args[0];\n  DirectProvider tp=new DirectProvider();\n  DirectTopology topology=tp.newTopology("IotpSensors");\n  IotDevice device=new IotpDevice(topology,new File(deviceCfg));\n  simulatedSensors(device,true);\n  heartBeat(device,true);\n  displayMessages(device,true);\n  tp.submit(topology);\n}\n', 'nl': 'Run the IotpSensors application. Takes a single argument that is the path to the device configuration file containing the connection authentication information.'}
{'code': 'public void mouseReleased(MouseEvent e){\n}\n', 'nl': 'If the mouse is dragging a rectangle, pick the Vertices contained in that rectangle clean up settings from mousePressed'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:\n    setDefinedType((Type)null);\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void populateAnnotatedStrings(){\n  for (  Example example : this.examples) {\n    example.populateAnnotatedStrings();\n  }\n}\n', 'nl': 'Populate examples with the temporary list of matched and unmatched strings (using current match and unmatch bounds)'}
{'code': 'public void putStopTime(Integer stopSequencePosition,StopTime stopTime){\n  stopTimes.put(stopSequencePosition,stopTime);\n}\n', 'nl': 'Puts a new stopTime'}
{'code': 'public ExtendedKeyUsageExtension(Vector<ObjectIdentifier> keyUsages) throws IOException {\n  this(Boolean.FALSE,keyUsages);\n}\n', 'nl': 'Create a ExtendedKeyUsageExtension object from a Vector of Key Usages; the criticality is set to false.'}
{'code': 'private void onMouseDown(){\n  panel.setStyleName(toolbarResources.toolbar().popupButtonPanelDown());\n}\n', 'nl': 'Mouse Down handler.'}
{'code': 'public URI(final String s,final boolean escaped) throws URIException, NullPointerException {\n  parseUriReference(s,escaped);\n}\n', 'nl': 'Construct a URI from a string with the given charset. The input string can be either in escaped or unescaped form.'}
{'code': '@Override public void close(){\n  close(null);\n}\n', 'nl': 'Close all indexers.'}
{'code': 'public void update(byte[] in,int off,int len){\n  while (len > 0 && messageLength < mBuf.length) {\n    this.update(in[off]);\n    off++;\n    len--;\n  }\n  digest.update(in,off,len);\n  messageLength+=len;\n}\n', 'nl': 'update the internal digest with the byte array in'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase GamlPackage.IF__IF_FALSE:\n    setIfFalse((Expression)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'private VNXeException(final ServiceCode code,final Throwable cause,final String detailBase,final String detailKey,final Object[] detailParams){\n  super(false,code,cause,detailBase,detailKey,detailParams);\n}\n', 'nl': 'Holds the methods used to create VNXe related error conditions'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase ImPackage.SCRIPT_IM__SYMBOL_TABLE:\n    setSymbolTable((SymbolTable)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public GroupImpl(String mask) throws UnknownHostException {\n  super(mask);\n}\n', 'nl': 'Constructs a group using the specified subnet mask.'}
{'code': 'public void defaultRouteSet(boolean enabled){\n  mDefaultRouteSet.set(enabled);\n}\n', 'nl': 'Set a flag indicating default route is set for the network'}
{'code': 'public void sleepSeconds(final long seconds){\n  sleepMillis(seconds * 1000);\n}\n', 'nl': 'waits the specified number of seconds.'}
{'code': 'public static void touchLastDatabaseUpdateTime(){\n  lastDatabaseUpdateTime=System.currentTimeMillis();\n}\n', 'nl': 'Sets static lastDatabaseUpdateTime to System.currentTimeMillis().'}
{'code': 'public void read(DataInputStream s) throws IOException {\n  setECEF(s.readDouble(),s.readDouble(),s.readDouble());\n}\n', 'nl': 'Read object.'}
{'code': 'public void stopProcessing(){\n  if (sLogger.isActivated()) {\n    sLogger.debug("Stop media processor");\n  }\n  interrupted=true;\n  outputStream.close();\n  inputStream.close();\n}\n', 'nl': 'Stop processing'}
{'code': 'static public void put(PrintWriter log,Throwable exception){\n  put(log,(String)null,exception);\n}\n', 'nl': 'Logs an exception to the specified log destination.'}
{'code': 'public void clear(){\n  solrDoc=null;\n  indexedId=null;\n  updateTerm=null;\n  version=0;\n}\n', 'nl': 'Reset state to reuse this object with a different document in the same request'}
{'code': 'public void test_ticket_1105_quads_update2() throws Exception {\n  new UpdateTestHelper("ticket_1105_quads_update2","ticket_1105_update2.rq","ticket_1105.trig");\n}\n', 'nl': 'Query:  <code> INSERT  { <http://example/s>  <http://example/p> <http://example/o> } WHERE { GRAPH <http://example/c>  { <http://example/s1>  <http://example/p1> <http://example/o1> }  } </code> is parsed successfully in quads mode.'}
{'code': '@Override public void perspective(){\n  perspective(cameraFOV,cameraAspect,cameraNear,cameraFar);\n}\n', 'nl': "Calls perspective() with Processing's standard coordinate projection. <P> Projection functions: <UL> <LI>frustrum() <LI>ortho() <LI>perspective() </UL> Each of these three functions completely replaces the projection matrix with a new one. They can be called inside setup(), and their effects will be felt inside draw(). At the top of draw(), the projection matrix is not reset. Therefore the last projection function to be called always dominates. On resize, the default projection is always established, which has perspective. <P> This behavior is pretty much familiar from OpenGL, except where functions replace matrices, rather than multiplying against the previous. <P>"}
{'code': 'public void endVisit(SimpleName node){\n}\n', 'nl': 'End of visit the given type-specific AST node. <p> The default implementation does nothing. Subclasses may reimplement. </p>'}
{'code': 'private void unscheduleInvalidTapNotification(){\n  mRunnableHandler.removeCallbacks(mHandleInvalidTapRunnable);\n  mIsWaitingForInvalidTapDetection=true;\n}\n', 'nl': 'Un-schedules all pending notifications to check if a tap was invalid.'}
{'code': 'public void pause(){\n  thread.suspend();\n}\n', 'nl': 'pause getting sensors data'}
{'code': 'public void prepare(FIXMessage message,CharSequence msgType){\n  message.reset();\n  message.addField(MsgType).setString(msgType);\n  prepare(message);\n}\n', 'nl': '<p>Prepare a message.</p>'}
{'code': 'public void whisper(String user,String message){\n  checkSocket();\n  this.socket.sendTextMessage("whisper:" + user + ": "+ message);\n}\n', 'nl': 'Send a private message to a user. This call is asynchronous, any error or success with be sent as a separate message to the listener.'}
{'code': 'public void requestRedraw(){\n  this.firePropertyChange(AVKey.REPAINT,null,null);\n}\n', 'nl': 'Request any scene containing this KML document be repainted.'}
{'code': 'public void closeCajaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){\n  removeInTemporalSession(request,TransferenciasConstants.CAJA_MAINTAIN_VISITADOS_KEY);\n  removeInTemporalSession(request,TransferenciasConstants.CAJA_VISITADOS_KEY);\n  goBackExecuteLogic(mappings,form,request,response);\n}\n', 'nl': 'Cierra la caja.'}
{'code': 'public void add(String category,String[] titles,double[] values){\n  mCategories.add(category);\n  mTitles.add(titles);\n  mValues.add(values);\n}\n', 'nl': 'Adds a new value to the series.'}
{'code': 'public void endCompose(StylesheetRoot sroot) throws TransformerException {\n  StylesheetRoot.ComposeState cstate=sroot.getComposeState();\n  cstate.popStackMark();\n}\n', 'nl': "This after the template's children have been composed."}
{'code': 'public void scheduleUpdate(double simTime){\n  scheduledUpdates.addUpdate(simTime);\n}\n', 'nl': 'Schedules an update request to all nodes to happen at the specified simulation time.'}
{'code': 'private void resetBlockletProcessingCount(){\n  blockletProcessingCount.set(0);\n}\n', 'nl': 'This method will reset the block processing count'}
{'code': 'private void initializeTable(int capacity){\n  this.table=new Object[capacity * 2];\n  this.mask=table.length - 1;\n  this.clean=0;\n  this.maximumLoad=capacity * 2 / 3;\n}\n', 'nl': 'Creates a new, empty table with the given capacity.'}
{'code': '@OnMessage public void onMessage(final String message){\n}\n', 'nl': 'Called when a message received from the browser.'}
{'code': 'public void countTilesOfSegments(){\n  for (  String fileName : allFiles) {\n    TiledMap map;\n    TmxMapLoader mapLoader;\n    mapLoader=new TmxMapLoader();\n    map=mapLoader.load(fileName);\n    totalTiles+=map.getProperties().get("width",Integer.class);\n  }\n}\n', 'nl': 'TODO: rewrite this, it is slow!'}
{'code': '@Ignore("Disabling due to bug #52347") @Test public void testConcurrentEventsOnEmptyRegion(){\n  versionTestConcurrentEventsOnEmptyRegion();\n}\n', 'nl': 'This tests the concurrency versioning system to ensure that event conflation happens correctly and that the statistic is being updated properly'}
{'code': 'public void hideProgress(){\n  mProgress.setVisibility(View.GONE);\n}\n', 'nl': 'Hide the progressbar'}
{'code': 'public void resetGzipStream() throws IOException {\n  finish();\n  def.reset();\n}\n', 'nl': 'This method flushes all data and resets compress stream.'}
{'code': 'public void add(T item){\n  getList().add(item);\n  int size=getItemPositions();\n  notifyItemInserted(size);\n  notifyItemRangeChanged(size,1);\n}\n', 'nl': 'Adds an item at the end of the list'}
{'code': 'private void initView(Context context){\n  mContext=context;\n  footerView=new LinearLayout(context);\n  footerView.setOrientation(LinearLayout.HORIZONTAL);\n  footerView.setGravity(Gravity.CENTER);\n  footerView.setMinimumHeight(AbViewUtil.scale(mContext,100));\n  footerTextView=new TextView(context);\n  footerTextView.setGravity(Gravity.CENTER_VERTICAL);\n  setTextColor(Color.rgb(107,107,107));\n  AbViewUtil.setTextSize(footerTextView,30);\n  AbViewUtil.setPadding(footerView,0,10,0,10);\n  footerProgressBar=new ProgressBar(context,null,android.R.attr.progressBarStyle);\n  footerProgressBar.setVisibility(View.GONE);\n  LinearLayout.LayoutParams layoutParamsWW=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);\n  layoutParamsWW.gravity=Gravity.CENTER;\n  layoutParamsWW.width=AbViewUtil.scale(mContext,50);\n  layoutParamsWW.height=AbViewUtil.scale(mContext,50);\n  layoutParamsWW.rightMargin=AbViewUtil.scale(mContext,10);\n  footerView.addView(footerProgressBar,layoutParamsWW);\n  LinearLayout.LayoutParams layoutParamsWW1=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);\n  footerView.addView(footerTextView,layoutParamsWW1);\n  LinearLayout.LayoutParams layoutParamsFW=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);\n  addView(footerView,layoutParamsFW);\n  AbViewUtil.measureView(this);\n  footerHeight=this.getMeasuredHeight();\n}\n', 'nl': 'Inits the view.'}
{'code': 'public void cleanup(){\n  m_train=new Instances(m_train,0);\n  m_numericData=null;\n}\n', 'nl': 'Cleanup in order to save memory.'}
{'code': 'public void addMoney(Money money){\n  getMoney().add(money);\n}\n', 'nl': 'Adds a new monetary value of the transaction price.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase UmplePackage.ENTITY___CLASS_DEFINITION_1:\n    getClassDefinition_1().clear();\n  return;\ncase UmplePackage.ENTITY___INTERFACE_DEFINITION_1:\ngetInterfaceDefinition_1().clear();\nreturn;\ncase UmplePackage.ENTITY___EXTERNAL_DEFINITION_1:\ngetExternalDefinition_1().clear();\nreturn;\ncase UmplePackage.ENTITY___ASSOCIATION_DEFINITION_1:\ngetAssociationDefinition_1().clear();\nreturn;\ncase UmplePackage.ENTITY___ASSOCIATION_CLASS_DEFINITION_1:\ngetAssociationClassDefinition_1().clear();\nreturn;\ncase UmplePackage.ENTITY___STATE_MACHINE_DEFINITION_1:\ngetStateMachineDefinition_1().clear();\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': '@Override public void endWindow(){\n  mapkeyval.clear();\n}\n', 'nl': 'Clears the cache/hash'}
{'code': 'public void configureOption3(String value){\n  super.configureOption3(value);\n  log.debug("configureOption3: " + value);\n  setTurnoutHandling(value);\n}\n', 'nl': 'Set the third port option. Only to be used after construction, but before the openPort call'}
{'code': 'public void configure(){\n  Dcc4PcTrafficController control=new Dcc4PcTrafficController();\n  this.getSystemConnectionMemo().setDcc4PcTrafficController(control);\n  this.getSystemConnectionMemo().setDefaultProgrammer(getOptionState(option1Name));\n  control.connectPort(this);\n  this.getSystemConnectionMemo().configureManagers();\n  jmri.jmrix.dcc4pc.ActiveFlag.setActive();\n}\n', 'nl': 'set up all of the other objects to operate with an Dcc4Pc command station connected to this port'}
{'code': 'public void subscribeToBrokerServiceNoDiscount() throws Exception {\n  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");\n  setCutOffDay(supplierData.getAdminKey(),1);\n  setDateFactory("2013-01-02 20:00:00");\n  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker");\n  updateOperatorRevenueShare(5.0D,supplService.getKey());\n  updatePartnerRevenueShares(15.0D,20.0D,supplService);\n  VendorData brokerData=setupNewBroker("2013-01-03 08:10:00");\n  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");\n  updateMarketplaceRevenueShare(10.0D,brokerData.getMarketplaceId(0));\n  setDateFactory("2013-01-03 10:00:00");\n  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);\n  brokerService=publishActivateService(brokerData,brokerService);\n  subscribe(brokerCustomerData.getAdminUser(),"brokerSubscr1",brokerService,"2013-01-04 00:00:00","ADMIN");\n  resetCutOffDay(supplierData.getAdminKey());\n  cacheTestData("subscribeToBrokerServiceNoDiscount",new TestData(supplierData,brokerData));\n}\n', 'nl': 'Subscribe to broker service. Customer has no discount.'}
{'code': 'public void display() throws IOException, ObjectNotFoundException, OperationNotPermittedException, ValidationException, OrganizationAuthoritiesException {\n  VOPriceModel priceModel=model.getService().getPriceModel().getVo();\n  ExternalPriceModelDisplayHandler displayHandler=new ExternalPriceModelDisplayHandler();\n  displayHandler.setContent(priceModel.getPresentation());\n  displayHandler.setContentType(priceModel.getPresentationDataType());\n  displayHandler.display();\n}\n', 'nl': 'Method is used in UI to show external price model details.'}
{'code': 'public void test_ConstructorIII(){\n  Date d1=new Date(70,0,1);\n  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000);\n  assertTrue("Created incorrect date",d1.equals(d2));\n  Date date=new Date(99,5,22);\n  Calendar cal=new GregorianCalendar(1999,Calendar.JUNE,22);\n  assertTrue("Wrong time zone",date.equals(cal.getTime()));\n}\n', 'nl': 'java.util.Date#Date(int, int, int)'}
{'code': 'public void propertyChange(java.beans.PropertyChangeEvent evt){\n  setText(evt.getNewValue().toString());\n}\n', 'nl': 'Listening method, diplays results'}
{'code': '@Override public void writeExternalIndexDropStmt(Table table,IIndex index,StringBuilder ddl){\n  ddl.append("DROP INDEX ");\n  printIdentifier(getIndexName(index),ddl);\n  printEndOfStatement(ddl);\n}\n', 'nl': 'Index names in Oracle are unique to a schema and hence Oracle does not use the ON <tablename> clause'}
{'code': '@Override public void assign(String variable,String expression,Map<String,Object> transientState){\n  Object result=execute(expression,transientState);\n  state.put(variable,result);\n}\n', 'nl': 'Execute an expression and assign the result to a variable.  The variable is maintained in the context of this executor and is available to all subsequent expressions.'}
{'code': 'public void update(byte[] input,int inOff,int length){\n  digest.update(input,inOff,length);\n}\n', 'nl': 'update the internal digest with the byte array in'}
{'code': 'public static void main(String[] args){\n  ResourceManager rm=new POSConfigurator().getDefaultConfig();\n  String testingFile=rm.getString("testData");\n  TestDiscrete.testDiscrete(new TestDiscrete(),new POSTagger(),new POSLabel(),new POSBracketToToken(testingFile),true,0);\n}\n', 'nl': 'Implements the program described above.'}
{'code': 'public void addItem(T item){\n  contents.add(item);\n  notifyItemInserted(contents.size() - 1);\n}\n', 'nl': 'Adds an item into the contents'}
{'code': 'public void substituteForAll(Vector exprs,Vector strs) throws TLAExprException {\n  substituteForAll(exprs,strs,true);\n}\n', 'nl': 'Substitutes clones of the expressions in exprs for the corresponding strings of strs in the current expression. This is called with parenthesize = true only during the initial parsing  phase (the execution of ParseAlgorithm.getAlgorithm).  It is called with  parenthesize = false by: PcalFixIDs.FixExpr : replaces the string of an IDENT token with a new one to perform renaming in case of name conflicts. PcalTLAGen.AddSubscriptsToExpr: adds the primes and "[self]" subscripts to variables when needed. This method was modified by LL on 10 August 2012 to do the substitutions "simultaneously" rather than one after the other.  The original code  first did all the substitutions for the first string, then all the substitutions for the second string, etc.  This yielded a bug if the expression substituted for the first string contained the second string.  For example, the substitutions a <- F(b), b <- c in  a + b  produced  F(c) + c  instead of the correct  F(b) + c .'}
{'code': 'public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {\n  String formattedMsg=XSLMessages.createWarning(msg,args);\n  ErrorListener errHandler=xctxt.getErrorListener();\n  errHandler.warning(new TransformerException(formattedMsg,(SAXSourceLocator)xctxt.getSAXLocator()));\n}\n', 'nl': 'Warn the user of a problem.'}
{'code': 'public final void add(Action action,ActionManager actionManager){\n  add(action,Constraints.LAST,actionManager);\n}\n', 'nl': 'Adds the specified action to the tail.'}
{'code': 'public void testXformLoadSucceeded_ReenablesXformFetch(){\n  mController.init();\n  mFakeGlobalEventBus.post(new FetchXformSucceededEvent());\n  verify(mMockUi).reEnableFetch();\n}\n', 'nl': 'Tests that the xform can be fetched again if the first fetch succeeds.'}
{'code': 'public static void addSingleCrystallization(Item input,ItemStack output,float xp){\n  addCrystallization(input,output,null,xp);\n}\n', 'nl': 'Single-output Crystallization'}
{'code': 'public static void main(final String[] args){\n  Config config=ConfigUtils.createConfig();\n  config.addModule(PublicTransitMappingConfigGroup.createDefaultConfig());\n  Set<String> toRemove=config.getModules().keySet().stream().filter(null).collect(Collectors.toSet());\n  toRemove.forEach(null);\n  new ConfigWriter(config).write(args[0]);\n}\n', 'nl': 'Creates a default publicTransitMapping config file.'}
{'code': 'public void add(PaletteWidget w){\n  dragController.makeDraggable(w);\n  super.add(w);\n}\n', 'nl': 'Overloaded method that makes widgets draggable.'}
{'code': 'public void addSparseFeatureVector(IFeatureVector sfv,float alpha){\n  addSparseFeatureVector(sfv,(double)alpha);\n}\n', 'nl': 'w = w + alpha * sfv'}
{'code': 'public void put(E e){\n  offer(e);\n}\n', 'nl': 'Inserts the specified element into this priority queue. As the queue is unbounded, this method will never block.'}
{'code': 'public static void takeCamera(Activity activity,int requestCode){\n  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  activity.startActivityForResult(intent,requestCode);\n}\n', 'nl': 'Take camera, this photo data will be returned in onActivityResult()'}
{'code': 'public void addPriorityPackage(String priorityPackage){\n  _classLoader.addPriorityPackage(priorityPackage);\n}\n', 'nl': 'priority-package: used with servlet-hack Add a package for which this class loader will take precendence over the parent. Any class that has a qualified name that starts with the passed value will be loaded from this classloader instead of the parent classloader.'}
{'code': 'private void createSampler(){\n  this.sampler=glGenSamplers();\n  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);\n  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);\n}\n', 'nl': 'Create the sampler to sample the framebuffer texture within the shader.'}
{'code': 'public void deleteTransit(Transit z){\n  deregister(z);\n  z.dispose();\n}\n', 'nl': 'Remove an existing Transit'}
{'code': 'public void sortRenderQueue(){\n  sort(ritems,rscores,rsize);\n}\n', 'nl': 'Sort the rendering queue.'}
{'code': 'private PKCS1VectorGenerator(){\n}\n', 'nl': 'No instantiation needed, only one static method used'}
{'code': 'public void shouldCompleteWhenMaxDurationExceeded() throws Throwable {\n  when(service.connect()).thenReturn(false);\n  RetryPolicy retryPolicy=new RetryPolicy().retryWhen(false).withMaxDuration(100,TimeUnit.MILLISECONDS);\n  assertEquals(Failsafe.with(retryPolicy).onFailure(null).get(null),Boolean.FALSE);\n  verify(service).connect();\n}\n', 'nl': 'Asserts that an execution is failed when the max duration is exceeded.'}
{'code': 'final public void yybegin(int newState){\n  yy_lexical_state=newState;\n}\n', 'nl': 'Enters a new lexical state'}
{'code': 'public void hide(){\n  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();\n  lp.height=0;\n  mContentView.setLayoutParams(lp);\n}\n', 'nl': 'hide footer when disable pull load more'}
{'code': 'public void installDefaults(AbstractButton b){\n  super.installDefaults(b);\n  b.setOpaque(false);\n}\n', 'nl': 'Install Defaults'}
{'code': 'public void initializeMainMenu(){\n  MainMenu.initialize(viewport);\n}\n', 'nl': 'After Assets are loaded'}
{'code': 'public void writeMainKml(final KmlType kml){\n  writeKml("main.kml",kml);\n}\n', 'nl': 'Writes the specified KML-object as the main kml into the file. The main kml is the one Google Earth reads when the file is opened. It should contain NetworkLinks to the other KMLs stored in the same file.'}
{'code': 'public void insertRow() throws SQLException {\n  crsInternal.insertRow();\n}\n', 'nl': "Inserts the contents of this <code>JoinRowSetImpl</code> object's insert row into this rowset immediately following the current row. If the current row is the position after the last row or before the first row, the new row will be inserted at the end of the rowset.  This method also notifies listeners registered with this rowset that the row has changed. <P> The cursor must be on the insert row when this method is called."}
{'code': 'public void test_checkClientTrusted_03() throws Exception {\n  X509TrustManagerImpl xtm=new X509TrustManagerImpl();\n  X509Certificate[] xcert=setX509Certificate();\n  xtm.checkClientTrusted(xcert,"SSL");\n}\n', 'nl': 'javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[] chain, String authType)'}
{'code': 'public void unblock(){\n  lock.writeLock().unlock();\n}\n', 'nl': 'Makes possible for activities entering busy state again.'}
{'code': 'public static void main(String[] args){\n  jh61b.junit.textui.runClasses(TestVesselHelper.class);\n}\n', 'nl': 'Runs tests.'}
{'code': 'public AuditLogReader(Configuration conf,DbConnectionFactory dbConnectionFactory,String auditLogTableName,String outputObjectsTableName,String mapRedStatsTableName,long getIdsAfter) throws SQLException {\n  this.dbConnectionFactory=dbConnectionFactory;\n  this.auditLogTableName=auditLogTableName;\n  this.outputObjectsTableName=outputObjectsTableName;\n  this.mapRedStatsTableName=mapRedStatsTableName;\n  this.lastReadId=getIdsAfter;\n  auditLogEntries=new LinkedList<>();\n  this.retryingTaskRunner=new RetryingTaskRunner(conf.getInt(ConfigurationKeys.DB_QUERY_RETRIES,DbConstants.DEFAULT_NUM_RETRIES),DbConstants.DEFAULT_RETRY_EXPONENTIAL_BASE);\n}\n', 'nl': 'Constructs an AuditLogReader.'}
{'code': 'private void chainingFilters(List<Employee> employees){\n  Stream<Employee> empStream=employees.stream().filter(null).filter(null).filter(null);\n  empStream.forEach(null);\n}\n', 'nl': 'Method to demonstrate chaining of the filters.'}
{'code': '@Override public void pause(boolean toPause){\n  isPaused=toPause;\n}\n', 'nl': 'Pauses or unpauses the engine.'}
{'code': 'public void disableTableModificationMenus(){\n  showInsertRowPopupMenu=false;\n  showInsertColumnPopupMenu=false;\n  showDeleteRowPopupMenu=false;\n  showDeleteColumnPopupMenu=false;\n  showEditInPopupMenu=false;\n}\n', 'nl': 'Disable popup menus that allow table structure to changed.'}
{'code': 'public void draw(){\n  StdDraw.setPenColor(color);\n  StdDraw.filledCircle(rx,ry,radius);\n}\n', 'nl': 'Draws this particle to standard draw.'}
{'code': 'public void mouseWheelMoved(MouseWheelEvent e){\n  getHandler().mouseWheelMoved(e);\n}\n', 'nl': 'Called when the mouse wheel is rotated while over a JScrollPane.'}
{'code': 'public static void generateJavaScriptError(Writer writer,String javascriptCode) throws IOException {\n  writer.write("<script>alert(top.GetIdsLan(\\"" + javascriptCode + "\\"));</script>");\n}\n', 'nl': 'Public methods'}
{'code': 'public void addException(String exception){\n  LocalDate exceptionDate=parseDateFormat(exception);\n  additions.add(exceptionDate);\n  MapUtils.getSet(exceptionDate,dateStats).remove(this.getId());\n}\n', 'nl': 'Adds a new exception date'}
{'code': 'public void abort(){\n  m_nToDo=ABORT;\n  go();\n}\n', 'nl': 'Aborts the execution'}
{'code': 'public SearchForActions createSearch(int strategy,int qSearchImpl,HeuristicFunction hf){\n  QueueSearch qs=null;\n  SearchForActions result=null;\nswitch (qSearchImpl) {\ncase TREE_SEARCH:\n    qs=new TreeSearch();\n  break;\ncase GRAPH_SEARCH:\nqs=new GraphSearch();\nbreak;\ncase GRAPH_SEARCH_BFS:\nqs=new GraphSearchBFS();\nbreak;\ncase BIDIRECTIONAL_SEARCH:\nqs=new BidirectionalSearch();\n}\nswitch (strategy) {\ncase DF_SEARCH:\nresult=new DepthFirstSearch(qs);\nbreak;\ncase BF_SEARCH:\nresult=new BreadthFirstSearch(qs);\nbreak;\ncase ID_SEARCH:\nresult=new IterativeDeepeningSearch();\nbreak;\ncase UC_SEARCH:\nresult=new UniformCostSearch(qs);\nbreak;\ncase GBF_SEARCH:\nresult=new GreedyBestFirstSearch(qs,hf);\nbreak;\ncase ASTAR_SEARCH:\nresult=new AStarSearch(qs,hf);\nbreak;\ncase RBF_SEARCH:\nresult=new RecursiveBestFirstSearch(new AStarEvaluationFunction(hf));\nbreak;\ncase RBF_AL_SEARCH:\nresult=new RecursiveBestFirstSearch(new AStarEvaluationFunction(hf),true);\nbreak;\ncase HILL_SEARCH:\nresult=new HillClimbingSearch(hf);\nbreak;\n}\nreturn result;\n}\n', 'nl': 'Creates a search instance.'}
{'code': 'private void initialiseDrawables(){\n  leftDrawable=ContextCompat.getDrawable(TestButtonConfig.this,R.drawable.introbutton_behaviour_first);\n  rightDrawable=ContextCompat.getDrawable(TestButtonConfig.this,R.drawable.introbutton_behaviour_previous);\n  finalDrawable=ContextCompat.getDrawable(TestButtonConfig.this,R.drawable.introbutton_behaviour_progress);\n}\n', 'nl': 'Initialise the drawables to display in the navigation buttons after the appearance/behaviour change is triggered.'}
{'code': 'public void configureOption3(String value){\n  super.configureOption3(value);\n  log.debug("configureOption3: " + value);\n  setTurnoutHandling(value);\n}\n', 'nl': 'Set the third port option. Only to be used after construction, but before the openPort call'}
{'code': 'public void update(double x_[]){\n  update(new double[][]{x_});\n}\n', 'nl': 'Update - On raw data (with no bias column)'}
{'code': 'public void transform(Source xmlSource,Result outputTarget,boolean shouldRelease) throws TransformerException {\nsynchronized (m_reentryGuard) {\n    SerializationHandler xoh=createSerializationHandler(outputTarget);\n    this.setSerializationHandler(xoh);\n    m_outputTarget=outputTarget;\n    transform(xmlSource,shouldRelease);\n  }\n}\n', 'nl': 'Process the source tree to the output result.'}
{'code': 'public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n', 'nl': 'Paints the border of a slider.'}
{'code': 'public static void showInfoMsg(final Object... messages){\n  Sound.beepOnInfo();\n  JOptionPane.showMessageDialog(LEnv.CURRENT_GUI_FRAME.get(),messages,"Info",JOptionPane.INFORMATION_MESSAGE);\n}\n', 'nl': 'Shows an info message. <p> This method blocks until the dialog is closed. </p>'}
{'code': '@SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase EipPackage.SERVICE_REF__NAME:\n    setName((String)newValue);\n  return;\ncase EipPackage.SERVICE_REF__REFERENCE:\nsetReference(newValue);\nreturn;\ncase EipPackage.SERVICE_REF__OPERATIONS:\ngetOperations().clear();\ngetOperations().addAll((Collection<? extends String>)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void ReInit(JavaCharStream stream){\n  jjmatchedPos=jjnewStateCnt=0;\n  curLexState=defaultLexState;\n  input_stream=stream;\n  ReInitRounds();\n}\n', 'nl': 'Reinitialise parser.'}
{'code': 'public void addContentView(View newContentView){\n  contentLayout.addView(newContentView);\n  contentLayout.invalidate();\n}\n', 'nl': 'Add a view into the Content LinearLayout, the LinearLayout that expands or collapse in a fashion way.'}
{'code': 'public SyntheticMethodBinding(SourceTypeBinding declaringEnum,int startIndex,int endIndex){\n  this.declaringClass=declaringEnum;\n  SyntheticMethodBinding[] knownAccessMethods=declaringEnum.syntheticMethods();\n  this.index=knownAccessMethods == null ? 0 : knownAccessMethods.length;\n  StringBuffer buffer=new StringBuffer();\n  buffer.append(TypeConstants.SYNTHETIC_ENUM_CONSTANT_INITIALIZATION_METHOD_PREFIX).append(this.index);\n  this.selector=String.valueOf(buffer).toCharArray();\n  this.modifiers=ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic;\n  this.tagBits|=(TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);\n  this.purpose=SyntheticMethodBinding.TooManyEnumsConstants;\n  this.thrownExceptions=Binding.NO_EXCEPTIONS;\n  this.returnType=TypeBinding.VOID;\n  this.parameters=Binding.NO_PARAMETERS;\n  this.startIndex=startIndex;\n  this.endIndex=endIndex;\n}\n', 'nl': 'Construct enum special methods: values or valueOf methods'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANG_1:\n    getCodeLang_1().clear();\n  return;\ncase UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANGS_1:\ngetCodeLangs_1().clear();\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void testDragOutOfTouchable(){\n  View outsideView=getViewByTestId("E");\n  View innerButton=getViewByTestId("A");\n  SingleTouchGestureGenerator gestureGenerator=createGestureGenerator();\n  gestureGenerator.startGesture(innerButton);\n  waitForBridgeAndUIIdle();\n  gestureGenerator.dragTo(outsideView,15).endGesture();\n  waitForBridgeAndUIIdle();\n  assertTrue(mRecordingModule.getCalls().isEmpty());\n}\n', 'nl': 'Start gesture at view A, then drag and release on view {E}. Expect no touch handlers to fire'}
{'code': 'public static void add(List<String> options,char option,int value){\n  add(options,"" + option,value);\n}\n', 'nl': 'Adds the int value to the options.'}
{'code': 'public void callPredicateVisitors(XPathVisitor visitor){\n  m_expr.callVisitors(new filterExprOwner(),visitor);\n  super.callPredicateVisitors(visitor);\n}\n', 'nl': 'This will traverse the heararchy, calling the visitor for  each member.  If the called visitor method returns  false, the subtree should not be called.'}
{'code': '@Override public void onSlotRemoved(final RPObject object,final String slotName,final RPObject sobject){\n}\n', 'nl': 'A slot object was removed.'}
{'code': 'public void monitorEnter(){\n  mv.visitInsn(Opcodes.MONITORENTER);\n}\n', 'nl': 'Generates the instruction to get the monitor of the top stack value.'}
{'code': '@Override public void put(String name,boolean value){\n  emulatedFields.put(name,value);\n}\n', 'nl': 'Find and set the boolean value of a given field named <code>name</code> in the receiver.'}
{'code': 'public static void preloadDataModel(){\n  getMapOfLanguagesById();\n  getListOfCustomColumnTypes();\n  getMapOfEBookFilesByBookId();\n  getMapOfAuthorsByBookId();\n  getMapOfTagsByBookId();\n  getMapOfSeriesByBookId();\n  getMapOfCommentsByBookId();\n  getListOfTags();\n  getListOfAuthors();\n  getListOfSeries();\n  getListOfBooks();\n  getMapOfBooks();\n  getMapOfTags();\n  getMapOfAuthors();\n  getMapOfSeries();\n  generateImplicitLanguageTags();\n  getMapOfBooksByTag();\n  getMapOfBooksByAuthor();\n  getMapOfBooksBySeries();\n  getMapOfBooksByRating();\n}\n', 'nl': 'The following loads up data in a number of different views to help with more efficient access to it later in the run. Some values that are optional are only loaded on demand when an attempt is amde to access their data set.'}
{'code': '@Override public void rescan(){\n  restart();\n}\n', 'nl': "Invokes restart method since FlingSDK doesn't have analog of rescan"}
{'code': 'public final void run(final Population population,final ReplanningContext replanningContext){\n  beforePopulationRunHook(population,replanningContext);\n  delegate.run(population.getPersons().values(),population.getPersonAttributes(),replanningContext);\n  afterRunHook(population);\n}\n', 'nl': 'Randomly chooses for each person of the population a strategy and uses that strategy on the person.'}
{'code': '@Override public void acceptTrainingSet(TrainingSetEvent e){\n  Instances trainingSet=e.getTrainingSet();\n  DataSetEvent dse=new DataSetEvent(this,trainingSet);\n  acceptDataSet(dse);\n}\n', 'nl': 'Accept a training set'}
{'code': '@SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:\n    getCodeLang_1().clear();\n  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);\nreturn;\ncase UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:\ngetCodeLangs_1().clear();\ngetCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public synchronized void remove(ComponentName componentName,UserHandleCompat user){\n  mCache.remove(new ComponentKey(componentName,user));\n}\n', 'nl': 'Remove any records for the supplied ComponentName.'}
{'code': 'public void query(String query){\n}\n', 'nl': 'Filters the DbfTableModel given a SQL like string'}
{'code': 'public void addQueryExecuteListener(QueryExecuteListener l){\n  m_QueryExecuteListeners.add(l);\n}\n', 'nl': 'adds the given listener to the list of listeners.'}
{'code': 'public void addRenderingHints(Map hints){\n  this.hints.putAll(hints);\n}\n', 'nl': 'Sets the values of an arbitrary number of preferences for the rendering algorithms. Only values for the rendering hints that are present in the specified <code>Map</code> object are modified. All other preferences not present in the specified object are left unmodified. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Refer to the <code>RenderingHints</code> class for definitions of some common keys and values.'}
{'code': 'public void fireGroupChanged(final NetworkEvent<Group> event,final String changeDescription){\n  for (  GroupListener listener : groupListeners) {\n    listener.groupChanged(event,changeDescription);\n  }\n}\n', 'nl': 'This version of fireGroupChanged fires a pre-set event, which may have an auxiliary object set.'}
{'code': 'public void dispose(){\n  m_buttonSynchronizer.dispose();\n}\n', 'nl': 'Frees allocated resources.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  Element elementNode;\n  String elementValue;\n  doc=(Document)load("staff",false);\n  elementNode=doc.getDocumentElement();\n  elementValue=elementNode.getNodeValue();\n  assertNull("elementNodeValueNull",elementValue);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  request.getSession().setAttribute("school","hualixy");\n  response.sendRedirect("servlet/SchoolServlet");\n  return;\n}\n', 'nl': 'The doGet method of the servlet. <br> This method is called when a form has its tag value method equals to get.'}
{'code': 'public void testCalculateContainerArtifactId(){\n  assertEquals("cargo-core-container-jboss",AbstractCargoMojo.calculateContainerArtifactId("jboss42x"));\n  assertEquals("cargo-core-container-oc4j",AbstractCargoMojo.calculateContainerArtifactId("oc4j10x"));\n  assertEquals("cargo-core-container-liberty",AbstractCargoMojo.calculateContainerArtifactId("liberty"));\n}\n', 'nl': 'Test the calculation of container artifact IDs.'}
{'code': 'public void testAddPropertyChangeListener(){\n  PropertyChangeListener l=null;\n  AbstractThrottle instance=new AbstractThrottleImpl();\n  instance.addPropertyChangeListener(l);\n}\n', 'nl': 'Test of addPropertyChangeListener method, of class AbstractThrottle.'}
{'code': 'public static void multCol(Matrix A,int j,double c){\n  multCol(A,j,0,A.rows(),c);\n}\n', 'nl': 'Updates the values of column <tt>j</tt> in the given matrix to be A[:,j] = A[:,j]* c'}
{'code': 'private void ItoOSP(int i,byte[] sp){\n  sp[0]=(byte)(i >>> 24);\n  sp[1]=(byte)(i >>> 16);\n  sp[2]=(byte)(i >>> 8);\n  sp[3]=(byte)(i >>> 0);\n}\n', 'nl': 'int to octet string.'}
{'code': '@Override public void close(){\n  LogManager.getLogManager().checkAccess();\n  close(true);\n}\n', 'nl': 'Closes this handler. The tail string of the formatter associated with this handler is written out. A flush operation and a subsequent close operation is then performed upon the output stream. Client applications should not use a handler after closing it.'}
{'code': 'public void addItineraries(List<TransitJourneyID> transitJourneyIDs,ZoneId timeZone){\n  for (  Integer accessIdx : accessIndexes.values()) {\n    for (    Integer egressIdx : egressIndexes.values()) {\n      addItinerary(accessIdx,egressIdx,transitJourneyIDs,timeZone);\n    }\n  }\n}\n', 'nl': 'Creates itineraries for all access index and egress index combinations'}
{'code': 'public void insertRow() throws SQLException {\n  checkUpdatable();\n  rowUpdater.insertRow();\n  fbFetcher.insertRow(rowUpdater.getInsertRow());\n  notifyRowUpdater();\n}\n', 'nl': 'Inserts the contents of the insert row into this <code>ResultSet</code> objaect and into the database. The cursor must be on the insert row when this method is called.'}
{'code': '@Override public void interrupt(){\n  super.interrupt();\n  U.closeQuiet(proc.getErrorStream());\n  U.closeQuiet(proc.getInputStream());\n  U.closeQuiet(proc.getOutputStream());\n}\n', 'nl': 'Interrupts a thread and closes process streams.'}
{'code': 'public void onDrawerOpened(View drawerView){\n  super.onDrawerOpened(drawerView);\n}\n', 'nl': 'Called when a drawer has settled in a completely open state.'}
{'code': 'public static void inPlaceSort(Comparable[] x){\n  inPlaceSort(x,0,x.length - 1);\n}\n', 'nl': 'In-Place Merge Sort. Building on the algorithm core found in http://www.cs.ubc.ca/~harrison/Java/MergeSortAlgorithm.java.html'}
{'code': 'public void reset(){\n  operations.clear();\n}\n', 'nl': 'reset the buffer, empty the operations list'}
{'code': 'public DefaultPlayerBridge(final IGame aGame){\n  m_game=aGame;\n  final GameStepListener m_gameStepListener=null;\n  m_game.addGameStepListener(m_gameStepListener);\n}\n', 'nl': 'Creates new DefaultPlayerBridge'}
{'code': 'public void mouseExited(MouseEvent e){\n}\n', 'nl': 'Invoked when the mouse exits a component.'}
{'code': 'public static void initializeLoggers(){\n  initializeLog4J();\n  initializeJavaLogger();\n}\n', 'nl': 'This method initializes the loggers, currently just reseting the Mock Appender captured events.'}
{'code': 'public void compileIfModified(String fileName,LineMap lineMap) throws IOException, ClassNotFoundException {\n  compile(fileName,lineMap,true);\n}\n', 'nl': 'Compiles the class.  className is a fully qualified Java class, e.g. work.jsp.Test'}
{'code': 'private RandomGenerator(){\n  super();\n}\n', 'nl': 'Initializes the random number generator without a seed.'}
{'code': 'public void disallowOut(int x,int y,int width,int height){\n  Rectangle r=new Rectangle(x,y,width,height);\n  leavingBarriers.add(r);\n}\n', 'nl': 'Block teleporting from a rectangular area.'}
{'code': 'public void onViewRecycled(){\n}\n', 'nl': 'Called when a view created by the adapter has been recycled.'}
{'code': 'public void onSurfaceChanged(GL10 gl,int width,int height){\n  gl.glViewport(0,0,width,height);\n  float ratio=(float)width / height;\n  gl.glMatrixMode(GL10.GL_PROJECTION);\n  gl.glLoadIdentity();\n  gl.glFrustumf(-ratio,ratio,-1,1,1,10);\n}\n', 'nl': 'Update view-port with the new surface'}
{'code': 'public static void assertEquals(Object expected,Object actual){\n  Assert.assertEquals(expected,actual);\n}\n', 'nl': 'Asserts that two objects are equal. If they are not an AssertionFailedError is thrown.'}
{'code': 'public void insert(final Object eKey,final Object element,final int position){\n  _elementOrder.add(position,eKey);\n  _elements.put(eKey,element);\n}\n', 'nl': 'Inserts element at a position.'}
{'code': 'private void hideNotification(){\n  config().getNotificationProvider().hideAllNotifications();\n}\n', 'nl': 'Hiding notifications'}
{'code': '@DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.956 -0400",hash_original_method="336EB9AA03C5B902D3CE726BD69F433F",hash_generated_method="21B764AD8B1C1E09B98A34736C8736B1") @Override public void flush(){\n}\n', 'nl': 'Flushing this writer has no effect.'}
{'code': 'public void clear(){\n  super.clear();\n  while (queue.poll() != null) {\n  }\n}\n', 'nl': 'Clears this map.'}
{'code': '@Override public void clearImageCache(){\n  _imageResourceLoader.clear();\n}\n', 'nl': 'Empties the image cache entirely.'}
{'code': '@Override public void chartChanged(ChartChangeEvent event){\n  this.flag=true;\n}\n', 'nl': 'Event handler.'}
{'code': 'public void testCreatingLauncherWithJetty1() throws Exception {\n  SwtBotProjectDebug.launchGWTDevModeWithJettyThenTerminateIt(bot,PROJECT_NAME);\n  String persistedArgs=SwtBotProjectDebug.getTheProgramArgsTextBox(bot);\n  assertTrue(persistedArgs.contains("com.example.project.Project"));\n}\n', 'nl': 'Create launcher with clicking on the GWT Development Mode with Jetty'}
{'code': 'public void onSequenceAborted(int sequenceId){\n}\n', 'nl': 'Note that this is typically invoked on the camera thread and at high frequency, so implementations must execute quickly and not make assumptions regarding the thread they are on.'}
{'code': '@SuppressWarnings("unchecked") public final void testSetConstraints(){\n  Constraint<Object> constraint1=new ConstraintImplementation(true);\n  Constraint<Object> constraint2=new ConstraintImplementation(true);\n  Constraint<Object>[] constraints1=new Constraint[1];\n  constraints1[0]=constraint1;\n  Constraint<Object>[] constraints2=new Constraint[2];\n  constraints2[0]=constraint1;\n  constraints2[1]=constraint2;\n  DisjunctiveConstraint<Object> disjunctiveConstraint=new DisjunctiveConstraint<>(constraints1);\n  disjunctiveConstraint.setConstraints(constraints2);\n  assertEquals(constraints2,disjunctiveConstraint.getConstraints());\n}\n', 'nl': 'Tests the functionality of the method, which allows to set the constraints.'}
{'code': 'public void removeToTag(){\n  parameters.delete(ParameterNames.TO_TAG);\n}\n', 'nl': 'remove Tag member'}
{'code': 'public void add(T t,String id,double percentX,double percentY,double percentWidth,double percentHeight){\n  surface.addRelative(id,t,percentX,percentY,percentWidth,percentHeight,0,Double.MAX_VALUE,0,Double.MAX_VALUE);\n  content.getChildren().add(t);\n}\n', 'nl': 'Called to add an object to be laid out, to the layout engine applying the specified String id.'}
{'code': '@AfterClass public static void tearDownAfterClass() throws Exception {\n}\n', 'nl': 'Method tearDownAfterClass.'}
{'code': 'public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the background of the row containing a cell in a tree.'}
{'code': 'public static void assumeFalse(BooleanSupplier assumptionSupplier) throws TestAbortedException {\n  assumeFalse(assumptionSupplier,null);\n}\n', 'nl': 'Validate the given assumption.'}
{'code': 'public void onDestroy(){\n  mBackgroundExecution.cancel(true);\n  return;\n}\n', 'nl': 'Called when the service is destroyed.'}
{'code': 'public static void silence(){\n  System.setOut(nullout);\n}\n', 'nl': 'Mutes stdout'}
{'code': 'public void subtract(final Number operand){\n  this.value-=operand.intValue();\n}\n', 'nl': 'Subtracts a value from the value of this instance.'}
{'code': 'public void visitTypeVariable(String name){\n}\n', 'nl': 'Visits a signature corresponding to a type variable.'}
{'code': 'public final void yyreset(java.io.Reader reader){\n  zzReader=reader;\n  zzAtBOL=true;\n  zzAtEOF=false;\n  zzEndRead=zzStartRead=0;\n  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;\n  yyline=yychar=yycolumn=0;\n  zzLexicalState=YYINITIAL;\n}\n', 'nl': 'Resets the scanner to read from a new input stream. Does not close the old reader. All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.'}
{'code': 'public void add(DurationFieldType field,int value){\n  super.addField(field,value);\n}\n', 'nl': 'Adds to the value of one of the fields. <p> The field type specified must be one of those that is supported by the period.'}
{'code': 'public void removeWallet(Wallet wallet){\n  wallets.remove(checkNotNull(wallet));\n  peerFilterProviders.remove(wallet);\n  wallet.removeCoinsReceivedEventListener(walletCoinsReceivedEventListener);\n  wallet.removeKeyChainEventListener(walletKeyEventListener);\n  wallet.removeScriptChangeEventListener(walletScriptEventListener);\n  wallet.setTransactionBroadcaster(null);\n  for (  Peer peer : peers) {\n    peer.removeWallet(wallet);\n  }\n}\n', 'nl': 'Unlinks the given wallet so it no longer receives broadcast transactions or has its transactions announced.'}
{'code': '@DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.132 -0500",hash_original_method="AE2AC52C1B086D07AB414F4634EAA37E",hash_generated_method="DA3324DED8188362CBB4DD2028BC1249") private Data(){\n}\n', 'nl': 'This utility class cannot be instantiated'}
{'code': 'public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  UserDao.dropTable(db,ifExists);\n}\n', 'nl': 'Drops underlying database table using DAOs.'}
{'code': 'public static void enableTraceCalls(){\n  traceCalls=true;\n}\n', 'nl': '<p> enableTraceCalls </p>'}
{'code': 'public void hideWindow(){\n  doHide();\n}\n', 'nl': 'Hides the window slowly using an animation.'}
{'code': 'public void encoding(String charset){\n  setEncoding(charset);\n}\n', 'nl': 'Sets encoding to use (defaults to UTF_8).'}
{'code': 'public void log(String tag,String message){\n  Log.d(tag,message);\n}\n', 'nl': 'Send a debug log message'}
{'code': 'public void localTransactionRolledback(ConnectionEvent event){\n}\n', 'nl': 'Ignored event callback'}
{'code': 'public void registerModelUpdatePeriodChangeListener(final PropertyChangeListener listener){\n  modelUpdatePeriodListeners.add(listener);\n}\n', 'nl': 'Register a listener which is notified when the modelUpdate period value is changed. Registration is allowed only during'}
{'code': 'public void addChild(ZkDataNode child){\n  allChildren.add(child);\n}\n', 'nl': 'Add a ZkData Node to the child.'}
{'code': 'public void appendBoolean(boolean val){\n  buf[pos++]=(byte)(val ? 1 : 0);\n}\n', 'nl': 'Append a boolean value to the message.'}
{'code': 'public static void debug(String trace){\n  log.debug(trace);\n}\n', 'nl': 'Used to debug program action. Actually shorthand for <br> <code> Tracer.trace(trace, Tracer.DEBUG) </code>'}
{'code': 'public static void startCalendarMetafeedSync(Account account){\n  Bundle extras=new Bundle();\n  extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  extras.putBoolean("metafeedonly",true);\n  ContentResolver.requestSync(account,Calendars.CONTENT_URI.getAuthority(),extras);\n}\n', 'nl': 'Checks the server for an updated list of Calendars (in the background). If a Calendar is added on the web (and it is selected and not hidden) then it will be added to the list of calendars on the phone (when this finishes).  When a new calendar from the web is added to the phone, then the events for that calendar are also downloaded from the web. This sync is done automatically in the background when the SelectCalendars activity and fragment are started.'}
{'code': 'public void addAll(Iterator<? extends Number> values){\n  while (values.hasNext()) {\n    add(values.next().doubleValue());\n  }\n}\n', 'nl': 'Adds the given values to the dataset.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase SexecPackage.TIME_EVENT__PERIODIC:\n    setPeriodic(PERIODIC_EDEFAULT);\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table comment'}
{'code': 'public void put(String key,String value){\n  editor.putString(key,value);\n  editor.commit();\n}\n', 'nl': 'Stores the given key-value pair in the Murmur generic store.'}
{'code': 'public void windowClosing(java.awt.event.WindowEvent e){\n  doneButtonActionPerformed();\n}\n', 'nl': 'Do the done action if the window is closed early.'}
{'code': '@SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){\n  this.values=(V[])new Value[nLocals + nStack];\n  this.locals=nLocals;\n}\n', 'nl': 'Constructs a new frame with the given size.'}
{'code': 'public void createUser(String username,String password) throws SQLException {\n  createUser(username,password,null);\n}\n', 'nl': 'Create a database user. <p> On Firebird 3.0 or higher this uses the default user manager plugin. </p>'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Element testAddr;\n  NamedNodeMap addrAttr;\n  Node attrNode;\n  NamedNodeMap attrList;\n  doc=(Document)load("hc_staff",false);\n  elementList=doc.getElementsByTagName("acronym");\n  testAddr=(Element)elementList.item(0);\n  addrAttr=testAddr.getAttributes();\n  attrNode=addrAttr.item(0);\n  attrList=attrNode.getAttributes();\n  assertNull("nodeAttributeNodeAttributeAssert1",attrList);\n}\n', 'nl': 'Runs the test case.'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase UmplePackage.AFTER_EVENT___TIMER_1:\n    setTimer_1((String)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public static void execute(ExecutablePool pool,Instantiator[] instantiators,EventID eventId){\n  AbstractOp op=new RegisterInstantiatorsOpImpl(instantiators,eventId);\n  pool.execute(op,Integer.MAX_VALUE);\n}\n', 'nl': 'Register a bunch of instantiators on a server using connections from the given pool to communicate with the server.'}
{'code': 'public void onUpdate(Project.NameKey project,String oldValue,String newValue){\n}\n', 'nl': 'Called after a project config is updated.'}
{'code': 'public void transmit(Command c,Map h,String b){\n  _server.receive(c,h,b,this);\n}\n', 'nl': 'Transmit a message to clients and listeners. '}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.123 -0500",hash_original_method="E6965F1E2FB321FAD1F4EA1126484F16",hash_generated_method="60C132B45E842D9C2697360FDDF75B00") public void copy1DRangeFrom(int off,int count,float[] d){\n  validateIsFloat32();\n  copy1DRangeFromUnchecked(off,count,d);\n}\n', 'nl': 'Copy part of an allocation from an array.  This variant is type checked and will generate exceptions if the Allocation type is not a 32 bit float type.'}
{'code': 'public static void saveDefaultsToProperties(Properties properties){\n  properties.setProperty("MapElement.CartesianGrid.defaultColor",StringUtil.colorToString(defaultColor));\n  properties.setProperty("MapElement.CartesianGrid.defaultRows",Integer.toString(defaultRows));\n  properties.setProperty("MapElement.CartesianGrid.defaultColumns",Integer.toString(defaultColumns));\n  properties.setProperty("MapElement.CartesianGrid.defaultLineWidth",Double.toString(defaultLineWidth));\n  properties.setProperty("MapElement.CartesianGrid.defaultLabelVisible",Boolean.toString(defaultLabelVisible));\n  properties.setProperty("MapElement.CartesianGrid.defaultActualCoordinates",Boolean.toString(defaultActualCoordinates));\n}\n', 'nl': 'Save defaults'}
{'code': 'public synchronized final void incrementProgressBy(int diff){\n  setProgress(mProgress + diff);\n}\n', 'nl': "<p>Increase the progress bar's progress by the specified amount.</p>"}
{'code': 'public void updateRegisterToClose(UseCaseConf useCaseConf,Integer bookId,List fields,List listIdsRegister) throws ValidationException, SecurityException, AttributesException, BookException, SessionException, ParseException {\n  BookSession.preUpdateRegisterToClose(useCaseConf.getSessionID(),bookId,listIdsRegister,useCaseConf.getEntidadId());\n  Integer folderID=null;\n  for (Iterator it=listIdsRegister.iterator(); it.hasNext(); ) {\n    folderID=(Integer)it.next();\n    saveOrUpdateFolder(useCaseConf,bookId,folderID.intValue(),null,fields,null,null);\n  }\n  BookSession.postUpdateFields(useCaseConf.getSessionID(),bookId,listIdsRegister,useCaseConf.getEntidadId());\n}\n', 'nl': 'Metodo que prepara y actualiza el estado de los registros a CERRADO'}
{'code': 'private void sendCommittedText(){\n  AttributedString as=new AttributedString(buffer.toString());\n  context.dispatchInputMethodEvent(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED,as.getIterator(),buffer.length(),TextHitInfo.leading(insertionPoint),null);\n  buffer.setLength(0);\n  insertionPoint=0;\n  format=UNSET;\n}\n', 'nl': 'Send the committed text to the client.'}
{'code': 'public SpaceHorizontalAction(final NetworkPanel networkPanel){\n  super(networkPanel,"Space Horizontal",EnablingCondition.NEURONS);\n  putValue(SMALL_ICON,ResourceManager.getImageIcon("SpaceHorizontal.png"));\n  putValue(SHORT_DESCRIPTION,"Space selected neurons horizontally");\n}\n', 'nl': 'Create a new space horizontal action with the specified network panel.'}
{'code': 'public void destination(Object destination){\n  this.destination=Objects.requireNonNull(destination);\n}\n', 'nl': 'Sets the destination directory, defaults to `build/p2asmaven`.'}
{'code': 'public static void copyProperties(Properties from,Properties to){\n  Enumeration<Object> keys=from.keys();\n  while (keys.hasMoreElements()) {\n    String key=(String)keys.nextElement();\n    to.put(key,from.getProperty(key));\n  }\n}\n', 'nl': 'Copy the contents from one properties object to another.'}
{'code': 'public void fireMapViewEvent(MapViewEvent e){\n  for (  MapViewEventListener listener : eventListeners)   listener.eventHappened(e);\n}\n', 'nl': 'Informs all interested listener about view events such as mouse events and data changes.'}
{'code': '@Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){\n  buildentwife(zone);\n}\n', 'nl': 'Configure a zone.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_characterdatadeletedataexceedslength.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public static void performAndWaitForWindowChange(SWTBot bot,Runnable runnable){\n  SWTBotShell shell=bot.activeShell();\n  runnable.run();\n  waitUntilShellIsNotActive(bot,shell);\n}\n', 'nl': 'Simple wrapper to block for actions that either open or close a window.'}
{'code': 'public void removeLayoutComponent(Component comp){\n  invalidateLayout(comp.getParent());\n}\n', 'nl': 'Removes the specified component from the layout. Used by this class to know when to invalidate layout.'}
{'code': 'public void addPart(String name,String hashMethod,byte[] data){\n  parts.add(new MessagePart(name,hashMethod,data));\n}\n', 'nl': 'Adds new hash to be verified.'}
{'code': 'public void testNewCharsetsConfiguration() throws Exception {\n  Properties props=new Properties();\n  props.setProperty("useUnicode","true");\n  props.setProperty("characterEncoding","EUC_KR");\n  getConnectionWithProps(props).close();\n  props=new Properties();\n  props.setProperty("useUnicode","true");\n  props.setProperty("characterEncoding","KOI8_R");\n  getConnectionWithProps(props).close();\n}\n', 'nl': 'These two charsets have different names depending on version of MySQL server.'}
{'code': 'public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException re,boolean moved){\n  Assert.assertTrue(recipient != null,"MoveBucketReplyMessage NULL recipient");\n  MoveBucketReplyMessage m=new MoveBucketReplyMessage(processorId,re,moved);\n  m.setRecipient(recipient);\n  dm.putOutgoing(m);\n}\n', 'nl': 'Send a reply'}
{'code': 'public void cleanInprogressJobMap(){\n  taskManager.cleanInprogressJobMap();\n}\n', 'nl': 'Clean inprogress job map.'}
{'code': 'public void keybindingHelp(){\n  insertAtCursor(buildKeybindingInfo());\n}\n', 'nl': 'Generate a key bindings list for all keymaps.'}
{'code': 'public static void swapRow(Matrix A,int j,int k){\n  swapCol(A,j,k,0,A.cols());\n}\n', 'nl': 'Swaps the columns <tt>j</tt> and <tt>k</tt> in the given matrix.'}
{'code': 'public void addCheckBoxListener(ChangeListener listener){\n  listenerList.add(ChangeListener.class,listener);\n}\n', 'nl': 'Register a listener for this checkbox.'}
{'code': 'public void addRosterEntry(RemoteRosterEntry remoteRosterEntry){\nsynchronized (remoteRosterEntries) {\n    remoteRosterEntries.add(remoteRosterEntry);\n  }\n}\n', 'nl': 'Adds a remote roster entry to the packet.'}
{'code': 'public void write(AnnotationsWriter writer) throws IOException {\n  writer.constValueIndex(getValue());\n}\n', 'nl': 'Writes the value.'}
{'code': 'public CaseInsensitiveHashSet(String[] a,float f){\n  super(a,f,CaseInsensitiveHashingStrategy.INSTANCE);\n}\n', 'nl': 'Creates a new hash set copying the elements of an array.'}
{'code': 'public void remove(int index){\n  entries.remove(index);\n}\n', 'nl': 'Removes the entry at the specified position in the table.'}
{'code': 'public void characters(String s) throws IOException {\n  characters(s,false);\n}\n', 'nl': 'Emits character data subject to XML escaping.'}
{'code': 'public void tag(String tag,String[] names,String[] values,int nattr){\n  tag(tag,names,values,nattr,true);\n}\n', 'nl': 'Print a closed tag with attributes. The tag will be followed by a newline.'}
{'code': 'public void configure(){\n  setCommandStationType(getOptionState(option2Name));\n  setTurnoutHandling(getOptionState(option3Name));\n  UhlenbrockPacketizer packets=new UhlenbrockPacketizer();\n  packets.connectPort(this);\n  this.getSystemConnectionMemo().setLnTrafficController(packets);\n  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);\n  this.getSystemConnectionMemo().configureManagers();\n  packets.startThreads();\n}\n', 'nl': 'Set up all of the other objects to operate with a LocoBuffer connected to this port.'}
{'code': '@Override public void flush() throws java.io.IOException {\n  flushBase64();\n  super.flush();\n}\n', 'nl': 'Flushes the stream (and the enclosing streams).'}
{'code': 'public SparseDoubleMatrix3D(int slices,int rows,int columns){\n  this(slices,rows,columns,slices * rows * (columns / 1000),0.2,0.5);\n}\n', 'nl': 'Constructs a matrix with a given number of slices, rows and columns and default memory usage. All entries are initially <tt>0</tt>.'}
{'code': 'public void didNotThrottle(int tenantClass){\n  super.startedAndFinished(Operation.READ,tenantClass,0,0);\n}\n', 'nl': 'If no throttling was required for the tenant to pass through the throttling point'}
{'code': 'public synchronized void clearAnnotations(){\n  mAnnotations.clear();\n  mStringXY.clear();\n}\n', 'nl': 'Removes all the existing annotations from the series.'}
{'code': 'private ZKLogMetadataForReader(URI uri,String logName,String logIdentifier){\n  super(uri,logName,logIdentifier);\n}\n', 'nl': 'metadata representation of a log'}
{'code': 'public final void lazySet(int index,short value){\n  this.set(index,value);\n}\n', 'nl': 'Sets an element to the given value, but the update may not happen immediately'}
{'code': 'public synchronized void flush(){\n  super.flush();\n}\n', 'nl': 'Writes test information from the started reporters to their output view <ul> <li>ExtentHtmlReporter - creates or appends to an HTML file</li> <li>ExtentXReporter - updates database</li> <li>ExtentEmailReporter - creates or appends to an HTML file</li> <li>ExtentLogger - no action taken</li> </ul>'}
{'code': '@Deprecated public void fullscreen() throws IllegalStateException {\n  setFullscreen(!fullscreen);\n}\n', 'nl': 'Toggles view to fullscreen mode It saves currentState and calls pause() method. When fullscreen is finished, it calls the saved currentState before pause() In practice, it only affects STARTED state. If currenteState was STARTED when fullscreen() is called, it calls start() method after fullscreen() has ended.'}
{'code': 'public void removeAttribute(String name){\n  attributes.remove(name);\n}\n', 'nl': 'Remove any configuration attribute associated with the specified name. If there is no such attribute, no action is taken.'}
{'code': 'public void logEvent(StoredException storedException,Callback<Object> callback){\n  sendLogEvent(storedException.threadName,storedException.stackTrace,callback);\n}\n', 'nl': 'Send stored exception (i.e., crashes) to UDP endpoint'}
{'code': 'public Header(ByteProvider byteProvider) throws IOException {\n  MXFPropertyPopulator.populateField(byteProvider,this,"numberOfElements");\n  MXFPropertyPopulator.populateField(byteProvider,this,"sizeOfElement");\n}\n', 'nl': 'Instantiates a new collection Header.'}
{'code': 'public void writeBorders(){\n  write(this.linenum,0,this.linenum + 1,0);\n  write(this.linenum,this.chars_per_line + 1,this.linenum + 1,this.chars_per_line + 1);\n}\n', 'nl': 'Print vertical borders on the current line at the left and right sides of the page at character positions 0 and chars_per_line + 1. Border lines are one text line in height <P> This was not in the original class, but was added afterwards by Dennis Miller.'}
{'code': 'private CharsToNameCanonicalizer(){\n  _canonicalize=true;\n  _intern=true;\n  _dirty=true;\n  _hashSeed=0;\n  _longestCollisionList=0;\n  initTables(DEFAULT_TABLE_SIZE);\n}\n', 'nl': 'Main method for constructing a master symbol table instance.'}
{'code': 'public void append(byte[] src){\n  append(src,0,src.length);\n}\n', 'nl': 'Appends the income data to be read by handshake protocol. The attempts to overflow the buffer by means of this methods seem to be futile because of: 1. The SSL protocol specifies the maximum size of the record and record protocol does not pass huge messages. (see TLS v1 specification http://www.ietf.org/rfc/rfc2246.txt , p 6.2) 2. After each call of this method, handshake protocol should start (and starts) the operations on received data and recognize the fake data if such was provided (to check the size of certificate for example).'}
{'code': 'public void opc_checkcast(short classIndex){\n  emitByte(opc_checkcast);\n  emitShort(classIndex);\n}\n', 'nl': 'Assumes the checkcast succeeds'}
{'code': 'private void populateDefaultsForNewOrder(Order order){\n  order.setOrderType(DbUtil.getMiscOrderType());\n  order.setCareSetting(orderService.getCareSettingByName("Outpatient"));\n  order.setConcept(getFreeTextOrderConcept());\n  order.setUrgency(Order.Urgency.ON_SCHEDULED_DATE);\n}\n', 'nl': 'Populates data for a NEW order that was created with the Buendia API. This should not be used for revisions, because it may overwrite data set by another source.'}
{'code': 'public void removeProgressListener(ChartProgressListener listener){\n  this.progressListeners.remove(ChartProgressListener.class,listener);\n}\n', 'nl': 'Deregisters an object for notification of changes to the chart.'}
{'code': 'public void success(byte[] message){\n  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));\n}\n', 'nl': 'Helper for success callbacks that just returns the Status.OK by default'}
{'code': 'public void logPurchase(BigDecimal purchaseAmount,Currency currency){\n  logPurchase(purchaseAmount,currency,null);\n}\n', 'nl': 'Logs a purchase event with Facebook, in the specified amount and with the specified currency.'}
{'code': 'private void sendBlob(String index,byte[] blob){\n  sendInstruction(new GuacamoleInstruction("blob",index,DatatypeConverter.printBase64Binary(blob)));\n}\n', 'nl': 'Injects a "blob" instruction into the outbound Guacamole protocol stream, as if sent by the connected client. "blob" instructions are used to send chunks of data along a stream.'}
{'code': '@Override public void drawScreen(int par1,int par2,float par3){\n  drawBackground(0);\n  drawCenteredString(fontRendererObj,"Zoom Manager",width / 2,40,0xffffff);\n  drawString(fontRendererObj,"Zoom Level: " + WurstClient.INSTANCE.options.zoom.level + " x normal",width / 2 - 75,height / 4 + 44,0xcccccc);\n  super.drawScreen(par1,par2,par3);\n}\n', 'nl': 'Draws the screen and all the components in it.'}
{'code': 'public void accept(final MethodVisitor mv){\n  AbstractInsnNode insn=first;\n  while (insn != null) {\n    insn.accept(mv);\n    insn=insn.next;\n  }\n}\n', 'nl': 'Makes the given visitor visit all of the instructions in this list.'}
{'code': '@Inline @Override public final void addressWrite(ObjectReference ref,Address target,Word offset,Word location,int mode){\n  Magic.setAddressAtOffset(ref.toObject(),offset.toOffset(),target,location.toInt());\n}\n', 'nl': 'Perform the actual write of the write barrier, writing the value as a raw Address.'}
{'code': 'public void endVisit(MethodRefParameter node){\n}\n', 'nl': 'End of visit the given type-specific AST node. <p> The default implementation does nothing. Subclasses may reimplement. </p>'}
{'code': 'public void initShadowTreeEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,XBLShadowTreeElement xblShadowTreeArg){\n  initEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg);\n  xblShadowTree=xblShadowTreeArg;\n}\n', 'nl': 'Initializes this event object with a namespaced event type.'}
{'code': 'private void updateRange(double x,double y){\n  mMinX=Math.min(mMinX,x);\n  mMaxX=Math.max(mMaxX,x);\n  mMinY=Math.min(mMinY,y);\n  mMaxY=Math.max(mMaxY,y);\n}\n', 'nl': 'Updates the range on both axes.'}
{'code': 'public static void sort(short[] array,int start,int end){\n  DualPivotQuicksort.sort(array,start,end);\n}\n', 'nl': 'Sorts the specified range in the array in ascending numerical order.'}
{'code': 'public static void llenarInformacionError(InformacionError ie,int codigoError,Exception e){\n  llenarInformacionError(ie,codigoError + "",e);\n}\n', 'nl': 'introducir la informacion de la excepcion en ie'}
{'code': 'public static void join(byte[] baggageBytes){\n  join(DetachedBaggage.deserialize(baggageBytes));\n}\n', 'nl': "Deserialize the provided baggage and merge its contents into the current thread's baggage."}
{'code': 'public void nextGeneration(){\n  generation++;\n}\n', 'nl': 'Increase the generation number by one.'}
{'code': "public void writeURL(String url) throws IOException {\n  writeUTF('U',url);\n}\n", 'nl': 'Writes a URL to the stream.'}
{'code': 'public void loadMedia(MediaInfo media,boolean autoPlay,int position,JSONObject customData) throws TransientNetworkDisconnectionException, NoConnectionException {\n  loadMedia(media,null,autoPlay,position,customData);\n}\n', 'nl': 'Loads a media. For this to succeed, you need to have successfully launched the application.'}
{'code': 'public static void print(PrintWriter self,Object value){\n  self.print(InvokerHelper.toString(value));\n}\n', 'nl': 'Print a value formatted Groovy style to the print writer.'}
{'code': 'public void reset(){\n  token=null;\n  status=S_INIT;\n  handlerStatusStack=null;\n}\n', 'nl': 'Reset the parser to the initial state without resetting the underlying reader.'}
{'code': 'private TennisBall(int ttl,boolean ping){\n  this.ttl=ttl;\n  this.ping=ping;\n}\n', 'nl': 'Creates a new ball with the specified TTL value and PING/PONG state.'}
{'code': 'public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception {\n  String config="spring-embedded-xbean.xml";\n  assertSenderConfig(config);\n}\n', 'nl': 'Spring configured test case that tests the remotely deployed xsd http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-SNAPSHOT.xsd'}
{'code': 'public void addProperty(String name,String value){\n  properties.put(name,value);\n}\n', 'nl': 'Adds a property.'}
{'code': 'public void exit(){\nsynchronized (statemachine) {\n    statemachine.exit();\n  }\n}\n', 'nl': 'exit() will be delegated thread-safely to the wrapped state machine.'}
{'code': '@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  mListName=getArguments().getString(Constants.KEY_LIST_NAME);\n}\n', 'nl': 'Initialize instance variables with data from bundle'}
{'code': 'private void addTrackFromGpxFile(){\n  EndToEndTestUtils.deleteAllTracks();\n  deleteExternalStorageFiles(TrackFileFormat.GPX);\n  createOneGpxFile();\n  importTracks(TrackFileFormat.GPX);\n  checkImportSuccess();\n  checkTrackFromGpxFile();\n}\n', 'nl': 'Adds one track by importing it from a GPX file.'}
{'code': 'public void next(){\n  pos++;\n}\n', 'nl': 'moves the internal pointer to the next position, no check if the next position is still valid'}
{'code': 'public void show(Animation anim){\n  show(true,anim);\n}\n', 'nl': 'Make the badge visible in the UI.'}
{'code': '@Override public void mark(int markLimit){\n}\n', 'nl': 'Since we do not support marking just yet, we do nothing.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrname.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public static void register(){\n  FilePath.register(new FilePathEncrypt());\n}\n', 'nl': 'Register this file system.'}
{'code': 'private CMemoryFunctions(){\n}\n', 'nl': 'You are not supposed to instantiate this class.'}
{'code': '@Override public void registerOutParameter(String parameterName,int sqlType,int scale) throws SQLException {\n  registerOutParameter(getIndexForName(parameterName),sqlType,scale);\n}\n', 'nl': 'Registers the given OUT parameter.'}
{'code': 'public void stopProxy(int hostNumber){\n  proxySet.get(currentType)[hostNumber - 1].stop();\n}\n', 'nl': 'Stop proxy.'}
{'code': 'public void add(int index,E element){\n  rangeCheckForAdd(index);\n  ensureCapacity(size + 1);\n  System.arraycopy(elementData,index,elementData,index + 1,size - index);\n  elementData[index]=element;\n  size++;\n}\n', 'nl': 'Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).'}
{'code': 'public void mouseEntered(MouseEvent event){\n  initiateToolTip(event);\n}\n', 'nl': 'Called when the mouse enters the region of a component. This determines whether the tool tip should be shown.'}
{'code': '@Ignore public static LongArray instance(long[] value){\n  throw Util.makeJavaArrayWrapperException();\n}\n', 'nl': 'The size of the new array.'}
{'code': 'public void addFooterView(View v){\n  addFooterView(v,null,true);\n}\n', 'nl': 'Add a fixed view to appear at the bottom of the list. If addFooterView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. <p>NOTE: Call this before calling setAdapter. This is so ListView can wrap the supplied cursor with one that will also account for header and footer views.'}
{'code': '@Override public void onCreate(){\n  super.onCreate();\n  mConnectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\n}\n', 'nl': 'What to do when the application starts'}
{'code': 'public void addAnimation(ComponentAnimation an){\n  anims.add(an);\n  Display.getInstance().notifyDisplay();\n}\n', 'nl': 'Adds the animation to the end to the animation queue'}
{'code': 'public void destroy(){\n  log.fine("");\n}\n', 'nl': 'Clean up resources'}
{'code': 'public void addQuat(Quaternion input,Quaternion output){\n  output.setX(getX() + input.getX());\n  output.setY(getY() + input.getY());\n  output.setZ(getZ() + input.getZ());\n  output.setW(getW() + input.getW());\n}\n', 'nl': 'Add this quaternion and another quaternion together and store the result in the output quaternion'}
{'code': 'public void startDocument() throws SAXException {\n}\n', 'nl': 'Receive notification of the beginning of the document. <p>By default, do nothing.  Application writers may override this method in a subclass to take specific actions at the beginning of a document (such as allocating the root node of a tree or creating an output file).</p>'}
{'code': '@Override public void writeCharacters(String text) throws XMLStreamException {\n  log.log(Level.FINE,"writeCharacters({0})",text);\n  writeCharsInternal(text,skipSpaces);\n}\n', 'nl': 'Write text to the output.'}
{'code': 'public HttpStack(int httpPort) throws IOException {\n  new HttpServer(httpPort);\n}\n', 'nl': 'Instantiates a new http stack on the requested port. It creates an http listener thread on the port.'}
{'code': 'public void acceptChanges(Connection con) throws SyncProviderException {\n  setConnection(con);\n  acceptChanges();\n}\n', 'nl': 'Propagates all row update, insert, and delete changes to the data source backing this <code>CachedRowSetImpl</code> object using the given <code>Connection</code> object. <P> The reference implementation <code>RIOptimisticProvider</code> modifies its synchronization to a write back function given the updated connection The reference implementation modifies its synchronization behaviour via the <code>SyncProvider</code> to ensure the synchronization occurs according to the updated JDBC <code>Connection</code> properties.'}
{'code': 'public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n}\n', 'nl': 'Paints the border of an arrow button. Arrow buttons are created by some components, such as <code>JScrollBar</code>.'}
{'code': 'public void visitInnerClassType(String name){\n}\n', 'nl': 'Visits an inner class.'}
{'code': 'public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){\n  super.callChildVisitors(visitor,callAttrs);\n}\n', 'nl': 'Call the children visitors.'}
{'code': 'private void updateHistoryButtons(){\n  historyForwardButton.setEnabled(history.hasNext());\n  historyBackButton.setEnabled(history.hasPrevious());\n}\n', 'nl': 'Enable/disable the history buttons based on whether there is something to go to in the history.'}
{'code': 'public void add(Production production){\n  productions.add(production);\n}\n', 'nl': 'Adds a production to this rule.'}
{'code': 'public void sendSessionBegins(){\n  sendSessionState(SessionState.Start);\n}\n', 'nl': 'Call sendSessionBegins when the plugin is loaded.'}
{'code': 'private void init(int initCapacity){\n  table=new Object[2 * initCapacity];\n}\n', 'nl': 'Initializes object to be an empty map with the specified initial capacity, which is assumed to be a power of two between MINIMUM_CAPACITY and MAXIMUM_CAPACITY inclusive.'}
{'code': 'public void quit(){\n  mQuit=true;\n  interrupt();\n}\n', 'nl': 'Forces this dispatcher to quit immediately.  If any requests are still in the queue, they are not guaranteed to be processed.'}
{'code': 'public void removeAllRenamingCallbacks(){\n  renamingCallbacks.clear();\n}\n', 'nl': 'Removes all board renaming callbacks.'}
{'code': 'public final void printLog(String path){\n  console.printLogToFile(path);\n}\n', 'nl': 'Prints the log to a local file.'}
{'code': 'public void testMoveRenameDirectorySourceAndDestinationMissingPartially() throws Exception {\n  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);\n  create(igfs,paths(DIR,DIR_NEW),null);\n  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);\n  checkExist(igfs,SUBDIR,SUBDIR_NEW);\n  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);\n  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);\n}\n', 'nl': 'Test move and rename in case source and destination exist partially and the path being renamed is a directory.'}
{'code': 'public void reset(){\n  super.reset();\n  resetStreamSettings();\n}\n', 'nl': 'Remove all settings including global settings such as <code>Locale</code>s and listeners, as well as stream settings.'}
{'code': 'public static void e(String tag,String msg,Throwable tr){\n  println(ERROR,tag,msg,tr);\n}\n', 'nl': 'Prints a message at ERROR priority.'}
{'code': 'public void paintMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the border of a menu item.'}
{'code': 'public void addPlugInSingleRowFunction(String functionName,String className,String methodName,ConfigurationPlugInSingleRowFunction.ValueCache valueCache,ConfigurationPlugInSingleRowFunction.FilterOptimizable filterOptimizable) throws ConfigurationException {\n  addPlugInSingleRowFunction(functionName,className,methodName,valueCache,filterOptimizable,false);\n}\n', 'nl': 'Add single-row function with configurations.'}
{'code': 'public void onDataActivity(int direction){\n}\n', 'nl': 'Callback invoked when data activity state changes.'}
{'code': 'public static void addQueryListener(IQueryListener l){\n  InternalSearchUI.getInstance().addQueryListener(l);\n}\n', 'nl': 'Registers the given listener to receive notification of changes to queries. The listener will be notified whenever a query has been added, removed, is starting or has finished. Has no effect if an identical listener is already registered.'}
{'code': 'public static void close(){\n  responseHeaderDB.close();\n  fileDB.close(true);\n}\n', 'nl': 'close the databases'}
{'code': 'public void updateGeoDescription(Context context,String fallbackNumber){\n  String number=TextUtils.isEmpty(phoneNumber) ? fallbackNumber : phoneNumber;\n  geoDescription=getGeoDescription(context,number);\n}\n', 'nl': "Updates this CallerInfo's geoDescription field, based on the raw phone number in the phoneNumber field. (Note that the various getCallerInfo() methods do *not* set the geoDescription automatically; you need to call this method explicitly to get it.)"}
{'code': 'public void store(Word value,Offset offset){\n}\n', 'nl': 'Stores the word value in the memory location pointed to by the current instance.'}
{'code': '@Override public void teardown(){\n}\n', 'nl': 'a noop'}
{'code': 'public void remove(XAtom atom){\n  atoms.remove(atom);\n}\n', 'nl': "Removes atom from the list. Does nothing if arrays doesn't conaint this atom."}
{'code': 'public void removeKey(K key){\n  map.remove(key);\n}\n', 'nl': 'Completely removes all values associated with a key'}
{'code': 'public void addHam(Reader stream) throws java.io.IOException {\n  addTokenOccurrences(stream,hamTokenCounts);\n  hamMessageCount++;\n}\n', 'nl': 'Adds a message to the ham list.'}
{'code': 'private void createLanesFor3WayNetwork(MutableScenario sc){\n  LaneDefinitions11 lanes=new LaneDefinitions11Impl();\n  LaneDefinitionsFactory11 fac=lanes.getFactory();\n  LanesToLinkAssignment11 l2l=fac.createLanesToLinkAssignment(Id.create(13,Link.class));\n  lanes.addLanesToLinkAssignment(l2l);\n  LaneData11 lane=fac.createLane(Id.create(1,Lane.class));\n  l2l.addLane(lane);\n  lane.addToLinkId(Id.create(32,Link.class));\n  lane=fac.createLane(Id.create(2,Lane.class));\n  l2l.addLane(lane);\n  lane.addToLinkId(Id.create(34,Link.class));\n  l2l=fac.createLanesToLinkAssignment(Id.create(23,Link.class));\n  lanes.addLanesToLinkAssignment(l2l);\n  lane=fac.createLane(Id.create(1,Lane.class));\n  l2l.addLane(lane);\n  lane.addToLinkId(Id.create(34,Link.class));\n  lane=fac.createLane(Id.create(2,Lane.class));\n  l2l.addLane(lane);\n  lane.addToLinkId(Id.create(31,Link.class));\n  l2l=fac.createLanesToLinkAssignment(Id.create(43,Link.class));\n  lanes.addLanesToLinkAssignment(l2l);\n  lane=fac.createLane(Id.create(1,Lane.class));\n  l2l.addLane(lane);\n  lane.addToLinkId(Id.create(31,Link.class));\n  lane=fac.createLane(Id.create(2,Lane.class));\n  l2l.addLane(lane);\n  lane.addToLinkId(Id.create(32,Link.class));\n  sc.addScenarioElement(Lanes.ELEMENT_NAME,LaneDefinitionsV11ToV20Conversion.convertTo20(lanes,sc.getNetwork()));\n}\n', 'nl': 'Creates lanes for the 3 way network, ids ascending from left to right'}
{'code': 'public void onPackageDisappeared(String packageName,int reason){\n}\n', 'nl': 'Called when a package disappears for any reason.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase GamlPackage.ACTION_ARGUMENTS__ARGS:\n    getArgs().clear();\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void removeConversation(String name){\n  conversations.remove(name.toLowerCase());\n}\n', 'nl': 'Removes a conversation by name'}
{'code': 'public void throwException(){\n  mv.visitInsn(Opcodes.ATHROW);\n}\n', 'nl': 'Generates the instruction to throw an exception.'}
{'code': 'public void paint(Graphics g,Rectangle bounds){\n  Color temp=g.getColor();\n  g.setColor(color);\n  g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);\n  g.setColor(temp);\n}\n', 'nl': 'Paints the background.'}
{'code': 'public void cancel(){\n  cancel=true;\n}\n', 'nl': 'Calling this method cancels the event'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase SGraphPackage.SPECIFICATION_ELEMENT__SPECIFICATION:\n    setSpecification((String)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node nameNode;\n  CharacterData child;\n  String childData;\n  doc=(Document)load("hc_staff",true);\n  elementList=doc.getElementsByTagName("strong");\n  nameNode=elementList.item(0);\n  child=(CharacterData)nameNode.getFirstChild();\n  child.appendData(", Esquire");\n  childData=child.getData();\n  assertEquals("characterdataAppendDataGetDataAssert","Margaret Martin, Esquire",childData);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public static void debug(String message){\n  StringBuffer buffer=new StringBuffer();\n  buffer.append(new Date(System.currentTimeMillis()));\n  buffer.append(" - [");\n  buffer.append(Thread.currentThread().getName());\n  buffer.append("] ");\n  buffer.append(message);\n  System.out.println(buffer.toString());\n}\n', 'nl': 'Print a debug message to the console.  Pre-pend the message with the current date and the name of the current thread.'}
{'code': 'private void requestCoffeeList(){\n  List<String> inventory=new ArrayList<String>(4);\n  inventory.add(SupportUtils.SKU_ESPRESSO);\n  inventory.add(SupportUtils.SKU_CAPPUCCINO);\n  inventory.add(SupportUtils.SKU_ICED_COFFEE);\n  inventory.add(SupportUtils.SKU_EARL_GREY);\n  mIabHelper.queryInventoryAsync(true,inventory,mQueryInventoryListener);\n}\n', 'nl': 'request asynchronously the coffee list'}
{'code': 'public void addFilter(ValueExpr theExpr){\n  mFilters.add(theExpr);\n}\n', 'nl': 'Add a Filter to this group'}
{'code': 'public void connected(){\n}\n', 'nl': 'Called when the DDM server connects.  The handler is allowed to send messages to the server.'}
{'code': 'public void testParameters() throws Exception {\n  Similarity sim=getSimilarity("text_params");\n  assertEquals(LMDirichletSimilarity.class,sim.getClass());\n  LMDirichletSimilarity lm=(LMDirichletSimilarity)sim;\n  assertEquals(1000f,lm.getMu(),0.01f);\n}\n', 'nl': 'dirichlet with parameters'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase StextPackage.TRANSITION_SPECIFICATION__REACTION:\n    setReaction((TransitionReaction)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void testRenameFileSourceMissing() throws Exception {\n  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));\n  create(igfs,null,null);\n  igfs.rename(FILE,FILE2);\n  checkExist(igfs,DIR,SUBDIR);\n  checkExist(igfs,igfsSecondary,FILE2);\n  checkNotExist(igfs,igfsSecondary,FILE);\n}\n', 'nl': "Test rename in case source doesn't exist and the path being renamed is a file."}
{'code': 'public static void dumpCursor(Cursor cursor){\n  dumpCursor(cursor,System.out);\n}\n', 'nl': 'Prints the contents of a Cursor to System.out. The position is restored after printing.'}
{'code': 'public static void addImports(final CompilationUnitRewrite rewrite,ImportRewriteContext context,final ASTNode node,final Map<Name,String> typeImports,final Map<Name,String> staticImports,final boolean declarations){\n  addImports(rewrite,context,node,typeImports,staticImports,null,declarations);\n}\n', 'nl': 'Adds the necessary imports for an AST node to the specified compilation unit.'}
{'code': '@Override public void releaseView(){\n  mView=null;\n}\n', 'nl': 'PLIReleaseView methods'}
{'code': 'public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBackground(context,g,x,y,w,h,orientation);\n}\n', 'nl': 'Paints the background of the thumb of a scrollbar. The thumb provides a graphical indication as to how much of the Component is visible in a <code>JScrollPane</code>.'}
{'code': 'public void addFatalError(String msg){\n  addFatalError(msg,null);\n}\n', 'nl': 'Adds a <code>FATAL</code> entry filled with the given message to this status. The severity of this status will changed to <code>FATAL</code>.'}
{'code': 'public void addFirst(HDR obj){\n  hlist.add(0,(HDR)obj);\n}\n', 'nl': 'Concatenate the list of stuff that we are keeping around and also the text corresponding to these structures (that we parsed).'}
{'code': 'private void prepareTestEnvironment(){\n  given().body("{\\"id\\" : \\"u1r1\\"}").put("items/user1/res1");\n  given().body("{\\"id\\" : \\"u1r2\\"}").put("items/user1/res2");\n  given().body("{\\"id\\" : \\"u2r1\\"}").put("items/user2/res1");\n  given().body("{\\"id\\" : \\"u2r2\\"}").put("items/user2/res2");\n}\n', 'nl': 'Creates some resources'}
{'code': 'private void startNotification(){\n  mNotifyManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);\n  mBuilder=new NotificationCompat.Builder(this).setContentTitle("Video Upload").setContentText("Upload in progress").setSmallIcon(android.R.drawable.stat_sys_upload).setTicker("Uploading video").setProgress(0,0,true);\n  mNotifyManager.notify(NOTIFICATION_ID,mBuilder.build());\n}\n', 'nl': 'Starts the Notification to show the progress of video upload.'}
{'code': 'public static void main(String[] args){\n  Header.printHeader(SanralPopulationConverter.class.toString(),args);\n  String inputFile=args[0];\n  String idPrefix=args[1];\n  String subPopulation=args[2];\n  Double fraction=Double.parseDouble(args[3]);\n  String outputFile=args[4];\n  String attributesFile=args[5];\n  String inputCRS=args[6];\n  String outputCRS=args[7];\n  Boolean convertDurationToEndTime=Boolean.parseBoolean(args[8]);\n  SanralPopulationConverter.Run(inputFile,idPrefix,inputCRS,subPopulation,fraction,outputFile,attributesFile,outputCRS,convertDurationToEndTime);\n  Header.printFooter();\n}\n', 'nl': 'Running the population converter.'}
{'code': 'public void idle(){\n}\n', 'nl': 'Called every <code>IDLE_INTERVAL</code> ms. while waiting for a message. Overridden to allow insertion of asynch notifications.'}
{'code': '@Deprecated public void readObject(ObjectInputStream s) throws IOException {\n}\n', 'nl': 'Reads the object stream.'}
{'code': 'public final void invert(){\n  invertGeneral(this);\n}\n', 'nl': 'Inverts this matrix in place.'}
{'code': 'public void init() throws ServletException {\n}\n', 'nl': 'Initialization of the servlet. <br>'}
{'code': 'public ColorRGBA(int r,int g,int b,int a){\n  super(new Scalar(r,g,b,a));\n}\n', 'nl': 'Instantiate a 4-channel RGBA color'}
{'code': '@BeforeMethod public void init(){\n  MockitoAnnotations.initMocks(this);\n  globalDataAccessService=new GlobalDataAccessService();\n  globalDataAccessService.platformIdentDao=platformIdentDao;\n  globalDataAccessService.agentStatusProvider=agentStatusProvider;\n  globalDataAccessService.defaultDataDao=defaultDataDao;\n  globalDataAccessService.eventPublisher=eventPublisher;\n  globalDataAccessService.log=LoggerFactory.getLogger(GlobalDataAccessService.class);\n}\n', 'nl': 'Initializes mocks. Has to run before each test so that mocks are clear.'}
{'code': 'public static void organizeDistribution(final float[] probabilities){\n  organizeDistribution(probabilities,false);\n}\n', 'nl': 'Same as organizeDistribution(probabilities,  <b>false</b>);'}
{'code': 'private void assertDownloaderManifest(DownloaderInputManifestDto expectedDownloaderInputManifest,DownloaderInputManifestDto actualDownloaderInputManifest){\n  assertEquals(expectedDownloaderInputManifest.getBusinessObjectDefinitionName(),actualDownloaderInputManifest.getBusinessObjectDefinitionName());\n  assertEquals(expectedDownloaderInputManifest.getBusinessObjectFormatUsage(),actualDownloaderInputManifest.getBusinessObjectFormatUsage());\n  assertEquals(expectedDownloaderInputManifest.getBusinessObjectFormatFileType(),actualDownloaderInputManifest.getBusinessObjectFormatFileType());\n  assertEquals(expectedDownloaderInputManifest.getBusinessObjectFormatVersion(),actualDownloaderInputManifest.getBusinessObjectFormatVersion());\n  assertEquals(expectedDownloaderInputManifest.getPartitionKey(),actualDownloaderInputManifest.getPartitionKey());\n  assertEquals(expectedDownloaderInputManifest.getPartitionValue(),actualDownloaderInputManifest.getPartitionValue());\n  assertEquals(expectedDownloaderInputManifest.getBusinessObjectDataVersion(),actualDownloaderInputManifest.getBusinessObjectDataVersion());\n}\n', 'nl': 'Validates downloader input manifest instance.'}
{'code': 'private Assert(){\n}\n', 'nl': "Don't allow construction, all methods are static."}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.174 -0500",hash_original_method="DE018C3EFE6320C8CBFF22F7586A6AFE",hash_generated_method="99D4E31A8067C1F45C3E6784449B085B") public void translateWindowLayout(WindowManager.LayoutParams params){\n  params.scale(applicationScale);\n}\n', 'nl': "Translate the window's layout parameter, from application's view to Screen's view."}
{'code': 'public void addFatalError(Message message) throws CompilationFailedException {\n  addError(message);\n  failIfErrors();\n}\n', 'nl': 'Adds a fatal exception to the message set and throws the unit as a PhaseFailedException.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList addressList;\n  Node testNode;\n  NamedNodeMap attributes;\n  Attr streetAttr;\n  String value;\n  doc=(Document)load("staff",false);\n  addressList=doc.getElementsByTagName("address");\n  testNode=addressList.item(0);\n  attributes=testNode.getAttributes();\n  streetAttr=(Attr)attributes.getNamedItem("street");\n  value=streetAttr.getNodeValue();\n  assertEquals("attrDefaultValueAssert","Yes",value);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public Configuration(final String url) throws JAXBException {\n  _dsDispatcher=new DSDispatcher();\n  _uriBuilder=new UriBuilder();\n  List<String> _matrixParamSet;\n  _matrixParamSet=_uriBuilder.addPathSegment(url);\n  _matrixParamSet=_uriBuilder.addPathSegment("system");\n  _matrixParamSet=_uriBuilder.addPathSegment("configuration");\n  _templateAndMatrixParameterValues=new HashMap<String,Object>();\n}\n', 'nl': 'Create new instance'}
{'code': '@DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.463 -0500",hash_original_method="48338BC49C4A94D5C3F73368CEF11822",hash_generated_method="40E5D56C660E674AEAC1983F06C125A3") public void putShort(String key,short value){\n  unparcel();\n  mMap.put(key,value);\n}\n', 'nl': 'Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key.'}
{'code': 'public void fireGenerateEvent(int eventType,String data){\n}\n', 'nl': 'Fire off comment and entity ref events.'}
{'code': 'public void scale(int width,int height){\n  image=Display.impl.scale(image,width,height);\n}\n', 'nl': 'Scale the image to the given width and height, this is a fast algorithm that preserves translucent information'}
{'code': '@NamespacePermissions({@NamespacePermission(fields="#request.businessObjectDataNotificationRegistrationKey.namespace",permissions=NamespacePermissionEnum.WRITE),@NamespacePermission(fields="#request.businessObjectDataNotificationFilter.namespace",permissions=NamespacePermissionEnum.READ),@NamespacePermission(fields="#request.jobActions.![namespace]",permissions=NamespacePermissionEnum.EXECUTE)}) private void mockMethod(BusinessObjectDataNotificationRegistrationCreateRequest request){\n}\n', 'nl': 'Do not invoke this method. This method is a test input for reflection related tests. The most complex case we have so far: a mock simulation of notification registration, where there are 3 different permissions on namespaces, and one of them is a collection.'}
{'code': 'public static void pushParameter(double o){\n  parametersDouble.push(o);\n}\n', 'nl': '<p> pushParameter </p>'}
{'code': 'private void openCategorySelection(){\n  CategorySelectionDialogFragment categorySelectionDialogFragment=CategorySelectionDialogFragment.newInstance(categories);\n  categorySelectionDialogFragment.show(getChildFragmentManager(),"CategorySelectionDialogFragment");\n}\n', 'nl': 'Creates and shows the category selection dialog fragment.'}
{'code': 'private void initializeInDir(int x,int y,int dir){\n  initializeHex(Coords.xInDir(x,y,dir),Coords.yInDir(x,y,dir));\n}\n', 'nl': 'Initializes a hex in a specific direction from an origin hex'}
{'code': 'public void show(StackablePath path){\n  dispatcher.dispatch(add(History.NAV_TYPE_MODAL,path));\n}\n', 'nl': 'Show one path as modal'}
{'code': '@Override public void createUntamperedRequest(){\n  CollisionDJBX33X DJBX33X=new CollisionDJBX33X();\n  String untampered=UtilHashDoS.generateUntampered(DJBX33X,optionNumberAttributes.getValue(),optionUseNamespaces.isOn());\n  String soapMessage=this.getOptionTextAreaSoapMessage().getValue();\n  String soapMessageFinal=this.getOptionTextAreaSoapMessage().replacePlaceholderWithPayload(soapMessage,untampered);\n  Map<String,String> httpHeaderMap=new HashMap<String,String>();\n  for (  Map.Entry<String,String> entry : getOriginalRequestHeaderFields().entrySet()) {\n    httpHeaderMap.put(entry.getKey(),entry.getValue());\n  }\n  this.setUntamperedRequestObject(httpHeaderMap,getOriginalRequest().getEndpoint(),soapMessageFinal);\n}\n', 'nl': 'custom untampered request needed for prevention of false positives based on effect of XML Attribute Count Attack'}
{'code': 'private void add(){\n  list.addLast(Integer.parseInt(textField.getText()));\n  displayText();\n}\n', 'nl': 'Add an integer to the end of the list'}
{'code': 'public void addAnewarray(String classname){\n  addOpcode(ANEWARRAY);\n  addIndex(constPool.addClassInfo(classname));\n}\n', 'nl': 'Appends ANEWARRAY.'}
{'code': '@Override public void onGetUserIdResponse(final GetUserIdResponse getUserIdResponse){\n  Log.v(TAG,"onGetUserIdResponse recieved: Response -" + getUserIdResponse);\n  Log.v(TAG,"RequestId:" + getUserIdResponse.getRequestId());\n  Log.v(TAG,"IdRequestStatus:" + getUserIdResponse.getUserIdRequestStatus());\n  new GetUserIdAsyncTask().execute(getUserIdResponse);\n}\n', 'nl': 'Invoked once the call from initiateGetUserIdRequest is completed. On a successful response, a response object is passed which contains the request id, request status, and the userid generated for your application.'}
{'code': 'public void test_ticket_1105_quads_update5() throws Exception {\n  new UpdateTestHelper("ticket_1105_quads_update5","ticket_1105_update5.rq","ticket_1105.trig");\n}\n', 'nl': 'Query:  <code> DELETE  { <http://example/s>  <http://example/p> <http://example/o> } WHERE { GRAPH ?g  { <http://example/s1>  <http://example/p1> <http://example/o1> }  } </code> is parsed successfully in quads mode.'}
{'code': 'public void enableChildAttach(boolean enable,int isolateId){\n  getIsolateState(isolateId).m_attachChildren=enable;\n}\n', 'nl': 'If this feature is enabled then we do not attempt to attach child variables to parents.'}
{'code': 'public void closeButtonActionPerformed(java.awt.event.ActionEvent ae){\n  dispose();\n}\n', 'nl': 'Close button action'}
{'code': 'public void columnSelectionChanged(ListSelectionEvent e){\n}\n', 'nl': "From a column's selection changing. Does nothing."}
{'code': 'public void sendEndEvaluationInstance(Stream inputStream){\n  InstanceContentEvent instanceContentEvent=new InstanceContentEvent(-1,firstInstance,false,true);\n  inputStream.put(instanceContentEvent);\n}\n', 'nl': 'Send end evaluation instance.'}
{'code': 'public void mark(int limit){\n}\n', 'nl': '<i>This operation is not supported</i>.'}
{'code': 'private void addDbMetaDataEntry(List<Map<String,String>> list,String name,String value){\n  Map<String,String> entry=new LinkedHashMap<>();\n  entry.put("propertyName",getMessageSourceAccessor().getMessage(name));\n  entry.put("propertyValue",value);\n  list.add(entry);\n}\n', 'nl': 'Adds the db meta data entry.'}
{'code': 'public void testBogusArguments() throws Exception {\n  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);\n  assertTrue(expected.getMessage().contains("Unknown parameters"));\n}\n', 'nl': 'Test that bogus arguments result in exception'}
{'code': 'public void emitDirect(int taskId,Tuple anchor,List<Object> tuple){\n  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchor,tuple);\n}\n', 'nl': 'Emits a tuple directly to the specified task id on the default stream. If the target bolt does not subscribe to this bolt using a direct grouping, the tuple will not be sent. If the specified output stream is not declared as direct, or the target bolt subscribes with a non-direct grouping, an error will occur at runtime. The emitted values must be immutable. <p> <p>The default stream must be declared as direct in the topology definition. See OutputDeclarer#declare for how this is done when defining topologies in Java.</p>'}
{'code': 'public void testPrintMessageBuilder() throws Exception {\n  String javaText=TextFormat.printToString(TestUtil.getAllSetBuilder());\n  javaText=javaText.replace(".0\\n","\\n");\n  assertEquals(allFieldsSetText,javaText);\n}\n', 'nl': 'Print TestAllTypes as Builder and compare with golden file.'}
{'code': 'public void start(@NonNull Context context,@NonNull Fragment fragment){\n  start(context,fragment,REQUEST_CROP);\n}\n', 'nl': 'Send the crop Intent from a Fragment'}
{'code': '@Override public void onClick(View v){\nswitch (v.getId()) {\ncase R.id.activity_create_widget_clock_day_week_doneButton:\n    SharedPreferences.Editor editor=getSharedPreferences(getString(R.string.sp_widget_clock_day_week_setting),MODE_PRIVATE).edit();\n  editor.putString(getString(R.string.key_location),location.location);\neditor.putBoolean(getString(R.string.key_show_card),showCardSwitch.isChecked());\neditor.putBoolean(getString(R.string.key_black_text),blackTextSwitch.isChecked());\neditor.apply();\nIntent intent=getIntent();\nBundle extras=intent.getExtras();\nint appWidgetId=0;\nif (extras != null) {\nappWidgetId=extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID,AppWidgetManager.INVALID_APPWIDGET_ID);\n}\nIntent resultValue=new Intent();\nresultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetId);\nsetResult(RESULT_OK,resultValue);\nIntent service=new Intent(this,WidgetClockDayWeekService.class);\nstartService(service);\nfinish();\nbreak;\n}\n}\n', 'nl': '<br> interface.'}
{'code': 'public void cancel(){\n  cancel=true;\n}\n', 'nl': 'Call this method to cancel drag interaction.'}
{'code': 'public void putNull(String key){\n  mValues.put(key,null);\n}\n', 'nl': 'Adds a null value to the set.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(elementsetattributens08.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void onClickPlaneta(View view){\n  Intent intent=new Intent(this,PlanetaActivity.class);\n  ActivityOptionsCompat opts=ActivityOptionsCompat.makeCustomAnimation(this,R.anim.slide_in_left,R.anim.slide_out_left);\n  ActivityCompat.startActivity(this,intent,opts.toBundle());\n}\n', 'nl': 'Demonstra uma animacao customizada de entrada e saida'}
{'code': 'private void replaceTop(Scope topOfStack){\n  stack.set(stack.size() - 1,topOfStack);\n}\n', 'nl': 'Replace the value on the top of the stack with the given value.'}
{'code': '@Override public void contextInitialized(ServletContextEvent event){\n  this.context=event.getServletContext();\n  log("contextInitialized()");\n}\n', 'nl': 'Record the fact that this web application has been initialized.'}
{'code': 'public void loadMarkdown(String txt,String cssFileUrl){\n  loadMarkdownToView(txt,cssFileUrl);\n}\n', 'nl': 'Loads the given Markdown text to the view as rich formatted HTML. The HTML output will be styled based on the given CSS file.'}
{'code': 'private ExpirationAction(String name){\n  this.name=name;\n}\n', 'nl': 'Creates a new instance of ExpirationAction.'}
{'code': 'public void resetPattern(String pattern){\n  normalize(pattern);\n}\n', 'nl': 'Resets the search pattern.'}
{'code': 'public void testResourcesAvailable(){\n  new PortugueseAnalyzer().close();\n}\n', 'nl': 'This test fails with NPE when the  stopwords file is missing in classpath'}
{'code': 'public static void error(Throwable problem){\n  _errorCallback.error(problem);\n}\n', 'nl': 'Displays the error to the user.'}
{'code': 'public void close() throws IOException {\n  mFd.close();\n}\n', 'nl': 'Convenience for calling <code>getParcelFileDescriptor().close()</code>.'}
{'code': 'public void trace(String msg){\n  innerLog(Level.TRACE,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);\n}\n', 'nl': 'Log a trace message.'}
{'code': 'public synchronized void flush(){\n  sampleHolder=new SampleHolder(SampleHolder.BUFFER_REPLACEMENT_MODE_NORMAL);\n  parsing=false;\n  result=null;\n  error=null;\n  runtimeError=null;\n}\n', 'nl': 'Flushes the helper, canceling the current parsing operation, if there is one.'}
{'code': '@Override public void mouseReleased(GlobalMouseEvent event){\n}\n', 'nl': 'Invoked when a mouse button was released.'}
{'code': '@Ignore @Test public final void testSaveWithNull(){\n  thrown.expect(ConstraintViolationException.class);\n  srv.save(null);\n}\n', 'nl': 'Test to call save with null argument.'}
{'code': 'private MigrationInfoDumper(){\n}\n', 'nl': 'Prevent instantiation.'}
{'code': 'public void unsetParamCode(){\n  this.paramCode=null;\n}\n', 'nl': 'Description: <br>'}
{'code': 'public void addListener(final IZyEditModeListener<NodeType,EdgeType> listener){\n  m_listeners.add(listener);\n}\n', 'nl': 'Adds a listener object that is notified about changes in the edit mode.'}
{'code': 'private void analize(){\n  StringTokenizer tokenizer2=new StringTokenizer(sourceData,"|");\n  String nextToken=tokenizer2.nextToken();\n  ver=nextToken.substring(1,nextToken.length() - 1);\n  StringTokenizer tokenizer=new StringTokenizer(tokenizer2.nextToken(),",");\n  nextToken=tokenizer.nextToken();\n  logDocColName=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  docColName=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  docColFmtDef=Integer.parseInt(nextToken);\n  nextToken=tokenizer.nextToken();\n  logSustColName=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  sustColName=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  sustColFmtDef=Integer.parseInt(nextToken);\n  nextToken=tokenizer.nextToken();\n  primaryColName=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  from=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  where=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  docOrderBy=nextToken.substring(1,nextToken.length() - 1);\n  nextToken=tokenizer.nextToken();\n  sustOrderBy=nextToken.substring(1,nextToken.length() - 1);\n}\n', 'nl': 'Private methods'}
{'code': 'public void logError(Object message,Throwable exception){\n  logInternal(ERROR,message,exception);\n}\n', 'nl': "Logs the given message and Throwable at the 'error' level."}
{'code': 'public void init(){\n  setCanGrabGraphic(false);\n  Debug.message("eomg","EditableOMCircle.init()");\n  setStateMachine(new CircleStateMachine(this));\n  gPoints=new GrabPoint[11];\n}\n', 'nl': 'Create and initialize the state machine that interprets the modifying gestures/commands, as well as initialize the grab points. Also allocates the grab point array needed by the EditableOMCircle.'}
{'code': '@Override public void destroy(){\n  uberRidesService=null;\n  credential=null;\n  super.destroy();\n}\n', 'nl': 'Clear the in memory credential and Uber API service once a call has ended.'}
{'code': 'private SPUIComponentProvider(){\n}\n', 'nl': 'Prevent Instance creation as utility class.'}
{'code': 'public void testRandomStrings() throws Exception {\n  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);\n}\n', 'nl': 'blast some random strings through the analyzer'}
{'code': 'public void removeAll(){\n  int i=myMaps.size();\n  myMaps.retainAll(myMaps);\n  notifyItemRangeRemoved(0,i);\n}\n', 'nl': 'remove all items'}
{'code': 'public static void addClipboardListener(final ClipboardListener l){\n  listenerList.add(l);\n}\n', 'nl': 'Add the specified clipboard listener.'}
{'code': 'private void resizeFramebufferTexture(){\n  glDeleteTextures(raytraceTexture);\n  glDeleteTextures(positionTexture);\n  glDeleteTextures(normalTexture);\n  glDeleteRenderbuffers(depthBuffer);\n  glDeleteFramebuffers(fbo);\n  createRaytracingTexture();\n  createRasterizerTextures();\n  createRasterFrameBufferObject();\n}\n', 'nl': 'Resize the framebuffer textures for both rasterization and ray tracing.'}
{'code': 'public void readMetaData(Transfer transfer) throws IOException {\n  dataType=transfer.readInt();\n  precision=transfer.readLong();\n  scale=transfer.readInt();\n  nullable=transfer.readInt();\n}\n', 'nl': 'Write the parameter meta data from the transfer object.'}
{'code': 'public void clearSelectedFeatures(){\n  selectedFeatures=new BooleanBitArray1D((int)lasFile.getNumPointRecords() + 1);\n  selectedFeatureNumbers.clear();\n  this.selectedFeatureNumber=-2;\n  this.pcs.firePropertyChange("selectedFeatureNumber",-1,selectedFeatureNumber);\n}\n', 'nl': 'Clears all of the selected features from a LAS layer.'}
{'code': '@Override public void writeToParcel(Parcel dest,int flags){\n  super.writeToParcel(dest,flags,TYPE_WCDMA);\n  mCellIdentityWcdma.writeToParcel(dest,flags);\n  mCellSignalStrengthWcdma.writeToParcel(dest,flags);\n}\n', 'nl': 'Implement the Parcelable interface'}
{'code': 'public void not(){\n  mv.visitInsn(Opcodes.ICONST_1);\n  mv.visitInsn(Opcodes.IXOR);\n}\n', 'nl': 'Generates the instructions to compute the bitwise negation of the top stack value.'}
{'code': 'public void onDrawerOpened(View drawerView){\n  super.onDrawerOpened(drawerView);\n}\n', 'nl': 'Called when a drawer has settled in a completely open state.'}
{'code': 'private void loadStringSetting(SQLiteStatement stmt,String name,int resId){\n  loadSetting(stmt,name,mContext.getResources().getString(resId));\n}\n', 'nl': 'Loads a string resource into a database table. If a conflict occurs, that value is not inserted into the database table.'}
{'code': 'public void allowNull(){\n  setIsNullAllowed(true);\n}\n', 'nl': 'PUBLIC: If <em>all</em> the fields in the database row for the aggregate object are NULL, then, by default, the mapping will place a null in the appropriate source object (as opposed to an aggregate object filled with nulls). This behavior can be explicitly set by calling #allowNull(). To change this behavior, call #dontAllowNull(). Then the mapping will build a new instance of the aggregate object that is filled with nulls and place it in the source object. In either situation, when writing, the mapping will place a NULL in all the fields in the database row for the aggregate object. Note: Any aggregate that has a relationship mapping automatically does not allow null.'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase ExpressionsPackage.BITWISE_XOR_EXPRESSION__LEFT_OPERAND:\n    setLeftOperand((Expression)newValue);\n  return;\ncase ExpressionsPackage.BITWISE_XOR_EXPRESSION__RIGHT_OPERAND:\nsetRightOperand((Expression)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'private void insert(float sample){\n  mBuffer[mBufferPointer++]=sample;\n  mBufferPointer=mBufferPointer % mBufferSize;\n}\n', 'nl': 'Inserts the sample into the circular buffer, overwriting the oldest value'}
{'code': '@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_ptr_list_fragment);\n  mPullRefreshListFragment=(PullToRefreshListFragment)getSupportFragmentManager().findFragmentById(R.id.frag_ptr_list);\n  mPullRefreshListView=mPullRefreshListFragment.getPullToRefreshListView();\n  mPullRefreshListView.setOnRefreshListener(this);\n  ListView actualListView=mPullRefreshListView.getRefreshableView();\n  mListItems=new LinkedList<String>();\n  mListItems.addAll(Arrays.asList(mStrings));\n  mAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,mListItems);\n  actualListView.setAdapter(mAdapter);\n  mPullRefreshListFragment.setListShown(true);\n}\n', 'nl': 'Called when the activity is first created.'}
{'code': 'private void moveCursorBackward(int columnsToMove){\n}\n', 'nl': "This method moves the cursor backward <i>columnsToMove</i> columns, but won't move the cursor past the left edge of the screen, nor will it move the cursor onto the previous line. This method does not cause any scrolling."}
{'code': 'public void restoreSession(){\n  board.restoreSession();\n}\n', 'nl': 'Ask to restore the game from a properties file with confirmation'}
{'code': 'public void initOptions(){\n  BROWSER.setText(URLHandlerSettings.BROWSER.getValue());\n}\n', 'nl': 'Sets the options for the fields in this <tt>PaneItem</tt> when the window is shown.'}
{'code': 'public static void logOrderState(OrderState orderState){\n  _log.debug("Status: " + orderState.m_status + " Comms Amt: "+ orderState.m_commission+ " Comms Currency: "+ orderState.m_commissionCurrency+ " Warning txt: "+ orderState.m_warningText+ " Init Margin: "+ orderState.m_initMargin+ " Maint Margin: "+ orderState.m_maintMargin+ " Min Comms: "+ orderState.m_minCommission+ " Max Comms: "+ orderState.m_maxCommission);\n}\n', 'nl': 'Method logOrderState.'}
{'code': 'private void onTrackPointStart(Attributes attributes){\n  latitude=attributes.getValue(ATTRIBUTE_LAT);\n  longitude=attributes.getValue(ATTRIBUTE_LON);\n  altitude=null;\n  time=null;\n}\n', 'nl': 'On track point start.'}
{'code': '@DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.767 -0500",hash_original_method="9056910A11B8F7E2130B8014667A5810",hash_generated_method="CEECFF6F08063F48651117F1E4FF30DE") private EncodingUtils(){\n}\n', 'nl': 'This class should not be instantiated.'}
{'code': '@DSComment("no security concern") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.172 -0500",hash_original_method="C1E29F96DEA4D8E16CD646B2E66B7808",hash_generated_method="49067DA9501AEFB1EA5D29AE5A00F09E") @Override public void close() throws IOException {\n}\n', 'nl': 'Closes this stream. This implementation closes the target stream.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.080 -0500",hash_original_method="54011F5D28450E17A088B23862CB14CB",hash_generated_method="8DBF2298F55DC953A20252E1B37D6A63") public void copyFromUnchecked(short[] d){\n  mRS.validate();\n  copy1DRangeFromUnchecked(0,mCurrentCount,d);\n}\n', 'nl': 'Copy an allocation from an array.  This variant is not type checked which allows an application to fill in structured data from an array.'}
{'code': 'public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput,ItemStack secondaryOutput,double chance){\n  addRecipe(Recipe.PRECISION_SAWMILL,new SawmillRecipe(input,primaryOutput,secondaryOutput,chance));\n}\n', 'nl': 'Add a Precision Sawmill recipe.'}
{'code': 'public void arc(double x,double y,double w,double h,double startAngle,double sweepAngle,boolean joinPath){\n  arc((float)x,(float)y,(float)w,(float)h,(float)startAngle,(float)sweepAngle,joinPath);\n}\n', 'nl': 'Draws an elliptical arc on the path given the provided bounds.'}
{'code': 'public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\'GROUP_REMOVE_DEVICE_DB\'";\n  db.execSQL(sql);\n}\n', 'nl': 'Drops the underlying database table.'}
{'code': 'public void removeSection(Section s){\n  sections.remove(s);\n  ccl.remove(s);\n}\n', 'nl': 'Removes the specified Section.'}
{'code': 'public IntegrateAndFireRulePanel(){\n  super();\n  this.add(tabbedPane);\n  tfTimeConstant=createTextField(null,null);\n  tfThreshold=createTextField(null,null);\n  tfReset=createTextField(null,null);\n  tfResistance=createTextField(null,null);\n  tfRestingPotential=createTextField(null,null);\n  tfBackgroundCurrent=createTextField(null,null);\n  mainTab.addItem("Threshold (mV)",tfThreshold);\n  mainTab.addItem("Resting potential (mV)",tfRestingPotential);\n  mainTab.addItem("Reset potential (mV)",tfReset);\n  mainTab.addItem("Resistance (M\\u03A9)",tfResistance);\n  mainTab.addItem("Background Current (nA)",tfBackgroundCurrent);\n  mainTab.addItem("Time constant (ms)",tfTimeConstant);\n  mainTab.addItem("Add noise",getAddNoise());\n  tabbedPane.add(mainTab,"Main");\n  tabbedPane.add(getNoisePanel(),"Noise");\n}\n', 'nl': 'Creates a new instance of the integrate and fire neuron panel.'}
{'code': 'public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n', 'nl': 'Adds wheel scrolling listener'}
{'code': 'public void addLast(Object o){\n  addBefore(o,header);\n}\n', 'nl': 'Appends the given element to the end of this list.  (Identical in function to the <tt>add</tt> method; included only for consistency.)'}
{'code': 'public void draw(Graphics2D g2d){\n  syncLayout();\n  gv.draw(g2d,aci);\n}\n', 'nl': 'Paints the text layout using the specified Graphics2D and rendering context.'}
{'code': 'public void load(SimState state){\n  super.load(state);\n  setupPortrayals();\n}\n', 'nl': 'Loads a game.  This is unlikely to occur.'}
{'code': 'public void addItem(Artist a){\nsynchronized (mArtists) {\n    mArtists.add(a);\n    sortList();\n  }\n}\n', 'nl': 'Adds an item to the adapter'}
{'code': 'public void close() throws IOException {\n  internalIn.close();\n}\n', 'nl': 'Closes this reader.'}
{'code': 'public void testResourcesAvailable(){\n  new JapaneseAnalyzer().close();\n}\n', 'nl': 'This test fails with NPE when the  stopwords file is missing in classpath'}
{'code': 'private ObjID(long objNum,UID space){\n  this.objNum=objNum;\n  this.space=space;\n}\n', 'nl': 'Constructs an object identifier given data read from a stream.'}
{'code': 'public void testCloseStrategy() throws Throwable {\n  RecoveryStrategy strategy=RecoveryStrategies.CLOSE;\n  CopycatClient client=mock(CopycatClient.class);\n  strategy.recover(client);\n  verify(client).close();\n}\n', 'nl': 'Tests the CLOSE recovery strategy.'}
{'code': 'public static void removeSecondaryObjective(SecondaryObjective<?> objective){\n  secondaryObjectives.remove(objective);\n}\n', 'nl': 'Remove secondary objective from list, if it is there'}
{'code': 'private void putPixel(WritableRaster raster,int x,int y,Color color){\n  raster.setPixel(x,y,new int[]{color.getRed(),color.getGreen(),color.getBlue()});\n}\n', 'nl': 'put pixel'}
{'code': 'private void showProgressPanel(){\n  m_panel.setEnabled(false);\n}\n', 'nl': 'Shows the progress panel to the user.'}
{'code': 'public final void testValidateSucceeds(){\n  IPv4AddressValidator iPv4AddressValidator=new IPv4AddressValidator("foo");\n  assertTrue(iPv4AddressValidator.validate(""));\n  assertTrue(iPv4AddressValidator.validate("1.1.1.1"));\n  assertTrue(iPv4AddressValidator.validate("255.255.255.255"));\n  assertTrue(iPv4AddressValidator.validate("192.168.1.1"));\n  assertTrue(iPv4AddressValidator.validate("10.10.1.1"));\n  assertTrue(iPv4AddressValidator.validate("132.254.111.10"));\n  assertTrue(iPv4AddressValidator.validate("26.10.2.10"));\n  assertTrue(iPv4AddressValidator.validate("127.0.0.1"));\n}\n', 'nl': 'Tests the functionality of the validate-method, if it succeeds.'}
{'code': 'public Sound(File file,SoundType type) throws IOException {\n  super(file,type);\n}\n', 'nl': 'Creates a sound property.'}
{'code': 'private void bol(){\n  column=0;\n  collectingIndent=(maxIndent != 0);\n  indent=0;\n}\n', 'nl': 'Indicates that output is at the beginning of a line.'}
{'code': 'public void addImplicit(ObjectType type){\n  add(type,false);\n}\n', 'nl': 'Add an implicit exception.'}
{'code': '@Override public void flush() throws IOException {\n  super.flush();\n}\n', 'nl': 'Flushes this stream to ensure all pending data is sent out to the target stream. This implementation then also flushes the target stream.'}
{'code': 'public void testTwoStatements() throws IOException {\n  final InputStream stream=this.getStream(R.raw.two_statements);\n  List<String> commands=SqlParser.parse(stream);\n  assertEquals(2,commands.size());\n  assertEquals(sql1,commands.get(0));\n  assertEquals(sql2,commands.get(1));\n}\n', 'nl': 'Should be able to parse a script with two multi-line statments, even if the last statement is not terminated by a semicolon.'}
{'code': 'public void memoryReallocate(long memPtr,int cap){\n  enter();\n  try {\n    PlatformCallbackUtils.memoryReallocate(envPtr,memPtr,cap);\n  }\n  finally {\n    leave();\n  }\n}\n', 'nl': 'Re-allocate external memory chunk.'}
{'code': 'public void writeTo(ChannelBuffer data){\n  super.writeTo(data);\n  data.writeByte(tableIndex);\n  data.writeByte(pad1);\n  data.writeByte(pad2);\n  data.writeByte(pad3);\n  data.writeInt(netMask);\n}\n', 'nl': 'Write the vendor data to the channel buffer'}
{'code': 'private void processMenuKeyEvent(MenuKeyEvent e){\nswitch (e.getID()) {\ncase KeyEvent.KEY_PRESSED:\n    fireMenuKeyPressed(e);\n  break;\ncase KeyEvent.KEY_RELEASED:\nfireMenuKeyReleased(e);\nbreak;\ncase KeyEvent.KEY_TYPED:\nfireMenuKeyTyped(e);\nbreak;\ndefault :\nbreak;\n}\n}\n', 'nl': 'Handles a keystroke in a menu.'}
{'code': 'public static void main(String[] args) throws Exception {\n  Http http=new Http();\n  http.setConf(NutchConfiguration.create());\n  main(http,args);\n}\n', 'nl': 'Main method.'}
{'code': 'public void addHeaderView(View v){\n  addHeaderView(v,null,true);\n}\n', 'nl': 'Add a fixed view to appear at the top of the list. If addHeaderView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. <p/> NOTE: Call this before calling setAdapter. This is so ListView can wrap the supplied cursor with one that will also account for header and footer views.'}
{'code': 'public void addStateValueAsDouble(String name,double doubleValue){\n  addStateValueAsDouble(null,name,doubleValue);\n}\n', 'nl': 'Adds a new StateObject with the specified <code>name</code> and Double <code>value</code>. The new StateObject is placed beneath the document root. If a StateObject with this name already exists, a new one is still created.'}
{'code': 'public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {\n  ObjectWritable objWrite=new ObjectWritable();\n  objWrite.set(value);\n  output.collect(key,objWrite);\n}\n', 'nl': 'Wraps all values in ObjectWritables.'}
{'code': 'public void flush() throws Exception {\n  buffer.write(result);\n  buffer.clear();\n  result.flush();\n}\n', 'nl': 'This is used to flush the writer when the XML if it has been buffered. The flush method is used by the node writer after an end element has been written. Flushing ensures that buffering does not affect the result of the node writer.'}
{'code': 'public void addTitle(Title title){\n  getTitles().add(title);\n}\n', 'nl': 'Adds a new title.'}
{'code': 'public void showSecondaryMenu(){\n  mSlidingMenu.showSecondaryMenu();\n}\n', 'nl': 'Open the SlidingMenu and show the secondary menu view. Will default to the regular menu if there is only one.'}
{'code': 'public void stressTest_multiTenancy_967() throws Exception {\n  doMultiTenancyStressTest(TimeUnit.HOURS.toMillis(1));\n}\n', 'nl': 'Runs the stress test for an hour. This is the minimum required to have confidence that the problem is not demonstrated. Multiple hour runs are better.'}
{'code': 'public static void start(){\n  assertStopped();\n  CLOCK_STATE.get().exit();\n}\n', 'nl': 'Start the clock, entering non-harness code (mutator or MMTk).'}
{'code': 'public void printTreeForHumans(final EvolutionState state,final int log){\n  printTreeForHumans(state,log,Output.V_VERBOSE);\n}\n', 'nl': "Prints out the tree in a readable Lisp-like fashion. O(n).  The default version of this method simply calls child's  printRootedTreeForHumans(...) method."}
{'code': 'public URL(String protocol,String host,int port,String file) throws MalformedURLException {\n  this(protocol,host,port,file,null);\n}\n', 'nl': "Creates a new URL of the given component parts. The URL uses the protocol's default port."}
{'code': 'public RedisQueue(final ConnectionManager connectionManager,final String name){\n  super(new RedisQueueCodec(),new CommandSyncService(connectionManager),null == name || name.trim().isEmpty() ? DEFAULT_NAME : name);\n  this.connectionManager=connectionManager;\n}\n', 'nl': 'Instantiate a new Redis-backed queue using the provided connection manager and name.'}
{'code': '@Override public void initGui(){\n  autoMaximize=WurstClient.INSTANCE.files.loadAutoMaximize();\n  buttonList.clear();\n  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 144 - 16,200,20,"Back"));\n  buttonList.add(new GuiButton(1,width / 2 - 154,height / 4 + 24 - 16,100,20,"Click Friends: " + (WurstClient.INSTANCE.options.middleClickFriends ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(2,width / 2 - 154,height / 4 + 48 - 16,100,20,"Mod List: " + modListModes[WurstClient.INSTANCE.options.modListMode]));\n  buttonList.add(new GuiButton(3,width / 2 - 154,height / 4 + 72 - 16,100,20,"AutoMaximize: " + (autoMaximize ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(4,width / 2 - 154,height / 4 + 96 - 16,100,20,"Wurst News: " + (WurstClient.INSTANCE.options.wurstNews ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(5,width / 2 - 154,height / 4 + 120 - 16,100,20,"Analytics: " + (WurstClient.INSTANCE.options.google_analytics.enabled ? "ON" : "OFF")));\n  buttonList.add(new GuiButton(6,width / 2 - 50,height / 4 + 24 - 16,100,20,"Keybinds"));\n  buttonList.add(new GuiButton(7,width / 2 - 50,height / 4 + 48 - 16,100,20,"X-Ray Blocks"));\n  buttonList.add(new GuiButton(8,width / 2 - 50,height / 4 + 72 - 16,100,20,"Zoom"));\n  buttonList.add(new GuiButton(11,width / 2 + 54,height / 4 + 24 - 16,100,20,"Wurst Website"));\n  buttonList.add(new GuiButton(12,width / 2 + 54,height / 4 + 48 - 16,100,20,"Wurst on YouTube"));\n  buttonList.add(new GuiButton(13,width / 2 + 54,height / 4 + 72 - 16,100,20,"Wurst on Twitter"));\n  buttonList.add(new GuiButton(14,width / 2 + 54,height / 4 + 96 - 16,100,20,"Report a Bug"));\n  ((GuiButton)buttonList.get(3)).enabled=!Minecraft.isRunningOnMac;\n}\n', 'nl': 'Adds the buttons (and other controls) to the screen in question.'}
{'code': 'public void resetTheme(){\n  setTheme(originalTheme);\n}\n', 'nl': 'Resets the theme to what was specified in the board file.'}
{'code': 'public void addWarning(String message){\n  warnings.add(new Warning(message));\n}\n', 'nl': 'Adds a parse warning.'}
{'code': 'public RrdGraphDefTemplate(String xmlString) throws IOException {\n  super(xmlString);\n}\n', 'nl': 'Creates template object from the string containing XML template code'}
{'code': 'public void undeploy(String name,URL apiEndpoint,String org,String space,String email,String password,String namespace){\n  CloudFoundryOperations operations=appDeployerFactory.getOperations(email,password,apiEndpoint,org,space);\n  operations.applications().delete(DeleteApplicationRequest.builder().name(name).deleteRoutes(true).build()).block(Duration.ofMinutes(5));\n  counterService.increment(String.format(METRICS_UNDEPLOYED,name));\n}\n', 'nl': 'Undeploy a module'}
{'code': 'public void edit(FieldAccess f) throws CannotCompileException {\n}\n', 'nl': 'Edits a field-access expression (overridable). Field access means both read and write. The default implementation performs nothing.'}
{'code': 'public void testEncodeZigZag() throws Exception {\n  assertEquals(0,CodedOutputStream.encodeZigZag32(0));\n  assertEquals(1,CodedOutputStream.encodeZigZag32(-1));\n  assertEquals(2,CodedOutputStream.encodeZigZag32(1));\n  assertEquals(3,CodedOutputStream.encodeZigZag32(-2));\n  assertEquals(0x7FFFFFFE,CodedOutputStream.encodeZigZag32(0x3FFFFFFF));\n  assertEquals(0x7FFFFFFF,CodedOutputStream.encodeZigZag32(0xC0000000));\n  assertEquals(0xFFFFFFFE,CodedOutputStream.encodeZigZag32(0x7FFFFFFF));\n  assertEquals(0xFFFFFFFF,CodedOutputStream.encodeZigZag32(0x80000000));\n  assertEquals(0,CodedOutputStream.encodeZigZag64(0));\n  assertEquals(1,CodedOutputStream.encodeZigZag64(-1));\n  assertEquals(2,CodedOutputStream.encodeZigZag64(1));\n  assertEquals(3,CodedOutputStream.encodeZigZag64(-2));\n  assertEquals(0x000000007FFFFFFEL,CodedOutputStream.encodeZigZag64(0x000000003FFFFFFFL));\n  assertEquals(0x000000007FFFFFFFL,CodedOutputStream.encodeZigZag64(0xFFFFFFFFC0000000L));\n  assertEquals(0x00000000FFFFFFFEL,CodedOutputStream.encodeZigZag64(0x000000007FFFFFFFL));\n  assertEquals(0x00000000FFFFFFFFL,CodedOutputStream.encodeZigZag64(0xFFFFFFFF80000000L));\n  assertEquals(0xFFFFFFFFFFFFFFFEL,CodedOutputStream.encodeZigZag64(0x7FFFFFFFFFFFFFFFL));\n  assertEquals(0xFFFFFFFFFFFFFFFFL,CodedOutputStream.encodeZigZag64(0x8000000000000000L));\n  assertEquals(0,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(0)));\n  assertEquals(1,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(1)));\n  assertEquals(-1,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(-1)));\n  assertEquals(14927,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(14927)));\n  assertEquals(-3612,CodedOutputStream.encodeZigZag32(CodedInputStream.decodeZigZag32(-3612)));\n  assertEquals(0,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(0)));\n  assertEquals(1,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(1)));\n  assertEquals(-1,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-1)));\n  assertEquals(14927,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(14927)));\n  assertEquals(-3612,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-3612)));\n  assertEquals(856912304801416L,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(856912304801416L)));\n  assertEquals(-75123905439571256L,CodedOutputStream.encodeZigZag64(CodedInputStream.decodeZigZag64(-75123905439571256L)));\n}\n', 'nl': 'Test encodeZigZag32() and encodeZigZag64().'}
{'code': 'public void appendProperty(String property,Properties src){\n  getPropertyHandler().appendProperty(property,src);\n}\n', 'nl': 'Append the given property into the current properties'}
{'code': 'public void secondLOSHex(BoardViewEvent b,Coords c){\n}\n', 'nl': 'Sent when secondLOS is set. The default behavior is to do nothing.'}
{'code': 'public void testBogusArguments() throws Exception {\n  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);\n  assertTrue(expected.getMessage().contains("Unknown parameters"));\n}\n', 'nl': 'Test that bogus arguments result in exception'}
{'code': 'public void flashTheControls(){\n  delayedHide(1000);\n}\n', 'nl': "Quickly exposes the controls so that the user knows they're there."}
{'code': 'public synchronized void incrementEdge(RVMMethod caller,int bcIndex,RVMMethod callee){\n  augmentEdge(caller,bcIndex,callee,1);\n}\n', 'nl': 'Increment the edge represented by the input parameters, creating it if it is not already in the call graph.'}
{'code': 'public SmbFile(String url,NtlmPasswordAuthentication auth) throws MalformedURLException {\n  this(new URL(null,url,Handler.SMB_HANDLER),auth);\n}\n', 'nl': 'Constructs an SmbFile representing a resource on an SMB network such as a file or directory.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase UmplePackage.ASSOCIATION_POSITION___NAME_1:\n    setName_1(NAME_1_EDEFAULT);\n  return;\ncase UmplePackage.ASSOCIATION_POSITION___COORDINATE_1:\ngetCoordinate_1().clear();\nreturn;\ncase UmplePackage.ASSOCIATION_POSITION___COORDINATE_2:\ngetCoordinate_2().clear();\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': '@Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){\n  ViewHelper.setRotationX(view,baseRotation);\n  ViewHelper.setTranslationY(view,view.getHeight() / 3);\n  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();\n}\n', 'nl': 'Lifting view'}
{'code': 'public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){\n  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);\n}\n', 'nl': 'Creates a new request.'}
{'code': 'public void readScratchData(ScratchBank bank,Callback<ScratchData> callback){\n  addCallback(BeanMessageID.BT_GET_SCRATCH,callback);\n  Buffer buffer=new Buffer();\n  buffer.writeByte(intToByte(bank.getRawValue()));\n  sendMessage(BeanMessageID.BT_GET_SCRATCH,buffer);\n}\n', 'nl': 'Request a scratch bank data value.'}
{'code': 'public TourStep(Placement placement,Widget... targets){\n  peer=StepPeer.newInstance();\n  peer.setPlacement(placement.getValue());\n  JsArrayString values=JsArrayString.createArray().cast();\n  for (  Widget el : targets) {\n    values.push(getOrCreateId(el.getElement()));\n  }\n  peer.setTarget(values);\n}\n', 'nl': 'Creates a new tour step'}
{'code': 'public void cancel(){\n  BaseProducerContext.callOnCancellationRequested(cancelNoCallbacks());\n}\n', 'nl': 'Cancels the request processing and calls appropriate callbacks.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase RegularExpressionPackage.GROUP__NON_CAPTURING:\n    setNonCapturing(NON_CAPTURING_EDEFAULT);\n  return;\ncase RegularExpressionPackage.GROUP__PATTERN:\nsetPattern((Pattern)null);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void putNull() throws IOException {\n  write(DerValue.tag_Null);\n  putLength(0);\n}\n', 'nl': 'Marshals a DER "null" value on the output stream.  These are often used to indicate optional values which have been omitted.'}
{'code': 'public void testRun(){\n  System.out.println("run");\n  Date date=new Date();\n  DateFactory mockDateFactory=createMock(DateFactory.class);\n  expect(mockDateFactory.createDate()).andReturn(date).times(8);\n  ContentDataService mockContentDataService=createMock(ContentDataService.class);\n  WebResourceDataService mockWebResourceDataService=createMock(WebResourceDataService.class);\n  Page mockPage1=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(ROOT_PAGE_URL)).andReturn(mockPage1).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage1)).andReturn(mockPage1).once();\n  Page mockPage2=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(PAGE_ACCESS_FORBIDDEN_URL)).andReturn(mockPage2).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage2)).andReturn(mockPage2).once();\n  Page mockPage3=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(ROOT_PAGE_URL)).andReturn(mockPage3).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage3)).andReturn(mockPage3).once();\n  Page mockPage4=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(PAGE_1_URL)).andReturn(mockPage4).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage4)).andReturn(mockPage4).once();\n  Page mockPage5=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(PAGE_ACCESS_FORBIDDEN_URL)).andReturn(mockPage5).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage5)).andReturn(mockPage5).once();\n  Page mockPage6=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(PAGE_1_URL)).andReturn(mockPage6).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage6)).andReturn(mockPage6).once();\n  Page mockPage7=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(PAGE_2_URL)).andReturn(mockPage7).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage7)).andReturn(mockPage7).once();\n  Page mockPage8=createMock(Page.class);\n  expect(mockWebResourceDataService.createPage(PAGE_ACCESS_FORBIDDEN_URL)).andReturn(mockPage8).once();\n  expect(mockWebResourceDataService.saveOrUpdate(mockPage8)).andReturn(mockPage8).once();\n  SSP ssp1=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,ROOT_PAGE_URL,pageMap.get(ROOT_PAGE_URL),null,HttpStatus.SC_OK)).andReturn(ssp1).once();\n  expect(ssp1.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp1.getURI()).andReturn(ROOT_PAGE_URL).once();\n  ssp1.setDOM(readFile("htmlFiles/root-page_1.html",false));\n  ssp1.setPage(mockPage1);\n  expect(mockContentDataService.saveOrUpdate(ssp1)).andReturn(ssp1).once();\n  SSP ssp2=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,PAGE_ACCESS_FORBIDDEN_URL,pageMap.get(PAGE_ACCESS_FORBIDDEN_URL),null,HttpStatus.SC_OK)).andReturn(ssp2).once();\n  expect(ssp2.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp2.getURI()).andReturn(PAGE_ACCESS_FORBIDDEN_URL).once();\n  ssp2.setDOM(readFile("htmlFiles/page-access-forbidden_1.html",false));\n  ssp2.setPage(mockPage2);\n  expect(mockContentDataService.saveOrUpdate(ssp2)).andReturn(ssp2).once();\n  SSP ssp3=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,ROOT_PAGE_URL,pageMap.get(ROOT_PAGE_URL),null,HttpStatus.SC_OK)).andReturn(ssp3).once();\n  expect(ssp3.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp3.getURI()).andReturn(ROOT_PAGE_URL).once();\n  ssp3.setDOM(readFile("htmlFiles/root-page_1.html",false));\n  ssp3.setPage(mockPage3);\n  expect(mockContentDataService.saveOrUpdate(ssp3)).andReturn(ssp3).once();\n  SSP ssp4=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,PAGE_1_URL,pageMap.get(PAGE_1_URL),null,HttpStatus.SC_OK)).andReturn(ssp4).once();\n  expect(ssp4.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp4.getURI()).andReturn(PAGE_1_URL).once();\n  ssp4.setDOM(readFile("htmlFiles/page-1_1.html",false));\n  ssp4.setPage(mockPage4);\n  expect(mockContentDataService.saveOrUpdate(ssp4)).andReturn(ssp4).once();\n  SSP ssp5=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,PAGE_ACCESS_FORBIDDEN_URL,pageMap.get(PAGE_ACCESS_FORBIDDEN_URL),null,HttpStatus.SC_OK)).andReturn(ssp5).once();\n  expect(ssp5.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp5.getURI()).andReturn(PAGE_ACCESS_FORBIDDEN_URL).once();\n  ssp5.setDOM(readFile("htmlFiles/page-access-forbidden_1.html",false));\n  ssp5.setPage(mockPage5);\n  expect(mockContentDataService.saveOrUpdate(ssp5)).andReturn(ssp5).once();\n  SSP ssp6=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,PAGE_1_URL,pageMap.get(PAGE_1_URL),null,HttpStatus.SC_OK)).andReturn(ssp6).once();\n  expect(ssp6.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp6.getURI()).andReturn(PAGE_1_URL).once();\n  ssp6.setDOM(readFile("htmlFiles/page-1_1.html",false));\n  ssp6.setPage(mockPage6);\n  expect(mockContentDataService.saveOrUpdate(ssp6)).andReturn(ssp6).once();\n  SSP ssp7=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,PAGE_2_URL,pageMap.get(PAGE_2_URL),null,HttpStatus.SC_OK)).andReturn(ssp7).once();\n  expect(ssp7.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp7.getURI()).andReturn(PAGE_2_URL).once();\n  ssp7.setDOM(readFile("htmlFiles/page-2_1.html",false));\n  ssp7.setPage(mockPage7);\n  expect(mockContentDataService.saveOrUpdate(ssp7)).andReturn(ssp7).once();\n  SSP ssp8=createMock(SSP.class);\n  expect(mockContentDataService.getSSP(date,PAGE_ACCESS_FORBIDDEN_URL,pageMap.get(PAGE_ACCESS_FORBIDDEN_URL),null,HttpStatus.SC_OK)).andReturn(ssp8).once();\n  expect(ssp8.getHttpStatusCode()).andReturn(HttpStatus.SC_OK).once();\n  expect(ssp8.getURI()).andReturn(PAGE_ACCESS_FORBIDDEN_URL).once();\n  ssp8.setDOM(readFile("htmlFiles/page-access-forbidden_1.html",false));\n  ssp8.setPage(mockPage8);\n  expect(mockContentDataService.saveOrUpdate(ssp8)).andReturn(ssp8).once();\n  Site mockSite=createMock(Site.class);\n  mockSite.addChild(mockPage1);\n  expectLastCall().once();\n  mockSite.addChild(mockPage2);\n  expectLastCall().once();\n  mockSite.addChild(mockPage3);\n  expectLastCall().once();\n  mockSite.addChild(mockPage4);\n  expectLastCall().once();\n  mockSite.addChild(mockPage5);\n  expectLastCall().once();\n  mockSite.addChild(mockPage6);\n  expectLastCall().once();\n  mockSite.addChild(mockPage7);\n  expectLastCall().once();\n  mockSite.addChild(mockPage8);\n  expectLastCall().once();\n  expect(mockSite.getURL()).andReturn(ROOT_PAGE_URL).once();\n  replay(mockPage1);\n  replay(mockPage2);\n  replay(mockPage3);\n  replay(mockPage4);\n  replay(mockPage5);\n  replay(mockPage6);\n  replay(mockPage7);\n  replay(mockPage8);\n  replay(mockSite);\n  replay(mockWebResourceDataService);\n  replay(mockDateFactory);\n  replay(mockContentDataService);\n  replay(ssp1);\n  replay(ssp2);\n  replay(ssp3);\n  replay(ssp4);\n  replay(ssp5);\n  replay(ssp6);\n  replay(ssp7);\n  replay(ssp8);\n  verify(mockPage1);\n  verify(mockPage2);\n  verify(mockPage3);\n  verify(mockPage4);\n  verify(mockPage5);\n  verify(mockPage6);\n  verify(mockPage7);\n  verify(mockPage8);\n  verify(mockSite);\n  verify(mockWebResourceDataService);\n  verify(mockDateFactory);\n  verify(mockContentDataService);\n  verify(ssp1);\n  verify(ssp2);\n  verify(ssp3);\n  verify(ssp4);\n  verify(ssp5);\n  verify(ssp6);\n  verify(ssp7);\n  verify(ssp8);\n}\n', 'nl': 'For this test, we use the pages hosted at http://site.tgqa.org/. The sequence is :  - get the page "http://site.tgqa.org/." - click on "This page won\'t be crawled due to the robots.txt restrictrion" link  - get the page "http://site.tgqa.org/page-access-forbidden-for-robots.html" - click on "Back" button - get the page "http://site.tgqa.org/." - click on "This page will be crawled" link   - get the page "http://site.tgqa.org/page-1.html" - click on "This page won\'t be crawled due to the robots.txt restrictrion" link  - get the page "http://site.tgqa.org/page-access-forbidden-for-robots.html" - click on "Back" button - get the page "http://site.tgqa.org/page-1.html" - click on "This page will be crawled" link - get the page "http://site.tgqa.org/page-2.html" - click on "This page won\'t be crawled due to the robots.txt restrictrion" link  - get the page "http://site.tgqa.org/page-access-forbidden-for-robots.html" For each retrieved page, a webResource is created and added to the  parent WebResource and a SSP is created that handles the source code of  the page. In this test, we don\'t mock the HarFileContentLoaderFactory and the ProfileFactory This test is a Functionnal test Test of run method, of class ScenarioLoaderImpl.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Element testAddr;\n  Attr addrAttr;\n  String localName;\n  doc=(Document)load("staffNS",false);\n  elementList=doc.getElementsByTagName("emp:address");\n  testAddr=(Element)elementList.item(0);\n  assertNotNull("empAddrNotNull",testAddr);\n  addrAttr=testAddr.getAttributeNode("emp:domestic");\n  localName=addrAttr.getLocalName();\n  assertEquals("localName","domestic",localName);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void testExpandingEntityReferencesOffDoesNotImpactPredefinedEntities() throws Exception {\n  String xml="<foo>abc&amp;def</foo>";\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  factory.setExpandEntityReferences(false);\n  document=factory.newDocumentBuilder().parse(new InputSource(new StringReader(xml)));\n  Element documentElement=document.getDocumentElement();\n  Text text=(Text)documentElement.getFirstChild();\n  assertEquals("abc&def",text.getTextContent());\n  assertNull(text.getNextSibling());\n}\n', 'nl': 'Predefined entities should always be expanded. https://code.google.com/p/android/issues/detail?id=225'}
{'code': 'public void invokeInterface(final Type owner,final Method method){\n  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);\n}\n', 'nl': 'Generates the instruction to invoke an interface method.'}
{'code': 'public void childrenRemoved(BeanContextMembershipEvent bcme){\n  Iterator it=bcme.iterator();\n  while (it.hasNext()) {\n    findAndUndo(it.next());\n  }\n}\n', 'nl': "BeanContextMembershipListener method. Called when a new object is removed from the BeanContext of this object. For the Layer, this method doesn't do anything. If your layer does something with the childrenAdded method, or findAndInit, you should take steps in this method to unhook the layer from the object used in those methods."}
{'code': 'public void testGetPropertyNames(){\n  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();\n  Set<String> expResult=new HashSet<>(6);\n  expResult.add(CLASS);\n  expResult.add(PROPERTY_NAMES);\n  expResult.add(STRING_PROPERTY);\n  expResult.add(INDEXED_PROPERTY);\n  expResult.add(MAPPED_STRING);\n  expResult.add(MAPPED_INDEXED);\n  Set<String> result=instance.getPropertyNames();\n  assertEquals(expResult,result);\n}\n', 'nl': 'Test of getPropertyNames method, of class UnboundBean.'}
{'code': 'public void test(String problem,String algorithm1,String algorithm2,AlgorithmFactory factory){\n  test(problem,algorithm1,algorithm2,false,factory);\n}\n', 'nl': 'Tests if two algorithms are statistically indifferent.'}
{'code': 'public synchronized void add(Date x,double y){\n  super.add(x.getTime(),y);\n}\n', 'nl': 'Adds a new value to the series.'}
{'code': '@Override public void detach(){\n  super.detach();\n  modules.getFilesModule().unbindUploadFile(rid,callback);\n}\n', 'nl': "Detach UploadFileVM from Messenger. Don't use object after detaching."}
{'code': '@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.path_animations);\n  mCanvasView=(CanvasView)findViewById(R.id.canvas);\n  mCanvasView.addOnLayoutChangeListener(this);\n  ((RadioGroup)findViewById(R.id.path_animation_type)).setOnCheckedChangeListener(this);\n}\n', 'nl': 'Called when the activity is first created.'}
{'code': 'public static void nullifyWorkDirectory(){\n  igniteWork=null;\n}\n', 'nl': 'Nullifies work directory. For test purposes only.'}
{'code': 'public MutableLong(final String value) throws NumberFormatException {\n  super();\n  this.value=Long.parseLong(value);\n}\n', 'nl': 'Constructs a new MutableLong parsing the given string.'}
{'code': 'public void exportXML(File xml) throws DataIOException, FileNotFoundException {\n  FileOutputStream xmlFos=new FileOutputStream(xml);\n  GraphMLWriter writer=new GraphMLWriter();\n  writer.writeGraph(getExportGraph(),xmlFos);\n}\n', 'nl': 'Writes the graphs XML content to the provided File.'}
{'code': 'public void receiveErrorqueryDRSMigrationCapabilityForPerformance(java.lang.Exception e){\n}\n', 'nl': 'auto generated Axis2 Error handler override this method for handling error response from queryDRSMigrationCapabilityForPerformance operation'}
{'code': 'public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  request.getSession().setAttribute("school","lyun");\n  response.sendRedirect("servlet/SchoolServlet");\n  return;\n}\n', 'nl': 'The doGet method of the servlet. <br> This method is called when a form has its tag value method equals to get.'}
{'code': 'public void testSameNodeInFromToSetCheapest(){\n  Fixture f=new Fixture();\n  TestTimeCost tc=new TestTimeCost();\n  tc.setData(Id.create(1,Link.class),2.0,2.0);\n  tc.setData(Id.create(2,Link.class),1.0,1.0);\n  tc.setData(Id.create(3,Link.class),3.0,3.0);\n  tc.setData(Id.create(4,Link.class),2.0,2.0);\n  tc.setData(Id.create(5,Link.class),1.0,1.0);\n  tc.setData(Id.create(6,Link.class),3.0,3.0);\n  tc.setData(Id.create(7,Link.class),4.0,4.0);\n  MultiNodeDijkstra dijkstra=new MultiNodeDijkstra(f.network,tc,tc);\n  Map<Node,InitialNode> fromNodes=new HashMap<Node,InitialNode>();\n  fromNodes.put(f.network.getNodes().get(Id.create(2,Node.class)),new InitialNode(2.0,2.0));\n  fromNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(1.0,1.0));\n  Map<Node,InitialNode> toNodes=new HashMap<Node,InitialNode>();\n  toNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(1.0,1.0));\n  toNodes.put(f.network.getNodes().get(Id.create(6,Node.class)),new InitialNode(3.0,3.0));\n  Path p=dijkstra.calcLeastCostPath(fromNodes,toNodes,null);\n  assertNotNull("no path found!",p);\n  assertEquals(0,p.links.size());\n  assertEquals(1,p.nodes.size());\n  assertEquals("4",p.nodes.get(0).getId().toString());\n}\n', 'nl': 'Tests that a path is found if some links are in the set of start as well as in the set of end nodes and the path only containing of this node is the cheapest.'}
{'code': 'public void forceReloadAll(){\n  fFilesToReoad.addAll(fStateMap.keySet());\n}\n', 'nl': 'Adds all the indicator files in this project to the list of files need to be reloaded.'}
{'code': 'public void prepare() throws ReplicatorException, InterruptedException {\n}\n', 'nl': 'Connect to the underlying database containing THL.'}
{'code': '@Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){\n  buildNPC(zone);\n}\n', 'nl': 'Configure a zone.'}
{'code': 'public void highlight(double x,double y,double width,double height){\n  ps.append(String.format(Locale.US,"%1.3f %1.3f %1.3f %1.3f highlight\\n",x,y,width,height));\n}\n', 'nl': 'Make red box'}
{'code': 'public static void onEventEnd(final Context context,final String event_id,final String label){\n  onEventDuration(context,event_id,label,log.onEventEnd(context,event_id,label));\n}\n', 'nl': 'End to log the duration of event'}
{'code': 'public void addTime(When time){\n  getTimes().add(time);\n}\n', 'nl': 'Adds a new event time.'}
{'code': 'public void addAddress(InetAddress address){\n  addAddress(new PeerAddress(address,params.getPort()));\n}\n', 'nl': 'Convenience method for addAddress(new PeerAddress(address, params.port));'}
{'code': 'public void schedule(Runnable command,long delay,TimeUnit unit){\n  schedule(command,delay,0,unit);\n}\n', 'nl': 'Schedules the runnable for future execution on the internal RunLoopThread.'}
{'code': 'public void testContractions() throws IOException {\n  Analyzer a=new IrishAnalyzer();\n  assertAnalyzesTo(a,"b\'fhearr m\'athair",new String[]{"fearr","athair"});\n  a.close();\n}\n', 'nl': 'test use of elisionfilter'}
{'code': '@Override public void onDestroy(){\n  super.onDestroy();\n  eventBusC.unregister(this);\n}\n', 'nl': 'Called when the controller is destroyed. This occurs when the controller is de-referenced and not retained by any objects.'}
{'code': 'public ImageBorderWizard(){\n  initComponents();\n  arcHeight.setModel(new SpinnerNumberModel(10,1,50,1));\n  arcWidth.setModel(new SpinnerNumberModel(10,1,50,1));\n  com.codename1.ui.Button btn=new com.codename1.ui.Button();\n  int bgColor=btn.getStyle().getBgColor();\n  int fgColor=btn.getStyle().getFgColor();\n  colorA.setText(Integer.toHexString(bgColor));\n  colorB.setText(Integer.toHexString(new Color(bgColor).darker().darker().getRGB() & 0xffffff));\n  colorC.setText(Integer.toHexString(fgColor));\n  colorD.setText(Integer.toHexString(new Color(fgColor).brighter().brighter().getRGB() & 0xffffff));\n  bindColorIconToButton(pickColorA,colorA);\n  bindColorIconToButton(pickColorB,colorB);\n  bindColorIconToButton(pickColorC,colorC);\n  bindColorIconToButton(pickColorD,colorD);\n  height.setModel(new SpinnerNumberModel(40,20,400,1));\n  opacity.setModel(new SpinnerNumberModel(255,0,255,1));\n  thickness.setModel(new SpinnerNumberModel(1,1,30,1));\n  width.setModel(new SpinnerNumberModel(150,20,400,1));\n  trackTextFieldChanges(colorA);\n  trackTextFieldChanges(colorB);\n  trackTextFieldChanges(colorC);\n  trackTextFieldChanges(colorD);\n  updateBorderImage();\n}\n', 'nl': 'Creates new form ImageBorderWizard'}
{'code': 'public static void storagePorts(String id){\n  VirtualArrayRestRep virtualArray=getVirtualArray(id);\n  VirtualArrayStoragePortsDataTable dataTable=new VirtualArrayStoragePortsDataTable();\n  render(virtualArray,dataTable);\n}\n', 'nl': 'Displays the storage ports page for the given virtual array.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.754 -0500",hash_original_method="EE858F66DF718641EEB790378894310A",hash_generated_method="094A33EA9471FB13E5326825C0B4619D") public void fatal(Object message){\n  log(Level.SEVERE,String.valueOf(message),null);\n}\n', 'nl': 'Logs a message with <code>java.util.logging.Level.SEVERE</code>.'}
{'code': 'public void newClass(){\n  classIndex++;\n}\n', 'nl': 'The following three methods seem to be used only to create a single     BracketStack object and initialize its classes field.                 '}
{'code': 'public void visitBaseType(char descriptor){\n}\n', 'nl': 'Visits a signature corresponding to a primitive type.'}
{'code': 'public synchronized void animatePanAbs(double dx,double dy,long duration){\n  m_transact.pan(dx,dy,duration);\n}\n', 'nl': 'Animate a pan along the specified distance in absolute (item-space) co-ordinates using the provided duration.'}
{'code': 'public void processThrownExceptions(TryStatement tryStatement,BlockScope scope){\n  this.thrownExceptions=new SimpleSet();\n  this.exceptionsStack=new Stack();\n  this.caughtExceptions=new SimpleSet();\n  this.discouragedExceptions=new SimpleSet();\n  tryStatement.traverse(this,scope);\n  removeCaughtExceptions(tryStatement,true);\n}\n', 'nl': 'Finds the thrown exceptions minus the ones that are already caught in previous catch blocks. Exception is already caught even if its super type is being caught. Also computes, separately, a list comprising of (a)those exceptions that have been caught already and (b)those exceptions that are thrown by the method and whose super type has been caught already.'}
{'code': 'public void startDelete(String key) throws AmazonClientException, AmazonServiceException {\n  super.startDelete(awsS3BucketName,key);\n}\n', 'nl': 'Deletes the specified object in the specified bucket'}
{'code': 'public void severe(String msg,Throwable thrown){\n  log(Level.SEVERE,thrown,msg,thrown);\n}\n', 'nl': 'Log a SEVERE message. <p> If the logger is currently enabled for the SEVERE message level then the given message is forwarded to all the registered output Handler objects.'}
{'code': 'public void detachStructure(){\n  processOperation(new DetachOperation());\n}\n', 'nl': 'Detaches all xml elements'}
{'code': 'public static void simulatedJoystick(int id,SimulatedJoystick stick){\n  joysticks[id]=stick;\n}\n', 'nl': 'Register a Simulated Joystick on the Data class'}
{'code': 'private void populateDataDomainAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){\n  accessProfile.setSystemId(providerInfo.getId());\n  accessProfile.setSystemClazz(providerInfo.getClass());\n  accessProfile.setIpAddress(providerInfo.getIPAddress());\n  accessProfile.setUserName(providerInfo.getUserName());\n  accessProfile.setPassword(providerInfo.getPassword());\n  accessProfile.setSystemType(DiscoveredDataObject.Type.datadomain.name());\n  accessProfile.setPortNumber(providerInfo.getPortNumber());\n}\n', 'nl': 'inject details needed for Scanning'}
{'code': 'public void paintRadioButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the background of a radio button.'}
{'code': 'private void addToken(int tokenType){\n  addToken(zzStartRead,zzMarkedPos - 1,tokenType);\n}\n', 'nl': 'Adds the token specified to the current linked list of tokens.'}
{'code': 'public static void showFormattedMessage(String messageKey,Object... args){\n  _callback.showFormattedMessage(messageKey,args);\n}\n', 'nl': 'Shows a locale-specific formatted message to the user using the specified key to look up the message in the resource bundles.'}
{'code': 'public void reloadDocument(String URI){\n  reloadDocument(loadDocument(URI));\n}\n', 'nl': 'Reloads the document using the same base URL and namespace handler. Reloading will pick up changes to styles within the document.'}
{'code': 'public void add(Object o){\nsynchronized (_queue) {\n    _queue.addElement(o);\n    _queue.notify();\n  }\n}\n', 'nl': 'Adds an Object to the end of the Queue.'}
{'code': 'public void ancestorRemoved(final AncestorEvent event){\n}\n', 'nl': "If the JRootPane was removed from the window we should clear the screen menu bar. That's a non-trivial problem, because you need to know which window the JRootPane was in before it was removed.  By the time ancestorRemoved was called, the JRootPane has already been removed"}
{'code': 'public static void printSummary(PrintStream out){\n  printSummary(out,null);\n  printErrorSummary(out);\n}\n', 'nl': 'Print the statistics report to specified stream'}
{'code': '@BeforeClass public static void beforeClass(){\n  dbLogic=new DbLogicImpermanent();\n  dbLogic.createTestDb();\n  dbLogic.setIdGenerator(new SequentialIdGenerator());\n}\n', 'nl': 'JUnit runs this before any tests in the class are run. This class uses a sequential ID generator so that IDs are deterministic. This is can also be helpful for interactive debugging.'}
{'code': 'public void lock(boolean waitForBackup){\n  super.lock();\n  while (isBackingUp && waitForBackup && !(Thread.currentThread() == backupThread)) {\n    backupDone.awaitUninterruptibly();\n  }\n}\n', 'nl': 'Acquire this lock, Optionally waiting for a backup to finish the first phase. Any operations that update metadata related to the distributed system state should pass true for this flag, because we need to make sure we get a point in time snapshot of the init files across members to for metadata consistentency. Updates which update only record changes to the local state on this member(eg, switching oplogs), do not need to wait for the backup.'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE:\n    setKeyType((PropertyType)newValue);\n  return;\ncase DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE:\nsetValueType((PropertyType)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void testProvidesChecksum(){\n  Em18RfidProtocol instance=new Em18RfidProtocol();\n  assertEquals(true,instance.providesChecksum());\n}\n', 'nl': 'Test of providesChecksum method, of class Em18RfidProtocol.'}
{'code': 'public static void init(int logLevel,Printer... printers){\n  init(logLevel,new LogConfiguration.Builder().build(),printers);\n}\n', 'nl': 'Initialize log system, should be called only once.'}
{'code': 'public ReadOnlyTextIcon(final PdfObject form,final int iconRot,final PdfObjectReader pdfObjectReader,final PdfObject res){\n  super(iconRot);\n  this.form=form;\n  currentpdffile=pdfObjectReader;\n  resources=res;\n}\n', 'nl': 'new code to store the data to create the image when needed to the size needed offset = if 0 no change, 1 offset image, 2 invert image <br> NOTE if decipherAppObject ios not called this will cause problems.'}
{'code': 'public void dispose(){\n  mBlue=null;\n  super.dispose();\n}\n', 'nl': 'Remove references to and from this object, so that it can eventually be garbage-collected.'}
{'code': 'public CompletionWeight(final CompletionQuery query,final Automaton automaton) throws IOException {\n  super(query);\n  this.completionQuery=query;\n  this.automaton=automaton;\n}\n', 'nl': 'Creates a weight for <code>query</code> with an <code>automaton</code>, using the <code>reader</code> for index stats'}
{'code': '@Transactional(readOnly=true) public static Result list(String filter){\n  List<TodoItem> todos;\nswitch (filter) {\ncase "open":\ncase "done":\n    todos=TodoService.findByCompleted("done".equals(filter));\n  break;\ncase "all":\ndefault :\ntodos=TodoService.findAll();\n}\nreturn ok(todolist.render(filter,todos));\n}\n', 'nl': 'Gets the to-do list, filtered by the completion status (all, open and done).'}
{'code': 'public void background(float x,float y,float z){\n  g.background(x,y,z);\n}\n', 'nl': 'Set the background to an r, g, b or h, s, b value, based on the current colorMode.'}
{'code': 'public void close() throws IOException {\n}\n', 'nl': 'Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt>IOException</tt>.'}
{'code': 'public void internalRunning() throws Exception {\n  endpoint.openClient();\n  started=true;\n  DiscoveryRunnable runnable=new DiscoveryRunnable();\n  runnable.run();\n}\n', 'nl': 'This will start the DiscoveryRunnable and run it directly. This is useful for a test process where we need this execution blocking a thread.'}
{'code': 'private ServiceLib(){\n}\n', 'nl': 'Prevent construction.'}
{'code': 'public HubToIntervalFramers(String sourceGroup,ISource source,Action action) throws AdeException {\n  m_sourceGroup=sourceGroup;\n  m_source=source;\n  m_action=action;\n  initIntervalFramers();\n}\n', 'nl': 'Construct a new HubToIntervalFramers.'}
{'code': 'private void deleteWorkFlowMatrixObject(final HashMap workflowsearchparams){\n  this.workFlowMatrixService.deleteWorkFlowforObject(workflowsearchparams);\n}\n', 'nl': 'This method deletes the workflow matrix object'}
{'code': 'public void clearTable(){\n  super.clearTable();\n}\n', 'nl': 'Clears the table and converts the download button into a wish list button.'}
{'code': 'public void addListener(INotifyChangedListener notifyChangedListener){\n  changeNotifier.addListener(notifyChangedListener);\n}\n', 'nl': 'This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void addKdContainer(int index,double dist){\n  KdistanceContainer container=new KdistanceContainer(this);\n  container.setDistance(dist);\n  this.listOfkDContainers.add(index,container);\n}\n', 'nl': 'Adds a new KdContainer to the SearchObject at index in the container list and also sets the distance value of the container to dist.'}
{'code': 'public static void decimal(TextField campo){\n  campo.lengthProperty().addListener(null);\n}\n', 'nl': 'Digitar apenas numeros e decimais com ponto(.) no campo de texto passado'}
{'code': 'public void cancel(){\n  MsgManager.getInstance().clearMsg(this);\n}\n', 'nl': "Close the view if it's showing, or don't show it if it isn't showing yet. You do not normally have to call this.  Normally view will disappear on its own after the appropriate duration."}
{'code': 'public void clearRect(int x,int y,int width,int height){\n  Rectangle2D.Float rect=new Rectangle2D.Float(x,y,width,height);\n  addDrawingRect(rect);\n  mPrintMetrics.clear(this);\n}\n', 'nl': 'Clears the specified rectangle by filling it with the background color of the current drawing surface. This operation does not use the current paint mode. <p> Beginning with Java&nbsp;1.1, the background color of offscreen images may be system dependent. Applications should use <code>setColor</code> followed by <code>fillRect</code> to ensure that an offscreen image is cleared to a specific color.'}
{'code': '@Override public void onViewCreated(View view,Bundle savedInstanceState){\n  super.onViewCreated(view,savedInstanceState);\n  ensureList();\n}\n', 'nl': 'Attach to list view once the view hierarchy has been created.'}
{'code': 'public void writeUint64(long n){\n  check(8);\n  buffer[write_pos++]=(byte)((n & 0x00ff00000000000000L) >> 56);\n  buffer[write_pos++]=(byte)((n & 0x00ff000000000000L) >> 48);\n  buffer[write_pos++]=(byte)((n & 0x00ff0000000000L) >> 40);\n  buffer[write_pos++]=(byte)((n & 0x00ff00000000L) >> 32);\n  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);\n  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);\n  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);\n  buffer[write_pos++]=(byte)(n & 0x00ff);\n}\n', 'nl': 'Writes Uint64 value'}