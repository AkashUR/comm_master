{'code': 'public ClientHello(SecureRandom sr,byte[] version,byte[] ses_id,CipherSuite[] cipher_suite){\n  client_version=version;\n  long gmt_unix_time=System.currentTimeMillis() / 1000;\n  sr.nextBytes(random);\n  random[0]=(byte)(gmt_unix_time & 0xFF000000 >>> 24);\n  random[1]=(byte)(gmt_unix_time & 0xFF0000 >>> 16);\n  random[2]=(byte)(gmt_unix_time & 0xFF00 >>> 8);\n  random[3]=(byte)(gmt_unix_time & 0xFF);\n  session_id=ses_id;\n  this.cipher_suites=cipher_suite;\n  compression_methods=new byte[]{0};\n  length=38 + session_id.length + (this.cipher_suites.length << 1)+ compression_methods.length;\n}\n', 'nl': 'Creates outbound message'}
{'code': 'public void go(OutputStream out) throws IOException {\n  buildPage().write(out);\n}\n', 'nl': 'Writes the hCards to an output stream.'}
{'code': "public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {\n  jg.writeRaw(':');\n}\n", 'nl': 'Method called after an object field has been output, but before the value is output. <p> Default handling will just output a single colon to separate the two, without additional spaces.'}
{'code': '@Override public void shutdown(){\n  super.shutdown();\n  disconnect();\n}\n', 'nl': 'Stop sensing.'}
{'code': 'public final void lazySet(long newValue){\n  unsafe.putOrderedLong(this,valueOffset,newValue);\n}\n', 'nl': 'Eventually sets to the given value.'}
{'code': 'public void testContinuousMode() throws Throwable {\n  processTest(CONTINUOUS);\n}\n', 'nl': 'Test GridDeploymentMode.CONTINUOUS mode.'}
{'code': 'public void repaint(){\n}\n', 'nl': 'Overriden to do nothing and remove a performance issue where renderer changes perform needless repaint calls'}
{'code': 'public void addConf(String s){\n  conf.add(s);\n}\n', 'nl': 'Add realm-specific krb5.conf setting'}
{'code': 'public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBackground(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the background of the window containing the tool bar when it has been detached from its primary frame.'}
{'code': 'public void testDoCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor(){\n  LOGGER.debug("doCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor");\n  elements.add(element);\n  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");\n  mockTestSolutionHandler.addTestSolution(TestSolution.NEED_MORE_INFO);\n  expectLastCall().once();\n  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("test"));\n  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.NEED_MORE_INFO,element,DETECTION_MSG,null);\n  expectLastCall().once();\n  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,TestSolution.NEED_MORE_INFO,DETECTION_MSG);\n  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);\n  instance.setProcessRemarkService(mockProcessRemarkService);\n  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);\n  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);\n  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService,mockProcessRemarkService);\n}\n', 'nl': 'Test of doCheck method, of class TextBelongsToBlackListChecker.'}
{'code': 'public static void saveX509Cert(Certificate cert,File certFile) throws GeneralSecurityException, IOException {\n  saveX509Cert(new Certificate[]{cert},certFile);\n}\n', 'nl': 'Save a certificate to a file. Remove all the content in the file if there is any before.'}
{'code': 'public void compileSingleFiles(List<File> projectRoots,List<File> modelFiles) throws N4JSCompileException {\n  compileSingleFiles(projectRoots,modelFiles,new DismissingIssueAcceptor());\n}\n', 'nl': 'Compile multiple Files'}
{'code': 'public void testCsiX(){\n  withTerminalSized(13,2).enterString("abcdefghijkl\\b\\b\\b\\b\\b\\033[X").assertLinesAre("abcdefg ijkl ","             ");\n  withTerminalSized(13,2).enterString("abcdefghijkl\\b\\b\\b\\b\\b\\033[1X").assertLinesAre("abcdefg ijkl ","             ");\n  withTerminalSized(13,2).enterString("abcdefghijkl\\b\\b\\b\\b\\b\\033[2X").assertLinesAre("abcdefg  jkl ","             ");\n  withTerminalSized(13,2).enterString("abcdefghijkl\\b\\b\\b\\b\\b\\033[20X").assertLinesAre("abcdefg      ","             ");\n}\n', 'nl': 'CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).'}
{'code': 'private PostgreSQLGuacamoleProperties(){\n}\n', 'nl': 'This class should not be instantiated.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(documentimportnode11.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void testGetters3(){\n  LayoutBuilder b=builder().setIncludePad(true).setWidth(50);\n  FontMetricsInt fmi=b.paint.getFontMetricsInt();\n  Layout l=b.build();\n  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent,fmi.ascent,fmi.bottom);\n}\n', 'nl': 'Basic test showing effect of includePad = true wrapping to 2 lines. Ascent of top line and descent of bottom line are affected.'}
{'code': 'public void startCDATA() throws org.xml.sax.SAXException {\n  m_cdataStartCalled=true;\n}\n', 'nl': 'Report the start of a CDATA section.'}
{'code': '@DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.036 -0500",hash_original_method="35C4B35D5036F5DD5E458797A063F760",hash_generated_method="06BDD6176671442A00DBFA1F4DCB3855") private void nativeNotifyAnimationStarted(int nativeClass){\n  addTaint(nativeClass);\n}\n', 'nl': 'Notify webkit that animations have begun (on the hardware accelerated content)'}
{'code': 'public void copyFrom(ParameterProperty other){\n  this.bits=other.bits;\n}\n', 'nl': 'Make this object the same as the given one.'}
{'code': 'public void assertSame(Object expected,Object actual,String errorMessage){\n  TestUtils.assertSame(expected,actual,errorMessage);\n}\n', 'nl': 'This method just invokes the test utils method, it is here for convenience'}
{'code': 'public void snippetResin3xLocalDeploy() throws Exception {\n  InstalledLocalContainer container=new Resin3xInstalledLocalContainer(new Resin3xStandaloneLocalConfiguration("target/myresin3x"));\n  container.setHome("c:/apps/resin-3.0.18");\n  container.start();\n  Deployable war=new WAR("path/to/simple.war");\n  Deployer deployer=new ResinInstalledLocalDeployer(container);\n  deployer.deploy(war);\n  deployer.deploy(war,new URLDeployableMonitor(new URL("http://server:port/some/url")));\n  container.stop();\n}\n', 'nl': 'Snippet for local deployment on a Resin 3.x container.'}
{'code': 'public static void sendRefusal(InternalDistributedMember recipient,int processorId,DM dm){\n  Assert.assertTrue(recipient != null,"ManageBackupBucketReplyMessage NULL reply message");\n  ManageBackupBucketReplyMessage m=new ManageBackupBucketReplyMessage(processorId,false,false);\n  m.setRecipient(recipient);\n  dm.putOutgoing(m);\n}\n', 'nl': 'Refuse the request to manage the bucket'}
{'code': 'public SpringWriteTemplate(TransactionManager transactionManager) throws Exception {\n  setTransactionManager(transactionManager);\n  afterPropertiesSet();\n}\n', 'nl': 'Create a new SpringWriteTemplate instance.'}
{'code': 'public void testLotsOfBindings() throws Exception {\n  doTestLotsOfBindings(Byte.MAX_VALUE - 1);\n  doTestLotsOfBindings(Byte.MAX_VALUE);\n  doTestLotsOfBindings(Byte.MAX_VALUE + 1);\n}\n', 'nl': 'tests huge amounts of variables in the expression'}
{'code': 'public void doTestEntityExpiration() throws Exception {\n  IDeviceListener mockListener=createMock(IDeviceListener.class);\n  expect(mockListener.getName()).andReturn("mockListener").anyTimes();\n  expect(mockListener.isCallbackOrderingPostreq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();\n  expect(mockListener.isCallbackOrderingPrereq((String)anyObject(),(String)anyObject())).andReturn(false).atLeastOnce();\n  ITopologyService mockTopology=createMock(ITopologyService.class);\n  expect(mockTopology.isAttachmentPointPort(DatapathId.of(anyLong()),OFPort.of(anyShort()))).andReturn(true).anyTimes();\n  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(1L),OFPort.of(1))).andReturn(false).anyTimes();\n  expect(mockTopology.isBroadcastDomainPort(DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();\n  expect(mockTopology.getL2DomainId(DatapathId.of(1L))).andReturn(DatapathId.of(1L)).anyTimes();\n  expect(mockTopology.getL2DomainId(DatapathId.of(5L))).andReturn(DatapathId.of(5L)).anyTimes();\n  expect(mockTopology.isConsistent(DatapathId.of(1L),OFPort.of(1),DatapathId.of(5L),OFPort.of(1))).andReturn(false).anyTimes();\n  Date topologyUpdateTime=new Date();\n  expect(mockTopology.getLastUpdateTime()).andReturn(topologyUpdateTime).anyTimes();\n  replay(mockTopology);\n  deviceManager.topology=mockTopology;\n  Calendar c=Calendar.getInstance();\n  Entity entity1=new Entity(MacAddress.of(1L),null,IPv4Address.of(2),DatapathId.of(1L),OFPort.of(1),c.getTime());\n  c.add(Calendar.MILLISECOND,-DeviceManagerImpl.ENTITY_TIMEOUT - 1);\n  Entity entity2=new Entity(MacAddress.of(1L),null,IPv4Address.of(1),DatapathId.of(5L),OFPort.of(1),c.getTime());\n  deviceManager.learnDeviceByEntity(entity1);\n  IDevice d=deviceManager.learnDeviceByEntity(entity2);\n  assertArrayEquals(new IPv4Address[]{IPv4Address.of(1),IPv4Address.of(2)},d.getIPv4Addresses());\n  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());\n  Iterator<? extends IDevice> diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(1),null,null);\n  assertTrue(diter.hasNext());\n  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());\n  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(2),null,null);\n  assertTrue(diter.hasNext());\n  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());\n  replay(mockListener);\n  deviceManager.addListener(mockListener);\n  verify(mockListener);\n  reset(mockListener);\n  mockListener.deviceIPV4AddrChanged(isA(IDevice.class));\n  replay(mockListener);\n  deviceManager.entityCleanupTask.reschedule(0,null);\n  d=deviceManager.getDevice(d.getDeviceKey());\n  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());\n  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());\n  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(2),null,null);\n  assertTrue(diter.hasNext());\n  assertEquals(d.getDeviceKey(),diter.next().getDeviceKey());\n  diter=deviceManager.queryClassDevices(d.getEntityClass(),null,null,IPv4Address.of(1),null,null);\n  assertFalse(diter.hasNext());\n  d=deviceManager.findDevice(MacAddress.of(1L),null,null,null,null);\n  assertArrayEquals(new IPv4Address[]{IPv4Address.of(2)},d.getIPv4Addresses());\n  assertArrayEquals(new SwitchPort[]{new SwitchPort(DatapathId.of(1L),OFPort.of(1)),new SwitchPort(DatapathId.of(5L),OFPort.of(1))},d.getAttachmentPoints());\n  verify(mockListener);\n}\n', 'nl': 'Note: Entity expiration does not result in device moved notification.'}
{'code': '@Override public void dragExit(DragSourceEvent dsde){\n}\n', 'nl': 'as the hotspot exits a platform dependent drop site'}
{'code': 'public DefaultLmlParser(final LmlData data,final LmlSyntax syntax,final LmlTemplateReader templateReader,final LmlStyleSheet styleSheet,final boolean strict){\n  super(data,syntax,templateReader,styleSheet,strict);\n}\n', 'nl': 'Creates a new strict parser with custom syntax, reader, style sheet and strict setting.'}
{'code': 'public static void registerSerDeser(Class<?> clazz,EntitySerDeser<?> entitySerDeser){\n  _serDeserMap.put(clazz,entitySerDeser);\n}\n', 'nl': 'User can register their own field SerDeser'}
{'code': 'public void load(){\n}\n', 'nl': 'Force a load if it makes sense for the group.'}
{'code': 'public void onAsyncTaskCompleted(){\n  removeDialog(DIALOG_PROGRESS_ID);\n  setResult(RESULT_OK);\n  finish();\n}\n', 'nl': 'Invokes when the associated AsyncTask completes.'}
{'code': 'public static void safeIncr(String counterName){\n  com.twitter.heron.api.metric.GlobalMetrics.safeIncr(counterName);\n}\n', 'nl': 'Thread safe created increment of counterName. (Slow)'}
{'code': 'public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n', 'nl': 'Proceed to the next available ring color. This will automatically wrap back to the beginning of colors.'}
{'code': 'public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");\n  Sender sender=(Sender)context.getBean("sender");\n  String text=request.getParameter("text");\n  sender.send(text);\n  response.encodeRedirectUrl("/index.jsp");\n  System.out.println("send....");\n}\n', 'nl': 'The doPost method of the servlet. <br> This method is called when a form has its tag value method equals to post.'}
{'code': 'public void clear(){\n  map.clear();\n}\n', 'nl': 'Removes all elements from the mapping of this Bundle.'}
{'code': '@Override public void exportGroupDelete(URI export,String opId) throws ControllerException {\n  blockRMI("exportGroupDelete",export,opId);\n}\n', 'nl': 'Delete the export.'}
{'code': 'public final void swap(int first,int second){\n  E in=get(first);\n  set(first,get(second));\n  set(second,in);\n}\n', 'nl': 'Swaps two elements in the vector.'}
{'code': 'private void removeEntries(){\n  table.clear();\n}\n', 'nl': 'Remove all entries from map'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase N4JSPackage.IDENTIFIER_REF__STRICT_MODE:\n    setStrictMode((Boolean)newValue);\n  return;\ncase N4JSPackage.IDENTIFIER_REF__ID:\nsetId((IdentifiableElement)newValue);\nreturn;\ncase N4JSPackage.IDENTIFIER_REF__ID_AS_TEXT:\nsetIdAsText((String)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': '@Override public void flush(){\n}\n', 'nl': 'Does nothing.'}
{'code': 'public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the border of an internal frame.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase UmplePackage.IMMUTABLE___IMMUTABLE_1:\n    setImmutable_1(IMMUTABLE_1_EDEFAULT);\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void register(Property predicate,SPINFunctionDriver driver){\n  drivers.put(predicate,driver);\n}\n', 'nl': 'Registers a new SPINFunctionDriver for a given key predicate. For example, SPARQLMotion functions are recognized via sm:body. Any previous entry will be overwritten.'}
{'code': 'public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n{\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n', 'nl': 'Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures.'}
{'code': '@Override public void handlePut(Operation op){\n  super.setState(op,op.getBody(EchoServiceState.class));\n  op.complete();\n}\n', 'nl': 'Replaces entire state with the request body.'}
{'code': 'public static void loadRootUserDataCacheOnStart(){\n  EFLogger.debug("loadRootUserDataCacheOnStart");\n  users.put("root",UserData.restoreFromESData("root",rootPassword,"/*"));\n}\n', 'nl': 'load authentication info when ES instance starts'}
{'code': 'public void cleanTemplate(Integer ID){\n  cleanTemplate("" + ID);\n}\n', 'nl': 'Clean Template cache for this ID'}
{'code': 'private void testGaussianDistribution(double mu,double sigma,DescriptiveStatistics statistics){\n  Assert.assertEquals(mu,statistics.getMean(),TestThresholds.STATISTICS_EPS);\n  Assert.assertEquals(sigma * sigma,statistics.getVariance(),TestThresholds.STATISTICS_EPS);\n  Assert.assertEquals(0.0,statistics.getSkewness(),TestThresholds.STATISTICS_EPS);\n  Assert.assertEquals(0.0,statistics.getKurtosis(),TestThresholds.STATISTICS_EPS);\n}\n', 'nl': 'Asserts that the statistical distribution satisfies the properties of a Gaussian distribution with the specified mean and standard deviation.'}
{'code': 'public void post(Object event){\n  post(event,EventType.DEFAULT_TAG);\n}\n', 'nl': 'post a event'}
{'code': 'public void flushFileContent(String mimeType,String charset,String fileName,String fileContent) throws IOException {\n  generateFileContent(mimeType,charset,fileName,fileContent);\n  this.response.flushBuffer();\n}\n', 'nl': 'Flushes the response as a file.'}
{'code': 'public AtomicIntChunks(final long length){\n  this(length,CHUNK_BITS);\n}\n', 'nl': 'Constructs an index by splitting into array chunks.'}
{'code': 'public void sortArray(T[] d,Comparator<T> c){\n  this.data=d;\n  this.comp=c;\n  int len=Math.max((int)(100 * Math.log(d.length)),TEMP_SIZE);\n  len=Math.min(d.length,len);\n  @SuppressWarnings("unchecked") T[] t=(T[])new Object[len];\n  this.temp=t;\n  mergeSort(0,d.length - 1);\n}\n', 'nl': 'Sort an array using the given comparator.'}
{'code': 'public UnicodeReader(InputStream in) throws IOException {\n  this(in,null);\n}\n', 'nl': 'Creates a reader using the encoding specified by the BOM in the file; if there is no recognized BOM, then a system default encoding is used.'}
{'code': 'public void put(String key,Integer value){\n  mValues.put(key,value);\n}\n', 'nl': 'Adds a value to the set.'}
{'code': 'public void incFunctionExecutionsCompleted(){\n  this._stats.incInt(_functionExecutionsCompletedId,1);\n}\n', 'nl': 'Increments the "FunctionExecutionsCompleted" stat.'}
{'code': 'public void drawCube(){\n  GLES20.glUseProgram(cubeProgram);\n  GLES20.glUniform3fv(cubeLightPosParam,1,lightPosInEyeSpace,0);\n  GLES20.glUniformMatrix4fv(cubeModelParam,1,false,modelCube,0);\n  GLES20.glUniformMatrix4fv(cubeModelViewParam,1,false,modelView,0);\n  GLES20.glVertexAttribPointer(cubePositionParam,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,0,cubeVertices);\n  GLES20.glUniformMatrix4fv(cubeModelViewProjectionParam,1,false,modelViewProjection,0);\n  GLES20.glVertexAttribPointer(cubeNormalParam,3,GLES20.GL_FLOAT,false,0,cubeNormals);\n  GLES20.glVertexAttribPointer(cubeColorParam,4,GLES20.GL_FLOAT,false,0,isLookingAtObject() ? cubeFoundColors : cubeColors);\n  GLES20.glDrawArrays(GLES20.GL_TRIANGLES,0,36);\n  checkGLError("Drawing cube");\n}\n', 'nl': "Draw the cube. <p>We've set all of our transformation matrices. Now we simply pass them into the shader."}
{'code': 'public void testProperties() throws Exception {\n  ReplicatorCapabilities caps1=new ReplicatorCapabilities();\n  TungstenProperties cprops=caps1.asProperties();\n  ReplicatorCapabilities caps2=new ReplicatorCapabilities(cprops);\n  testEquality(caps1,caps2);\n  caps1=new ReplicatorCapabilities();\n  caps1.addRole("master");\n  caps1.addRole("slave");\n  caps1.setConsistencyCheck(true);\n  caps1.setFlush(true);\n  caps1.setHeartbeat(true);\n  caps1.setProvisionDriver(ReplicatorCapabilities.PROVISION_DONOR);\n  caps1.setModel(ReplicatorCapabilities.MODEL_PEER);\n  cprops=caps1.asProperties();\n  caps2=new ReplicatorCapabilities(cprops);\n  testEquality(caps1,caps2);\n}\n', 'nl': 'Tests round trip storage in properties.'}
{'code': 'private void zInternalSetDateTextField(String text){\n  skipTextFieldChangedFunctionWhileTrue=true;\n  dateTextField.setText(text);\n  skipTextFieldChangedFunctionWhileTrue=false;\n  zEventTextFieldChanged();\n}\n', 'nl': 'zInternalSetDateTextField, This is called whenever we need to programmatically change the date text field. The purpose of this function is to make sure that text field change events only occur once per programmatic text change, instead of occurring twice. The default behavior is that the text change event will fire twice. (By default, it changes once to clear the text, and changes once to change it to new text.)'}
{'code': 'public void reset(ActionMapping mapping,HttpServletRequest request){\n  super.reset(mapping,request);\n  niveles=new String[0];\n}\n', 'nl': 'Inicia el formulario.'}
{'code': 'public void connectToTangoCamera(Tango tango,int cameraId){\n  mRenderer.connectCamera(tango,cameraId);\n}\n', 'nl': 'Gets a textureId from a valid OpenGL Context through Rajawali and connects it to the TangoRajawaliView. Use OnFrameAvailable events or updateTexture calls to update the view with the latest camera data. Only the RGB and fisheye cameras are currently supported.'}
{'code': 'public void printMap(HashMap<String,HashMap<String,HashSet<Integer>>> map){\n  map.forEach(null);\n}\n', 'nl': 'Depub method which write the filter "value" map to std::out'}
{'code': 'public SizedTextField(final int columns,final Dimension dim){\n  super(columns);\n  setPreferredSize(dim);\n  setMaximumSize(dim);\n}\n', 'nl': 'Creates a <tt>JTextField</tt> with a standard size and with the  specified number of columns and the specified <tt>Dimension</tt>..'}
{'code': '@Override public void clear(){\n  stackTop=0;\n}\n', 'nl': 'clear the stack'}
{'code': 'public void reset(){\n  offset=0;\n}\n', 'nl': 'Reset the buffer (clears the offset of the next byte to be written to zero).'}
{'code': 'public void traceInstructions(boolean enable){\n  return;\n}\n', 'nl': 'Turns the output of debug information for instructions on or off.'}
{'code': 'public void reset(){\n  startTime_ns=System.nanoTime();\n  totalPktCnt=0;\n  totalProcTimeNs=0;\n  avgTotalProcTimeNs=0;\n  sumSquaredProcTimeNs2=0;\n  maxTotalProcTimeNs=Long.MIN_VALUE;\n  minTotalProcTimeNs=Long.MAX_VALUE;\n  sigmaTotalProcTimeNs=0;\n  for (  OneComponentTime oct : compStats.values()) {\n    oct.resetAllCounters();\n  }\n}\n', 'nl': 'Resets all counters and counters for each component time'}
{'code': '@OnClose public void onClose(Session session){\n  openSessions.remove(session.getId());\n  callInternal("onClose",session,null);\n}\n', 'nl': 'On close handler'}
{'code': '@Interruptible public static void initializeHeader(BootImageInterface bootImage,Address ref,TIB tib,int size,boolean isScalar){\n  byte status=Selected.Plan.get().setBuildTimeGCByte(ref,ObjectReference.fromObject(tib),size);\n  JavaHeader.writeAvailableByte(bootImage,ref,status);\n}\n', 'nl': "Override the boot-time initialization method here, so that the core MMTk code doesn't need to know about the BootImageInterface type."}
{'code': 'public synchronized void clear(){\n  listeners=emptyArray;\n}\n', 'nl': 'Removes all listeners from this list.'}
{'code': 'public void addItemLabel(final JLabel label,final JComponent item){\n  GridBagConstraints labelConstraints=new GridBagConstraints();\n  labelConstraints.gridx=0;\n  labelConstraints.gridy=myNextItemRow;\n  labelConstraints.insets=new Insets(10,10,0,0);\n  labelConstraints.anchor=GridBagConstraints.NORTHEAST;\n  labelConstraints.fill=GridBagConstraints.NONE;\n  add(label,labelConstraints);\n  GridBagConstraints itemConstraints=new GridBagConstraints();\n  itemConstraints.gridx=1;\n  itemConstraints.gridy=myNextItemRow;\n  itemConstraints.insets=new Insets(10,10,0,10);\n  itemConstraints.weightx=1.0;\n  itemConstraints.anchor=GridBagConstraints.WEST;\n  itemConstraints.fill=GridBagConstraints.HORIZONTAL;\n  add(item,itemConstraints);\n  myNextItemRow++;\n}\n', 'nl': 'Modification of addItem which takes a label, rather than text, as an argument.'}
{'code': 'private void log(LogLevel eventLevel,String message,Object param){\nswitch (eventLevel) {\ncase TRACE:\n    logger.trace(message,param);\n  return;\ncase DEBUG:\nlogger.debug(message,param);\nreturn;\ncase INFO:\nlogger.info(message,param);\nreturn;\ncase WARN:\nlogger.warn(message,param);\nreturn;\ncase ERROR:\nlogger.error(message,param);\nreturn;\ndefault :\nreturn;\n}\n}\n', 'nl': 'Log if the logger and the current event log level are compatible. We log a formated message and its parameters.'}
{'code': 'public void invokeAndBlock(Runnable r){\n  invokeAndBlock(r,false);\n}\n', 'nl': 'Invokes runnable and blocks the current thread, if the current thread is the EDT it will still be blocked in a way that doesn\'t break event dispatch . <b>Important:</b> calling this method spawns a new thread that shouldn\'t access the UI!<br /> See <a href="https://www.codenameone.com/manual/edt.html#_invoke_and_block"> this section</a> in the developer guide for further information.'}
{'code': '@SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase UmplePackage.POSITION___ASSOCIATION_POSITION_1:\n    getAssociationPosition_1().clear();\n  getAssociationPosition_1().addAll((Collection<? extends AssociationPosition_>)newValue);\nreturn;\ncase UmplePackage.POSITION___ELEMENT_POSITION_1:\ngetElementPosition_1().clear();\ngetElementPosition_1().addAll((Collection<? extends ElementPosition_>)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase MappingPackage.FAULT_SOURCE__PROPERTY:\n    setProperty((Property)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void add(final ConversationStates[] states,final String trigger,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action){\n  for (  final ConversationStates state : states) {\n    add(state,trigger,condition,nextState,reply,action);\n  }\n}\n', 'nl': 'Adds a new set of transitions to the FSM.'}
{'code': 'public void clear(String className){\n  rawCFGs.remove(className);\n  actualCFGs.remove(className);\n  controlDependencies.remove(className);\n}\n', 'nl': '<p> clear </p>'}
{'code': 'public ApplicationUtil(String token) throws LoginException {\n  api=new JDAImpl(false,false,false);\n  api.verifyToken(token);\n}\n', 'nl': 'Creates a new instance of the ApplicationUtil class. This requires login-information of the person owning the application(s). <b>Do not use login-information of a account you use as bot here.</b>'}
{'code': 'public void refresh(){\n  validate();\n  repaint();\n}\n', 'nl': 'validates and repaints the frame'}
{'code': 'public void cleanUp(){\n  cleanUpStatics(this.sender);\n}\n', 'nl': "This method does the cleanup of any threads, sockets, connection that are held up by the queue. Note that this cleanup doesn't clean the data held by the queue."}
{'code': 'public void triggerUpdateOnStartup(){\n  mTriggerUpdate=true;\n}\n', 'nl': 'Trigger update programmtically'}
{'code': 'private BufferedImageHelper(){\n}\n', 'nl': 'This class has only static methods, so there is no need to construct anything.'}
{'code': 'public void add(String re,Object ret) throws REException {\n  add(re,ret,false);\n}\n', 'nl': 'Add a regular expression to the pool of regular expressions.'}
{'code': 'public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n', 'nl': 'Enters a new lexical state'}
{'code': 'public void parse(String filename) throws IOException {\n  parse(new InputSource(filename));\n}\n', 'nl': 'Parses a hyphenation pattern file.'}
{'code': 'public void openPlayer(View view){\n  Intent intent=new Intent(this,URLMediaPlayerActivity.class);\n  intent.putExtra(AUDIO_URL,"https://dl.dropboxusercontent.com/u/2763264/RSS%20MP3%20Player/prova1.mp3");\n  intent.putExtra(IMG_URL,"https://dl.dropboxusercontent.com/u/2763264/RSS%20MP3%20Player/img3.jpg");\n  startActivity(intent);\n}\n', 'nl': 'open player '}
{'code': 'public void addRow(Sensor sensor){\n  data.add(sensor);\n}\n', 'nl': 'Add a row.'}
{'code': 'public void updateCalorie(double calorie){\n  tripStatistics.setCalorie(calorie);\n  currentSegment.setCalorie(0);\n}\n', 'nl': 'Updates the calorie value;'}
{'code': 'public void writeGraphics(Vector list,SColor lineColor,SColor fillColor) throws IOException {\n  SRect sr=new SRect(new LLPoint((float)y,(float)x),(short)-1,(short)-1,(short)1,(short)1);\n  sr.color(lineColor);\n  sr.fillColor(fillColor);\n  list.addElement(sr);\n}\n', 'nl': 'Generates OMGraphics and adds them to the given list.'}
{'code': '@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n}\n', 'nl': 'Initialize instance variables with data from bundle'}
{'code': 'public void updateWriteStats(OFMessage ofm){\nswitch (ofm.getType()) {\ncase BARRIER_REPLY:\n    ctrWriteBarrierReply.increment();\n  break;\ncase BARRIER_REQUEST:\nctrWriteBarrierRequest.increment();\nbreak;\ncase ECHO_REPLY:\nctrWriteEchoReply.increment();\nbreak;\ncase ECHO_REQUEST:\nctrWriteEchoRequest.increment();\nbreak;\ncase ERROR:\nctrWriteError.increment();\nbreak;\ncase EXPERIMENTER:\nctrWriteExperimenter.increment();\nbreak;\ncase FEATURES_REPLY:\nctrWriteFeaturesReply.increment();\nbreak;\ncase FEATURES_REQUEST:\nctrWriteFeaturesRequest.increment();\nbreak;\ncase FLOW_MOD:\nctrWriteFlowMod.increment();\nbreak;\ncase FLOW_REMOVED:\nctrWriteFlowRemoved.increment();\nbreak;\ncase GET_ASYNC_REPLY:\nctrWriteGetAsyncReply.increment();\nbreak;\ncase GET_ASYNC_REQUEST:\nctrWriteGetAsyncRequest.increment();\nbreak;\ncase GET_CONFIG_REPLY:\nctrWriteGetConfigReply.increment();\nbreak;\ncase GET_CONFIG_REQUEST:\nctrWriteGetConfigRequest.increment();\nbreak;\ncase GROUP_MOD:\nctrWriteGroupMod.increment();\nbreak;\ncase HELLO:\nctrWriteHello.increment();\nbreak;\ncase METER_MOD:\nctrWriteMeterMod.increment();\nbreak;\ncase PACKET_IN:\nctrWritePacketIn.increment();\nbreak;\ncase PACKET_OUT:\nctrWritePacketOut.increment();\nbreak;\ncase PORT_MOD:\nctrWritePortMod.increment();\nbreak;\ncase PORT_STATUS:\nctrWritePortStatus.increment();\nbreak;\ncase QUEUE_GET_CONFIG_REPLY:\nctrWriteQueueGetConfigReply.increment();\nbreak;\ncase QUEUE_GET_CONFIG_REQUEST:\nctrWriteQueueGetConfigRequest.increment();\nbreak;\ncase ROLE_REPLY:\nctrWriteRoleReply.increment();\nbreak;\ncase ROLE_REQUEST:\nctrWriteRoleRequest.increment();\nbreak;\ncase SET_ASYNC:\nctrWriteSetAsync.increment();\nbreak;\ncase SET_CONFIG:\nctrWriteSetConfig.increment();\nbreak;\ncase STATS_REPLY:\nctrWriteStatsReply.increment();\nbreak;\ncase STATS_REQUEST:\nctrWriteStatsRequest.increment();\nbreak;\ncase TABLE_MOD:\nctrWriteTableMod.increment();\nbreak;\ncase BUNDLE_ADD_MESSAGE:\nctrWriteBundleAdd.increment();\nbreak;\ncase BUNDLE_CONTROL:\nctrWriteBundleControl.increment();\nbreak;\ncase REQUESTFORWARD:\nctrWriteRequestForward.increment();\nbreak;\ncase ROLE_STATUS:\nctrWriteRoleStatus.increment();\nbreak;\ncase TABLE_STATUS:\nctrWriteTableStatus.increment();\nbreak;\ndefault :\nlogger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");\nbreak;\n}\n}\n', 'nl': 'Update Write Counters for Open flow messages'}
{'code': 'public void initializeLogging(){\n  LogWrapper logWrapper=new LogWrapper();\n  Log.setLogNode(logWrapper);\n  Log.i(TAG,"Ready");\n}\n', 'nl': 'Set up targets to receive log data'}
{'code': 'public static void add(final ArrayList objects){\n  copiedObjects=objects;\n  fireClipboardChanged();\n}\n', 'nl': 'Add objects to the clipboard.  This happens with cut and copy.'}
{'code': 'public String paramString(){\n  String typeStr;\nswitch (id) {\ncase INVOCATION_DEFAULT:\n    typeStr="INVOCATION_DEFAULT";\n  break;\ndefault :\ntypeStr="unknown type";\n}\nreturn typeStr + ",runnable=" + runnable+ ",notifier="+ notifier+ ",catchExceptions="+ catchExceptions+ ",when="+ when;\n}\n', 'nl': 'Returns a parameter string identifying this event. This method is useful for event-logging and for debugging.'}
{'code': 'public void close(){\n}\n', 'nl': 'Closes this class path.'}
{'code': 'public static <NodeType extends IGraphNode<NodeType> & ISelectableNode>void selectSuccessorsOfSelection(final ISelectableGraph<NodeType> graph){\n  graph.selectNodes(getSuccessorsOfSelection(graph),true);\n}\n', 'nl': 'Selects all successors of the selected nodes.'}
{'code': 'public void clearListeners(){\n  listeners=new ArrayList<T>();\n}\n', 'nl': 'Clear all listeners'}
{'code': 'public void encode(DerOutputStream out) throws IOException {\n  out.putInteger(serialNum);\n}\n', 'nl': 'Encode the SerialNumber in DER form to the stream.'}
{'code': 'public void testWithoutAlt() throws Exception {\n  expectThrows(Exception.class,null);\n}\n', 'nl': 'Benchmark should fail loading the algorithm when alt is not specified'}
{'code': '@Autowired public AccountsController(AccountRepository accountRepository){\n  this.accountRepository=accountRepository;\n  logger.info("AccountRepository says system has " + accountRepository.countAccounts() + " accounts");\n}\n', 'nl': 'Create an instance plugging in the respository of Accounts.'}
{'code': 'public Entry(final String clazz,final String subclazz,final boolean blocked){\n  this.clazz=clazz;\n  this.subclazz=subclazz;\n  this.blocked=blocked;\n}\n', 'nl': 'Create a criteria entry.'}
{'code': 'private void traceOperation(String s){\n}\n', 'nl': 'Trace the operation. Tracing is disabled by default.'}
{'code': 'public static void print(Closure self,Object value){\n  Object owner=getClosureOwner(self);\n  InvokerHelper.invokeMethod(owner,"print",new Object[]{value});\n}\n', 'nl': 'Print a value to the standard output stream. This method delegates to the owner to execute the method.'}
{'code': '@Override public void delete(){\n  ResourceAssignmentCollectionImpl.this.deleteAssignment(getResource());\n  myAssignmentToResource.delete();\n}\n', 'nl': 'Deletes all the assignments and all the related assignments'}
{'code': 'private DeviceScannerFactory(){\n}\n', 'nl': 'Creates a new instance of DeviceScannerFactory'}
{'code': '@Override public void serialize(OFMatch match,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {\n  jGen.writeStartObject();\n  jGen.writeStringField("dataLayerDestination",HexString.toHexString(match.getDataLayerDestination()));\n  jGen.writeStringField("dataLayerSource",HexString.toHexString(match.getDataLayerSource()));\n  String dataType=Integer.toHexString(match.getDataLayerType());\n  while (dataType.length() < 4) {\n    dataType="0".concat(dataType);\n  }\n  jGen.writeStringField("dataLayerType","0x" + dataType);\n  jGen.writeNumberField("dataLayerVirtualLan",match.getDataLayerVirtualLan());\n  jGen.writeNumberField("dataLayerVirtualLanPriorityCodePoint",match.getDataLayerVirtualLanPriorityCodePoint());\n  jGen.writeNumberField("inputPort",match.getInputPort());\n  jGen.writeStringField("networkDestination",intToIp(match.getNetworkDestination()));\n  jGen.writeNumberField("networkDestinationMaskLen",match.getNetworkDestinationMaskLen());\n  jGen.writeNumberField("networkProtocol",match.getNetworkProtocol());\n  jGen.writeStringField("networkSource",intToIp(match.getNetworkSource()));\n  jGen.writeNumberField("networkSourceMaskLen",match.getNetworkSourceMaskLen());\n  jGen.writeNumberField("networkTypeOfService",match.getNetworkTypeOfService());\n  jGen.writeNumberField("transportDestination",match.getTransportDestination());\n  jGen.writeNumberField("transportSource",match.getTransportSource());\n  jGen.writeNumberField("wildcards",match.getWildcards());\n  jGen.writeEndObject();\n}\n', 'nl': 'Performs the serialization of a OFMatch object'}
{'code': 'public static void sendBroadcast(Context mContext){\n  mContext.sendBroadcast(mScrobbleDroidIntent);\n}\n', 'nl': 'Fires the broadcast intent that connects to Scrobble Droid.'}
{'code': 'public static void print(Object x){\n  out.print(x);\n  out.flush();\n}\n', 'nl': 'Prints an object to standard output and flushes standard output.'}
{'code': 'public void savePoiTag(PoiTypeTag poiTypeTag){\n  bus.post(new InternalSavePoiTagEvent(poiTypeTag));\n}\n', 'nl': 'Create or edit a poi type tag.'}
{'code': 'public ParallelTaskBuilder(){\n  super();\n  logger.info("Initialized task builder with default config");\n}\n', 'nl': 'Instantiates a new parallel task builder.'}
{'code': 'public void removeLeafListener(ActionListener l){\n  leafListener.removeListener(l);\n}\n', 'nl': 'Removes the listener that fires when a leaf is clicked'}
{'code': 'public StateData(Object parent,Object region,S state,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){\n  this(parent,region,state,deferred,entryActions,exitActions,false);\n}\n', 'nl': 'Instantiates a new state data.'}
{'code': 'private IgniteNodeAttributes(){\n}\n', 'nl': 'Enforces singleton.'}
{'code': 'public void stop(BundleContext context) throws Exception {\n  CodenvyAPI.setClient(previous);\n}\n', 'nl': 'Called when this bundle is stopped so the Framework can perform the bundle-specific activities necessary to stop the bundle. In general, this method should undo the work that the <code>BundleActivator.start</code> method started. There should be no active threads that were started by this bundle when this bundle returns. A stopped bundle must not call any Framework objects. <p/> <p/> This method must complete and return to its caller in a timely manner.'}
{'code': 'private void reset(){\n  mLayoutTabs=null;\n  mAnimatedTab=null;\n  mClosedTab=null;\n}\n', 'nl': 'Resets the internal state.'}
{'code': 'public void createContainer(){\n  hierarchicalContainer=new HierarchicalContainer();\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTIVE_HIDDEN,String.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_FORCED,Action.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID_HIDDEN,Long.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID,String.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_DIST,String.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_DATETIME,String.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_STATUS_HIDDEN,Action.Status.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_MSGS_HIDDEN,List.class,null);\n  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ROLLOUT_NAME,String.class,null);\n}\n', 'nl': 'Create a empty HierarchicalContainer.'}
{'code': 'public void add(Component componentToAdd,String id,double percentX,double percentY,double percentWidth,double percentHeight){\n  add(componentToAdd);\n  mosaicPaneListeners.componentAdded(componentToAdd,id,percentX,percentY,percentWidth,percentHeight);\n}\n', 'nl': 'Called to add an object to be laid out, to the layout engine.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_documentcreateattribute.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void addResourceBundle(ResourceBundle bundle){\n  bundles.add(bundle);\n}\n', 'nl': 'This method extends this resource bundle with the properties set by the given bundle. If those properties are already contained, they will be ignored.'}
{'code': 'private DualPivotQuicksort(){\n}\n', 'nl': 'Prevents instantiation.'}
{'code': 'public static void checkHitsQuery(Query query,ScoreDoc[] hits1,ScoreDoc[] hits2,int[] results){\n  checkDocIds("hits1",results,hits1);\n  checkDocIds("hits2",results,hits2);\n  checkEqual(query,hits1,hits2);\n}\n', 'nl': 'Tests that two queries have an expected order of documents, and that the two queries have the same score values.'}
{'code': 'public void resizeFrame(JComponent f,int newX,int newY,int newWidth,int newHeight){\n  setBoundsForFrame(ghostPanel,newX,newY,newWidth,newHeight);\n}\n', 'nl': 'resizeFrame() -'}
{'code': 'public void connect() throws IOException {\n  connect(null,null);\n}\n', 'nl': 'Initiate drone connection procedure.'}
{'code': '@Override public final void write(byte[] source,int offset,int len){\n  this.size+=len;\n}\n', 'nl': "override OutputStream's write()"}
{'code': '@Override public void onDragEnd(DragEndEvent event){\n  log("onDragEnd: " + event,RED);\n}\n', 'nl': 'Log the drag end event.'}
{'code': 'public void technicalServiceChanged(ValueChangeEvent event){\n  Long newServiceKey=(Long)event.getNewValue();\n  techServiceBean.setSelectedTechnicalServiceKeyWithExceptionAndRefresh(newServiceKey.longValue());\n  supplierIdToAdd=null;\n  suppliersForTechnicalService=null;\n}\n', 'nl': 'Called by the value changed listener of the technical service selectionOneMenu.'}
{'code': 'public Type3Message(byte[] material) throws IOException {\n  parse(material);\n}\n', 'nl': 'Creates a Type-3 message using the given raw Type-3 material.'}
{'code': 'final public void enable_tracing(){\n}\n', 'nl': 'Enable tracing.'}
{'code': 'public void init(CredentialInfo info,APIAccessCallBack apiAccessCallBack,Context context){\n  IdentityProxy.clientID=info.getClientID();\n  IdentityProxy.clientSecret=info.getClientSecret();\n  this.apiAccessCallBack=apiAccessCallBack;\n  this.context=context;\n  SharedPreferences mainPref=context.getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);\n  Editor editor=mainPref.edit();\n  editor.putString(Constants.CLIENT_ID,clientID);\n  editor.putString(Constants.CLIENT_SECRET,clientSecret);\n  editor.putString(Constants.TOKEN_ENDPOINT,info.getTokenEndPoint());\n  editor.commit();\n  setAccessTokenURL(info.getTokenEndPoint());\n  AccessTokenHandler accessTokenHandler=new AccessTokenHandler(info,this);\n  accessTokenHandler.obtainAccessToken();\n}\n', 'nl': 'Initializing the IDP plugin and obrtaining the access token.'}
{'code': '@ReactMethod public void showPopupMenu(int reactTag,ReadableArray items,Callback error,Callback success){\n  assertViewExists(reactTag,"showPopupMenu");\n  mOperationsQueue.enqueueShowPopupMenu(reactTag,items,error,success);\n}\n', 'nl': 'Show a PopupMenu.'}
{'code': 'public static void addFileDependencyCondition(ParameterType parameter,ParameterHandler parameterHandler,PortProvider portProvider){\n  parameter.registerDependencyCondition(new PortConnectedCondition(parameterHandler,portProvider,true,false));\n}\n', 'nl': 'Adds a new (file-)OutputPortNotConnectedCondition for a given parameter.'}
{'code': 'public DbManagerOps(MBeanServerConnection mbsc) throws IOException, MalformedObjectNameException {\n  initMbean(mbsc);\n}\n', 'nl': "Create an DbManagerOps object using given MBeanServerConnection. The connection is built outside of this object's control."}
{'code': 'public void testSharedMode() throws Exception {\n  processSharedModeTest(DeploymentMode.SHARED);\n}\n', 'nl': 'Test GridDeploymentMode.SHARED mode.'}
{'code': 'public void testCreateIdForEAR() throws Exception {\n  EAR ear=createEAR();\n  String name=deployer.createIdForDeployable(ear);\n  assertEquals("cargo.war",name);\n}\n', 'nl': 'Test EAR identifier creation.'}
{'code': 'public void fillInNotifierBundle(Bundle bundleToFill){\n  bundleToFill.putInt("baseStationId",this.mBaseStationId);\n  bundleToFill.putInt("baseStationLatitude",this.mBaseStationLatitude);\n  bundleToFill.putInt("baseStationLongitude",this.mBaseStationLongitude);\n  bundleToFill.putInt("systemId",this.mSystemId);\n  bundleToFill.putInt("networkId",this.mNetworkId);\n}\n', 'nl': 'Fill the cell location data into the intent notifier Bundle based on service state'}
{'code': 'public void writeFormatted(Geometry geometry,Writer writer) throws IOException {\n  writeFormatted(geometry,true,writer);\n}\n', 'nl': 'Same as <code>write</code>, but with newlines and spaces to make the well-known text more readable.'}
{'code': 'public NegativeResponseException(int commandStatus){\n  super("Negative response " + IntUtil.toHexString(commandStatus) + " found");\n  this.commandStatus=commandStatus;\n}\n', 'nl': 'Construct with specified command_status.'}
{'code': 'public void putAsString(String key,double value){\n  String strValue=Double.toString(value);\n  super.put(key,strValue);\n}\n', 'nl': "<p> Adds the given <code>double</code> value as a string version to the <code>Job</code>'s data map. </p>"}
{'code': 'public void initView(Context context,EditableImage editableImage){\n  this.editableImage=editableImage;\n  selectionView=new SelectionView(context,lineWidth,cornerWidth,cornerLength,lineColor,cornerColor,shadowColor,editableImage);\n  imageView=new ImageView(context);\n  imageView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));\n  selectionView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));\n  addView(imageView,0);\n  addView(selectionView,1);\n}\n', 'nl': 'update view with editable image'}
{'code': 'private void logWarning(String msg,Throwable e){\n  EnvironmentStream.logStderr(msg,e);\n}\n', 'nl': 'error messages from the log itself'}
{'code': 'public void updateCheckout(final Checkout checkout,final Callback<Checkout> callback){\n  buyClient.updateCheckout(checkout,wrapCheckoutCallback(callback));\n}\n', 'nl': 'Update a checkout.'}
{'code': 'public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table user_groups'}
{'code': 'public static void unregisterFieldPrefix(final String prefix){\n  fieldPrefixes.remove(prefix);\n}\n', 'nl': 'If a prefix is no longer needed unregister it here.'}
{'code': 'public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n', 'nl': 'Enters a new lexical state'}
{'code': 'public static void generateCallerPathDiagrams(){\n  MySafeDelegator.generateCallerPathDiagrams();\n}\n', 'nl': 'Generates caller path diagram into default (<tt>mysafe-caller-path</tt>) file.'}
{'code': '@DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.195 -0400",hash_original_method="3154661078E59224754D0E69E10DDFB6",hash_generated_method="37574DF2C28BFC93DF4FFF3E9C9847C8") public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {\n  writeLines(file,null,lines,lineEnding,false);\n}\n', 'nl': 'Writes the <code>toString()</code> value of each item in a collection to the specified <code>File</code> line by line. The default VM encoding and the specified line ending will be used.'}
{'code': '@Override public void editingStopped(ChangeEvent e){\n  getModel().setValueAt(getCellEditor().getCellEditorValue(),getEditingRow(),getEditingColumn());\n}\n', 'nl': "This is needed in order to allow auto completition: Otherwise the editor will be immediately removed after setting the first selected value and loosing its focus. This way it is ensured that the editor won't be removed."}
{'code': 'private void initH2Console(ServletContext servletContext){\n  log.debug("Initialize H2 console");\n  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());\n  h2ConsoleServlet.addMapping("/h2-console/*");\n  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");\n  h2ConsoleServlet.setLoadOnStartup(1);\n}\n', 'nl': 'Initializes H2 console'}
{'code': 'public void writeByte(byte b,boolean append){\n  writeByteArray(new byte[]{b},append);\n}\n', 'nl': 'Write a text in a binary File'}
{'code': 'public static void organizeDistribution(final Object[] objs,final RandomChoiceChooserD chooser){\n  organizeDistribution(objs,chooser,false);\n}\n', 'nl': 'Same as organizeDistribution(objs, chooser, <b>false</b>);'}
{'code': '@Override public void afterLoad(TermsEnum termsEnum,long actualUsed){\n  assert termsEnum instanceof RamAccountingTermsEnum;\n  long estimatedBytes=((RamAccountingTermsEnum)termsEnum).getTotalBytes();\n  breaker.addWithoutBreaking(-(estimatedBytes - actualUsed));\n}\n', 'nl': 'Adjusts the breaker based on the difference between the actual usage and the aggregated estimations.'}
{'code': 'public void addToStackIgnoreList(String line){\n  addToList(stackIgnoreList,line);\n}\n', 'nl': 'Adds the specified line to the list of classes that we should filter out of reporting results if the deserialization event occurred with the specified class in the current  call stack.  For example, to help ignore if serialization is happening through memcache.'}
{'code': 'public void not(){\n  mv.visitInsn(Opcodes.ICONST_1);\n  mv.visitInsn(Opcodes.IXOR);\n}\n', 'nl': 'Generates the instructions to compute the bitwise negation of the top stack value.'}
{'code': 'public void update(Graphics g){\n  paint(g);\n}\n', 'nl': 'Calls <code>paint(g)</code>.  This method was overridden to prevent an unnecessary call to clear the background.'}
{'code': 'public void addSubject(Subject subject){\n  getSubjects().add(subject);\n}\n', 'nl': 'Adds a new subject.'}
{'code': 'public static void main(String[] args){\n  new SuperHeroExample().run();\n}\n', 'nl': 'Main method that runs the example.'}
{'code': 'public void fillInNotifierBundle(Bundle m){\n  m.putInt("GsmSignalStrength",mGsmSignalStrength);\n  m.putInt("GsmBitErrorRate",mGsmBitErrorRate);\n  m.putInt("CdmaDbm",mCdmaDbm);\n  m.putInt("CdmaEcio",mCdmaEcio);\n  m.putInt("EvdoDbm",mEvdoDbm);\n  m.putInt("EvdoEcio",mEvdoEcio);\n  m.putInt("EvdoSnr",mEvdoSnr);\n  m.putInt("LteSignalStrength",mLteSignalStrength);\n  m.putInt("LteRsrp",mLteRsrp);\n  m.putInt("LteRsrq",mLteRsrq);\n  m.putInt("LteRssnr",mLteRssnr);\n  m.putInt("LteCqi",mLteCqi);\n  m.putInt("TdScdma",mTdScdmaRscp);\n  m.putBoolean("isGsm",Boolean.valueOf(isGsm));\n}\n', 'nl': 'Set intent notifier Bundle based on SignalStrength'}
{'code': 'public void debug(IDebugSearch debug){\n  this.debug=debug;\n}\n', 'nl': 'Install debugger to use.'}
{'code': 'public void fill(Shape shape){\n  defineShape(shape,false,true);\n}\n', 'nl': 'Draws only the center of a closed AWT shape in SWF vectors using the settings of the current graphic context and places it on the SWF display list. The current paint is used to render the shape.'}
{'code': 'public void copy(int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh){\n  blend(this,sx,sy,sw,sh,dx,dy,dw,dh,REPLACE);\n}\n', 'nl': 'Copy things from one area of this image to another area in the same image.'}
{'code': 'public PaymentLineImpl(final String skuCode,final String skuName,final BigDecimal quantity,final BigDecimal unitPrice,final BigDecimal taxAmount,final boolean shipment){\n  this.skuName=skuName;\n  this.skuCode=skuCode;\n  this.quantity=quantity;\n  this.unitPrice=unitPrice;\n  this.taxAmount=taxAmount;\n  this.shipment=shipment;\n}\n', 'nl': 'Construct payment line.'}
{'code': 'public void write(OutputStream out) throws TransformerException {\n  write(out,(Integer)null);\n}\n', 'nl': 'Writes the xCal document to an output stream.'}
{'code': 'public void testRemoveQuotes(){\n  assertEquals(null,Utils.removeQuotes(null));\n  assertEquals("",Utils.removeQuotes(""));\n  assertEquals("",Utils.removeQuotes("   "));\n  assertEquals("a",Utils.removeQuotes("a"));\n  assertEquals("one",Utils.removeQuotes("    \\u2018one\\\' "));\n  assertEquals("two",Utils.removeQuotes("`two\\u2019 "));\n  assertEquals("three",Utils.removeQuotes("\\u201Cthree\\u00B4"));\n  assertEquals("four",Utils.removeQuotes("\\"four\\u201D\\""));\n  assertEquals("five",Utils.removeQuotes("\\"\\\'\\u0060\\u00B4five\\u00B4\\u0060\\\'\\""));\n}\n', 'nl': 'Test the removeQuotes() method.'}
{'code': '@Override public void process(V tuple){\n  nval+=tuple.doubleValue();\n}\n', 'nl': 'Adds to the numerator value'}
{'code': 'public void skip() throws Exception {\n  reader.skipElement(this);\n}\n', 'nl': 'This method is used to skip all child elements from this element. This allows elements to be effectively skipped such that when parsing a document if an element is not required then that element can be completely removed from the XML.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.183 -0500",hash_original_method="9CCB74C876B98AB8C259B415A5496084",hash_generated_method="C9DBF3B4EDCAC34471E10F51BA381E6E") public void invalidate(){\n  isValid=false;\n  sessionContext=null;\n}\n', 'nl': 'It invalidates a SSL session forbidding any resumption.'}
{'code': 'static public void assertTrue(boolean condition){\n  assertTrue(null,condition);\n}\n', 'nl': "Asserts that a condition is true. If it isn't it throws an AssertionFailedError."}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:56.807 -0400",hash_original_method="1DF5A4F82AD71DE648728A6F6545B094",hash_generated_method="EB053A6377C6B19C32A3194D9A8E16A3") @Override public void putNextEntry(ZipEntry ze) throws IOException {\n  super.putNextEntry(ze);\n}\n', 'nl': 'Writes the specified ZIP entry to the underlying stream. The previous entry is closed if it is still open.'}
{'code': 'public void execute() throws Exception {\n  execute(true,true);\n}\n', 'nl': 'generates the props-file for the GenericObjectEditor and stores it'}
{'code': 'public void testParseCustomSimpleProperty(){\n  String toBeParsed="com.ibm.ssl.rootCertValidDays#" + "   com.ibm.websphere.security.krb.canonical_host";\n  List<String> parsedProperty=ComplexPropertyUtils.parseProperty(toBeParsed,"#");\n  assertEquals(2,parsedProperty.size());\n  assertEquals("com.ibm.ssl.rootCertValidDays",parsedProperty.get(0));\n  assertEquals("com.ibm.websphere.security.krb.canonical_host",parsedProperty.get(1));\n}\n', 'nl': 'Test parsing of provided simple property.'}
{'code': 'public void add(int id,String name,int parentId,int srvArchId,String srvArchName,int srvFdrId){\n  FolderTokenFdrLink link;\n  link=new FolderTokenFdrLink(id,name,parentId,srvArchId,srvArchName,srvFdrId);\n  super.add(link);\n}\n', 'nl': 'Agrega un nuevo enlace a la lista'}
{'code': 'public void connectionUp(Connection con){\n  this.router.changedConnection(con);\n}\n', 'nl': 'Informs the router of this host about state change in a connection object.'}
{'code': 'public synchronized void ensureUpdated(){\n}\n', 'nl': 'Should be invoked from the playback thread after the counters have been updated. Should also be invoked from any other thread that wishes to read the counters, before reading. These calls ensure that counter updates are made visible to the reading threads.'}
{'code': 'public void remove(int childIndex){\n  MutableTreeNode child=(MutableTreeNode)getChildAt(childIndex);\n  children.removeElementAt(childIndex);\n  child.setParent(null);\n}\n', 'nl': "Removes the child at the specified index from this node's children and sets that node's parent to null. The child node to remove must be a <code>MutableTreeNode</code>."}
{'code': 'public void removeAllTrackingIcons(){\n  iconArea.removeAllTrackingIcons();\n}\n', 'nl': 'Removes all tracking icons.'}
{'code': '@DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:04.513 -0500",hash_original_method="EBAE74DC80F9C6BC38A9630AD570AE77",hash_generated_method="A44B995D98502C226FF53B0B869781E4") public ServiceConfigurationError(String message){\n  super(message);\n}\n', 'nl': 'Constructs a new error with the given detail message.'}
{'code': 'public void addStreamHost(final StreamHost host){\n  streamHosts.add(host);\n}\n', 'nl': 'Adds a potential stream host that the remote user can transfer the file through.'}
{'code': 'public static void resumeEventStream(Context context){\n  Log.d(LOG_TAG,"resumeEventStream");\n  sendEventStreamAction(context,EventStreamService.StreamAction.RESUME);\n}\n', 'nl': 'Resume the events stream'}
{'code': 'public void testNewClassLoaderHotRedeploymentPrivateMode() throws Exception {\n  processTestClassLoaderHotRedeployment(DeploymentMode.PRIVATE);\n}\n', 'nl': 'Test GridDeploymentMode.ISOLATED mode.'}
{'code': '@OnError public void onError(Session session,Throwable t){\n  callInternal("onError",session,t.getMessage());\n  logger.error(t.getMessage(),t);\n}\n', 'nl': 'On error raised handler'}
{'code': 'public synchronized void add(String k,String v){\n  grow();\n  keys[nkeys]=k;\n  values[nkeys]=v;\n  nkeys++;\n}\n', 'nl': 'Adds a key value pair to the end of the header.  Duplicates are allowed'}
{'code': 'public void timingEvent(float fraction){\n  alpha=fraction;\n  repaint();\n}\n', 'nl': 'TimingTarget implementation: this method sets the alpha of our button to be equal to the current elapsed fraction of the animation'}
{'code': 'public void rebind(String name,Object obj) throws NamingException {\n  rebind(nameParser.parse(name),obj);\n}\n', 'nl': 'Rebinds object obj to String name. If there is existing binding it will be overwritten.'}
{'code': 'public ResultEntry(NondominatedPopulation population,TypedProperties properties){\n  this(population,properties == null ? null : properties.getProperties());\n}\n', 'nl': 'Constructs a result file entry with the specified non-dominated population and auxiliary properties.'}
{'code': 'public void shutDown(){\n  FrescoPlusCore.shutDownDraweeControllerBuilderSupplier();\n  FrescoPlusView.shutDown();\n  ImagePipelineFactory.shutDown();\n}\n', 'nl': 'Shuts FrescoPlusInitializer down.'}
{'code': 'public void write(byte x){\n  writeByte(x & 0xff);\n}\n', 'nl': 'Writes the 8-bit byte to the binary output stream.'}
{'code': 'public void closeDialog(){\n  setVisible(false);\n  ModificationRegistery.unregisterEditor(getEditor());\n  doDefaultCloseAction();\n}\n', 'nl': 'Closes the dialog.'}
{'code': 'public synchronized void clear(){\n  mCategories.clear();\n  mValues.clear();\n}\n', 'nl': 'Removes all the existing values from the series.'}
{'code': 'public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,String pathDocumentFile,String pathDocAnnFile) throws Exception {\n  checkExistsParent(parentDivId);\n  checkValidDocumentName(parentDivId,name);\n  m_documents.addNewDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile);\n}\n', 'nl': 'Agrega un nuevo documento a un clasificador'}
{'code': 'private DateUtils(){\n}\n', 'nl': 'This class should not be instantiated.'}
{'code': 'public void sort(ArrayList<Value[]> rows){\n  Collections.sort(rows,this);\n}\n', 'nl': 'Sort a list of rows.'}
{'code': 'public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws IllegalArgumentException {\n  broadcaster.addNotificationListener(listener,filter,handback);\n}\n', 'nl': "MBean Notification support You shouldn't update these methods"}
{'code': 'public static void formatJapaneseNumber(Editable text){\n  JapanesePhoneNumberFormatter.format(text);\n}\n', 'nl': 'Formats a phone number in-place using the Japanese formatting rules. Numbers will be formatted as: <p><code> 03-xxxx-xxxx 090-xxxx-xxxx 0120-xxx-xxx +81-3-xxxx-xxxx +81-90-xxxx-xxxx </code></p>'}
{'code': '@EventHandler public void onPlayerJoin(PlayerJoinEvent event){\n  Player player=event.getPlayer();\n  playerChannels.put(player,new PlayerChannel(player));\n}\n', 'nl': 'Adds a new player channel whenever a player joins the server.'}
{'code': 'public void addMessageListener(MessageListener listener){\n  m_notifier.add(listener);\n}\n', 'nl': 'addMessageListener() -'}
{'code': 'public synchronized void stop(){\n  watch=false;\n  notify();\n}\n', 'nl': 'Stop watching.'}
{'code': 'public void confirmByte(char lastByte){\n  pktStat=PacketStatus.COMPLEMENT;\n  writeChar((char)~lastByte,true);\n}\n', 'nl': 'confirm reception of last byte by sending complement of it back'}
{'code': 'public void testRealmJMXAuthenticatorRandomNumberGenerator(){\n  int randomNumber=SecurityHelper.getRandomInt(0,0,0);\n  assertTrue(randomNumber == 0);\n  randomNumber=SecurityHelper.getRandomInt(-1,-10,1);\n  assertTrue(randomNumber == 0);\n  randomNumber=SecurityHelper.getRandomInt(-10,2,1);\n  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber >= 0 && randomNumber <= 2);\n  randomNumber=SecurityHelper.getRandomInt(5,2,1);\n  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber <= 5 && randomNumber >= 2);\n  randomNumber=SecurityHelper.getRandomInt(500,3000,100);\n  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),(randomNumber - 500) % 100 == 0);\n  randomNumber=SecurityHelper.getRandomInt(500,3000,15);\n  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),(randomNumber - 500) % 15 == 0);\n  randomNumber=SecurityHelper.getRandomInt(500,3000,0);\n  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber >= 500 && randomNumber <= 3000);\n  randomNumber=SecurityHelper.getRandomInt(0,10,11);\n  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber >= 0 && randomNumber <= 10);\n}\n', 'nl': 'Confirm that RealmJMXAuthenticator.getRandomInt(min, max) always returns a coherent value'}
{'code': 'public ProcessTerminatedAbnormallyException(final int exitValue,final String message,final Throwable cause){\n  super(message,cause);\n  this.exitValue=exitValue;\n}\n', 'nl': 'Constructs an instance of the ProcessTerminatedAbnormallyException class with the given exit value of the process as well as a message indicating the reason of the abnormal termination along with a Throwable representing the underlying cause of the process termination. </p>'}
{'code': 'public void storeOriginals(){\n  mStartingStartTrim=mStartTrim;\n  mStartingEndTrim=mEndTrim;\n  mStartingRotation=mRotation;\n}\n', 'nl': 'If the start / end trim are offset to begin with, store them so that animation starts from that offset.'}
{'code': 'public static void deleteDirectory(final File dir){\n  deleteDirectory(dir,true);\n}\n', 'nl': 'shortcut for deleteDirectory( dir, true )'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(setAttributeNS09.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void removeHexEditorListener(HexEditorListener l){\n  listenerList.remove(HexEditorListener.class,l);\n}\n', 'nl': 'Removes the specified hex editor listener from this editor.'}
{'code': 'public void populateDAO(Object value,int row,int column){\n  final TradelogDetail element=getData().getTradelogDetail().get(row);\nswitch (column) {\ncase 1:\n{\n      element.setOpen((String)value);\n      break;\n    }\ncase 2:\n{\n    element.setSymbol((String)value);\n    break;\n  }\ncase 3:\n{\n  element.setLongShort(((Side)value).getCode());\n  break;\n}\ncase 4:\n{\nelement.setTier(((Tier)value).getCode());\nbreak;\n}\ncase 5:\n{\nelement.setMarketBias(((MarketBar)value).getCode());\nbreak;\n}\ncase 6:\n{\nelement.setMarketBar(((MarketBar)value).getCode());\nbreak;\n}\ncase 7:\n{\nelement.setName((String)value);\nbreak;\n}\ncase 8:\n{\nelement.setStatus(((TradestrategyStatus)value).getCode());\nbreak;\n}\ncase 9:\n{\nelement.setSide(((Side)value).getCode());\nbreak;\n}\ncase 10:\n{\nelement.setAction(((Action)value).getCode());\nbreak;\n}\ncase 11:\n{\nelement.setStopPrice(((Money)value).getBigDecimalValue());\nbreak;\n}\ncase 12:\n{\nelement.setOrderStatus(((OrderStatus)value).getCode());\nbreak;\n}\ncase 13:\n{\nelement.setFilledDate(((Date)value).getZonedDateTime());\nbreak;\n}\ncase 14:\n{\nelement.setQuantity(((Quantity)value).getIntegerValue());\nbreak;\n}\ncase 15:\n{\nelement.setAverageFilledPrice(((Decimal)value).getBigDecimalValue());\nbreak;\n}\ncase 16:\n{\nelement.setCommission(((Money)value).getBigDecimalValue());\nbreak;\n}\ncase 17:\n{\nelement.setProfitLoss(((Money)value).getBigDecimalValue());\nbreak;\n}\ndefault :\n{\n}\n}\n}\n', 'nl': 'getData() -'}
{'code': 'public void onResume(){\n  hasSavedState=false;\n  unlock();\n}\n', 'nl': "Call this method from your Activity or Fragment's onResume method"}
{'code': 'public void initialize(UISearchResult sr){\n  super.initialize(sr);\n  RESULT=sr;\n  _mediaType=NamedMediaType.getFromExtension(getExtension());\n  addedOn=sr.getCreationTime() > 0 ? new Date(sr.getCreationTime()) : null;\n  actionsHolder=new SearchResultActionsHolder(sr);\n  name=new SearchResultNameHolder(sr);\n  seeds=RESULT.getSeeds() <= 0 || !(RESULT instanceof TorrentUISearchResult) ? "" : String.valueOf(RESULT.getSeeds());\n  icon=getIcon();\n  size=new SizeHolder(getSize());\n  source=new SourceHolder(RESULT);\n}\n', 'nl': 'Initializes this line with the specified search result.'}
{'code': 'private void depthInc(int index){\n  depths[index]++;\n  depthCalc();\n}\n', 'nl': 'increment the depth at index and calc the new depthSum'}
{'code': 'public void declareStartOfScopeVariable(Identifier id){\n  Scope s=getClosestDeclarationContainer();\n  s.addStartOfScopeStatement((Statement)substV("var @id;","id",id));\n}\n', 'nl': 'Add a variable declaration to the start of the closest enclosing true scope.'}
{'code': 'public void createTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){\n  createTables(session,schemaManager,build,true,true,true);\n}\n', 'nl': 'This creates the tables on the database. If the table already exists this will fail.'}
{'code': '@DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.520 -0500",hash_original_method="0DA9D5A0C7EE7D2AFD4BCC53AD3802F3",hash_generated_method="72956D90BC7B32B0D39A00538E67E3E0") @Deprecated public void putIBinder(String key,IBinder value){\n  unparcel();\n  mMap.put(key,value);\n}\n', 'nl': 'Inserts an IBinder value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.'}
{'code': 'public static void devicePermissions(Context context,String accessToken,String identifier,AsyncHttpResponseHandler responseHandler){\n  List<Header> headerList=new ArrayList<Header>();\n  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));\n  get(context,String.format(getApiServerUrl() + DEVICE_PERMISSION_LIST,identifier),headerList,null,responseHandler);\n}\n', 'nl': 'get all authorized devices information(/v1/devices/{identifier}/permissions) <p>Method: get</p>'}
{'code': 'public void onRetry(R result,Throwable failure,ExecutionContext context){\n}\n', 'nl': 'Called before an execution is retried.'}
{'code': 'public void pressed(){\n  state=STATE_PRESSED;\n  repaint();\n}\n', 'nl': 'Invoked to change the state of the button to the pressed state'}
{'code': '@Override public void skippedEntity(String str) throws SAXException {\n}\n', 'nl': 'This method does nothing.'}
{'code': 'public void initialize(Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,String id,CacheKey cacheKey,Object callerContext){\n  super.initialize(id,callerContext);\n  init(dataSourceSupplier);\n  mCacheKey=cacheKey;\n}\n', 'nl': 'Initializes this controller with the new data source supplier, id and caller context. This allows for reusing of the existing controller instead of instantiating a new one. This method should be called when the controller is in detached state.'}
{'code': 'public CharArrayList(final Iterator<? extends Character> i){\n  this();\n  while (i.hasNext())   this.add(i.next());\n}\n', 'nl': 'Creates a new array list and fills it with the elements returned by an iterator..'}
{'code': 'public MessageStore(Context context,int encryptionMode) throws IllegalArgumentException {\n  store=new StorageBase(context,encryptionMode);\n  mContext=context;\n}\n', 'nl': 'Creates a Rangzen message store, with a consistent application of encryption of that stored data, as specified. All messages are associated with a priority value that can be modified.'}
{'code': 'public static void dropAllTables(SQLiteDatabase db,boolean ifExists){\n  JokeCacheDao.dropTable(db,ifExists);\n  FreshNewsCacheDao.dropTable(db,ifExists);\n  PictureCacheDao.dropTable(db,ifExists);\n  SisterCacheDao.dropTable(db,ifExists);\n  VideoCacheDao.dropTable(db,ifExists);\n}\n', 'nl': 'Drops underlying database table using DAOs.'}
{'code': 'public void access(){\n  lastAccessedTime=System.currentTimeMillis();\n}\n', 'nl': 'Updates this session, marking it as accessed.'}
{'code': 'public static void removeProxy(){\n  System.clearProperty("http.proxyHost");\n}\n', 'nl': 'Clear Proxy host settings in System property.'}
{'code': 'private void onPermissionsNotGranted(){\n  Toast.makeText(this,R.string.toast_permissions_not_granted,Toast.LENGTH_SHORT).show();\n  finish();\n}\n', 'nl': 'Permissions not granted. Quit.'}
{'code': 'public void sendToServer(AbstractPacket message){\n  this.channels.get(Side.CLIENT).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.TOSERVER);\n  this.channels.get(Side.CLIENT).writeAndFlush(message);\n}\n', 'nl': "Send this message to the server. Adapted from CPW's code in cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper"}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.080 -0500",hash_original_method="23FE2246FE60A7859CD93D836CF467DE",hash_generated_method="0EF3D39AA54E6C404C253299675A50A8") public void runOnMainSync(Runnable runner){\n  validateNotAppThread();\n  SyncRunnable sr=new SyncRunnable(runner);\n  mThread.getHandler().post(sr);\n  sr.waitForComplete();\n}\n', 'nl': "Execute a call on the application's main thread, blocking until it is complete.  Useful for doing things that are not thread-safe, such as looking at or modifying the view hierarchy."}
{'code': 'public XBeeMessage(String m,int l){\n  super(m,l);\n}\n', 'nl': 'This ctor interprets the String as the exact sequence to send, byte-for-byte.'}
{'code': 'private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){\n  log.debug("Initializing Metrics registries");\n  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);\n  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);\n  log.debug("Registering Metrics Filter");\n  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());\n  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");\n  metricsFilter.setAsyncSupported(true);\n  log.debug("Registering Metrics Servlet");\n  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());\n  metricsAdminServlet.addMapping("/metrics/metrics/*");\n  metricsAdminServlet.setAsyncSupported(true);\n  metricsAdminServlet.setLoadOnStartup(2);\n}\n', 'nl': 'Initializes Metrics.'}
{'code': 'public void stop(){\n  mRunning=false;\n  mStop=true;\n}\n', 'nl': 'Stops the animation in place. It does not snap the image to its final translation.'}
{'code': 'public void testSort(){\n  performTest(getFilter(true,""));\n}\n', 'nl': 'tests the sorting alone'}
{'code': 'public void assertNotEqual(byte expected,byte actual,String errorMessage){\n  TestUtils.assertNotEqual(expected,actual,errorMessage);\n}\n', 'nl': 'This method just invokes the test utils method, it is here for convenience'}
{'code': 'public void resetTask(){\n  this.theOwner=null;\n  this.petPathfinder.clearPathEntity();\n}\n', 'nl': 'Resets the task'}
{'code': '@Deprecated public void expungeNotebook(String guid,OnClientCallback<Integer> callback){\n  AsyncReflector.execute(mClient,callback,"expungeNotebook",mAuthenticationToken,guid);\n}\n', 'nl': 'Asynchronous wrapper.'}
{'code': '@DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.634 -0500",hash_original_method="D3DDD15A13BA6EC1D9CD48C2CCCFE0B4",hash_generated_method="BDAD5B72FB8DC237D351054ED50949FF") private Event(){\n}\n', 'nl': 'This utility class cannot be instantiated'}
{'code': 'public void putDouble(String key,double value){\n  putString(key,String.valueOf(value));\n}\n', 'nl': "Put double value into SharedPreferences with 'key' and save"}
{'code': '@DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.476 -0500",hash_original_method="23A8E01E039C76712F2C134222EAC45B",hash_generated_method="EA68455D0713862A2AE3E437A935F177") public void putCharSequence(String key,CharSequence value){\n  unparcel();\n  mMap.put(key,value);\n}\n', 'nl': 'Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.'}
{'code': 'public void drawResultBitmap(Bitmap barcode){\n  resultBitmap=barcode;\n  invalidate();\n}\n', 'nl': 'Draw a bitmap with the result points highlighted instead of the live scanning display.'}
{'code': 'public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n', 'nl': 'Proceed to the next available ring color. This will automatically wrap back to the beginning of colors.'}
{'code': 'public void mouseEntered(MouseEvent evt){\n}\n', 'nl': 'Method mouseEntered.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(nodeattributenodevalue.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public WidgetProposalComputer(String text,int offset,Element rootElement,Element parentElement,IJavaProject javaProject) throws JavaModelException, UiBinderException {\n  super(javaProject,text,offset,text.length());\n  this.rootElement=rootElement;\n  this.parentElement=parentElement;\n  packageManager.readFromElement(rootElement);\n}\n', 'nl': 'Constructs a widget completion proposal computer.'}
{'code': 'public void mouseMoved(MouseEvent e){\n}\n', 'nl': 'Resets the cursor based on the orientation.'}
{'code': 'public StringKernel(Instances data,int cacheSize,int subsequenceLength,double lambda,boolean debug) throws Exception {\n  setDebug(debug);\n  setCacheSize(cacheSize);\n  setInternalCacheSize(200003);\n  setSubsequenceLength(subsequenceLength);\n  setMaxSubsequenceLength(-1);\n  setLambda(lambda);\n  buildKernel(data);\n}\n', 'nl': "creates a new StringKernel object. Initializes the kernel cache and the 'lambda cache', i.e. the precalculated powers of lambda from lambda^2 to lambda^MAX_POWER_OF_LAMBDA"}
{'code': 'public void begin(){\n  this.zkClient.start();\n  this.lastEmittedBeginTxPosition=openReplicatorClient.initialize(this.spoutConfig.getMysqlConfig(),this.spoutConfig.getZkBinLogStateConfig(),this.txQueue);\n  openReplicatorClient.start();\n}\n', 'nl': 'Start all clients.'}
{'code': 'public void rotateLog(){\n  initialize(m_adempiereHome,true,Ini.isClient());\n}\n', 'nl': 'Rotate Log Called after Initialization'}
{'code': 'private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime){\n  registerListener(requestUrl,target,methods,expireTime,null);\n}\n', 'nl': 'Registers a listener.'}
{'code': 'public void loadByteArray(SdfBuffer buffer){\n  buffer.setAtIndexAndInc(byte1);\n  buffer.setAtIndexAndInc(byte2);\n  buffer.setAtIndexAndInc(byte3);\n  buffer.setAtIndexAndInc(byte4);\n  super.loadByteArray(buffer);\n}\n', 'nl': 'Store into a buffer.'}
{'code': 'public void alignItemsVertically(){\n  alignItemsVertically(kDefaultPadding);\n}\n', 'nl': 'align items vertically'}
{'code': '@Override public void testFailure(Failure failure){\n  LoggingUtils.getEvoLogger().info("* Failure: " + failure.getMessage());\n  for (  StackTraceElement s : failure.getException().getStackTrace()) {\n    LoggingUtils.getEvoLogger().info("   " + s.toString());\n  }\n  this.testResult.setSuccessful(false);\n  this.testResult.setTrace(failure.getTrace());\n  this.testResult.incrementFailureCount();\n}\n', 'nl': 'Called when an atomic test fails'}
{'code': 'private void initialize(){\n  this.setLayout(new BorderLayout());\n  this.setSize(645,321);\n  this.add(getJSplitPane(),java.awt.BorderLayout.CENTER);\n}\n', 'nl': 'This method initializes this'}
{'code': 'public void drawBytes(byte data[],int offset,int length,int x,int y){\n  g.drawBytes(data,offset,length,x,y);\n}\n', 'nl': "Draws the text given by the specified byte array, using this graphics context's current font and color. The baseline of the first character is at position (<i>x</i>,&nbsp;<i>y</i>) in this graphics context's coordinate system."}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(setNamedItemNS02.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public HaltCommand(final int packetId){\n  super(DebugCommandType.CMD_HALT,packetId);\n}\n', 'nl': 'Creates a halt command.'}
{'code': 'public void actionPerformed(AnActionEvent event){\n  triggerAction(null,SearchContext.buildFromDataContext(event.getDataContext()));\n}\n', 'nl': 'Handles IDEA action event'}
{'code': 'public void loadArg(final int arg){\n  loadInsn(argumentTypes[arg],getArgIndex(arg));\n}\n', 'nl': 'Generates the instruction to load the given method argument on the stack.'}
{'code': 'public BinaryProperty(File file) throws IOException {\n  this.data=new Gobble(file).asByteArray();\n}\n', 'nl': 'Creates a new binary property.'}
{'code': '@Override public void ready(){\n  rerollInitiativeB.setEnabled(false);\n  butDone.setEnabled(false);\n  clientgui.getClient().sendDone(true);\n}\n', 'nl': 'Sets you as ready and disables the ready button.'}
{'code': 'public void destroy(){\n  super.destroy();\n}\n', 'nl': 'Destruction of the servlet. <br>'}
{'code': 'private void switchToRegularCapture(){\n  SettingsManager settingsManager=mAppController.getSettingsManager();\n  settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_HDR_PLUS,false);\n  ButtonManager buttonManager=mAppController.getButtonManager();\n  buttonManager.disableButtonClick(ButtonManager.BUTTON_HDR_PLUS);\n  mAppController.getCameraAppUI().freezeScreenUntilPreviewReady();\n  mAppController.onModeSelected(mContext.getResources().getInteger(R.integer.camera_mode_photo));\n  buttonManager.enableButtonClick(ButtonManager.BUTTON_HDR_PLUS);\n}\n', 'nl': 'Switches to PhotoModule to do regular photo captures. <p> TODO: Remove this once we use CaptureModule for photo taking.'}
{'code': 'public void appendLine(final String propertyName,final String rawValue){\n  appendLine(propertyName,rawValue,false,false);\n}\n', 'nl': 'Appends one line with a given property name and value.'}
{'code': 'public void testGetDumpParserForSunLogfile() throws FileNotFoundException {\n  System.out.println("getDumpParserForVersion");\n  InputStream dumpFileStream=new FileInputStream("test/none/test.log");\n  Map threadStore=null;\n  DumpParserFactory instance=DumpParserFactory.get();\n  DumpParser result=instance.getDumpParserForLogfile(dumpFileStream,threadStore,false,0);\n  assertNotNull(result);\n  assertTrue(result instanceof com.pironet.tda.SunJDKParser);\n}\n', 'nl': 'Test of getDumpParserForVersion method, of class com.pironet.tda.DumpParserFactory.'}
{'code': 'public void removeVariable(String varId){\n  variables.remove(varId);\n  discreteCache=null;\n  continuousCache=null;\n  for (  Assignment s : samples) {\n    s.removePair(varId);\n  }\n}\n', 'nl': 'Removes a particular variable from the sampled assignments'}
{'code': 'public static void doSetup(){\n  new UnicodeStandaloneSetup().createInjectorAndDoEMFRegistration();\n}\n', 'nl': 'Perform the setup and register at global EMF singletons.'}
{'code': '@Override public void mouseExited(MouseEvent e){\n}\n', 'nl': 'This method cannot be called directly.'}
{'code': 'public WFG2(int k,int l,int M){\n  super(k,l,M);\n}\n', 'nl': 'Constructs a WFG2 problem instance with the specified number of  position-related and distance-related variables and the specified number of objectives.'}
{'code': 'public static void close(boolean keepAlive){\n  PoolManagerImpl.getPMI().close(keepAlive);\n}\n', 'nl': 'Unconditionally destroys all created pools that are in this manager.'}
{'code': 'private void initializeDefault(){\n  McElieceKeyGenerationParameters mcParams=new McElieceKeyGenerationParameters(new SecureRandom(),new McElieceParameters());\n  initialize(mcParams);\n}\n', 'nl': 'Default initialization of the key pair generator.'}
{'code': 'public static void computeSingleComponentStatus(ComponentStatus componentStatus){\n  Map<StatusType,Long> stats=componentStatus.getInstances().stream().filter(null).collect(Collectors.groupingBy(null,Collectors.counting()));\n  componentStatus.setStats(stats.entrySet().stream().collect(Collectors.toMap(null,null)));\n  componentStatus.setStatus(getSingleComponentStatus(stats.keySet()));\n}\n', 'nl': 'This method is used by StatusFeClient to compute status of an component using status of all the instances.'}
{'code': 'public void applyCurrentUser(){\n  FacesContext facesContext=getContext();\n  HttpSession session=(HttpSession)facesContext.getExternalContext().getSession(false);\n  String userId="" + session.getAttribute("loggedInUserId");\n  String password="" + session.getAttribute("loggedInUserPassword");\n  String userKey="" + session.getAttribute("loggedInUserKey");\n  getConfigurationItem(ControllerConfigurationKey.BSS_USER_ID.name()).setValue(userId);\n  getConfigurationItem(ControllerConfigurationKey.BSS_USER_PWD.name()).setValue(password);\n  getConfigurationItem(ControllerConfigurationKey.BSS_USER_KEY.name()).setValue(userKey);\n}\n', 'nl': 'Stores the currently logged-in user as administrator'}
{'code': '@AfterClass public static void tearDownAfterClass() throws Exception {\n}\n', 'nl': 'Method tearDownAfterClass.'}
{'code': 'public void verifyHeader() throws VerificationException {\n  maybeParseHeader();\n  checkProofOfWork(true);\n  checkTimestamp();\n}\n', 'nl': 'Checks the block data to ensure it follows the rules laid out in the network parameters. Specifically, throws an exception if the proof of work is invalid, or if the timestamp is too far from what it should be. This is <b>not</b> everything that is required for a block to be valid, only what is checkable independent of the chain and without a transaction index.'}
{'code': 'public void unscheduleAllTimers(){\n  assert false : "Not implemented. Use unscheduleAllSelectors";\n}\n', 'nl': 'unschedule all timers. You should NEVER call this method, unless you know what you are doing.'}
{'code': 'public void removeTagDefinition(int tagId){\n  getTagInfo().delete(tagId);\n}\n', 'nl': 'Removes a tag definition for given defined tag constant.'}
{'code': 'public void providesSingletonInScope(){\n  isProvidingSingletonInScope=true;\n}\n', 'nl': "to provide a singleton using the binding's scope and reuse it inside the binding's scope"}
{'code': 'public static void clearAll(){\n  SharedPreferences sp=context.getSharedPreferences(APP_ID,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=sp.edit();\n  editor.clear().commit();\n}\n', 'nl': 'Clear all cache'}
{'code': '@Override public void printMessage(final String message){\n  printMessage(message,preferenceStore.getBoolean(UIPreferenceConstants.CONSOLE_SHOW_ON_NEW_MESSAGE));\n}\n', 'nl': 'Prints a message to the console. The console is not raised.'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase TypesPackage.ARRAY_TYPE_SPECIFIER__SIZE:\n    setSize((Integer)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public static void logError(final Logger logger,final Error e){\n  logger.logError(Level.SEVERE,"Unexpected Error",e);\n}\n', 'nl': 'Logs an error.'}
{'code': 'public NTRUSigningPublicKeyParameters(InputStream is,NTRUSigningParameters params) throws IOException {\n  super(false);\n  h=IntegerPolynomial.fromBinary(is,params.N,params.q);\n  this.params=params;\n}\n', 'nl': 'Reads a polynomial <code>h</code> from an input stream and constructs a new public key'}
{'code': 'public void add(Item item){\n  Node oldfirst=first;\n  first=new Node();\n  first.item=item;\n  first.next=oldfirst;\n  n++;\n}\n', 'nl': 'Adds the item to this bag.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.053 -0500",hash_original_method="EEDFE0453AAAF2A630A301400F88A0DB",hash_generated_method="E90D1453F700D1C14BCE902B1840D5A8") public static void register(){\n  DdmServer.registerHandler(CHUNK_HELO,mInstance);\n  DdmServer.registerHandler(CHUNK_FEAT,mInstance);\n}\n', 'nl': "Register for the messages we're interested in."}
{'code': 'public CacheServerImpl(AdminDistributedSystemImpl system,GemFireVM vm) throws AdminException {\n  super(system,vm);\n  this.config=new CacheServerConfigImpl(vm);\n}\n', 'nl': 'Creates a new <code>CacheServerImpl</code> that represents an existing dedicated cache server in a given distributed system.'}
{'code': 'public void measure(int reactTag,Callback callback){\n  mOperationsQueue.enqueueMeasure(reactTag,callback);\n}\n', 'nl': 'Determines the location on screen, width, and height of the given view relative to the root view and returns the values via an async callback.'}
{'code': 'public void defineDictionary(String name,Map<String,Object> mapping){\n  dictionaries.put(name,mapping);\n}\n', 'nl': 'Define a map for this group. <p> Not thread safe...do not keep adding these while you reference them.</p>'}
{'code': 'public synchronized static void removeComp(String component){\n  skinSpecs.remove(component);\n}\n', 'nl': 'Remove the specified componenet from the SkinSpecs map.'}
{'code': '@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {\n  mDispatcher.performBackup(oldState,data,newState);\n}\n', 'nl': 'Run the backup process on each of the configured handlers.'}
{'code': '@Override public void announceSeeds(){\n  BufferedReader reader=new BufferedReader(textSource.obtainReader());\n  try {\n    announceSeedsFromReader(reader);\n  }\n  finally {\n    IOUtils.closeQuietly(reader);\n  }\n}\n', 'nl': 'Announce all seeds from configured source to SeedListeners (including nonseed lines mixed in).'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS__FLAGS:\n    getFlags().clear();\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public MockSpamd(int port) throws IOException {\n  socket=new ServerSocket(port);\n}\n', 'nl': 'Init the mocked SPAMD daemon'}
{'code': 'private void handleQuit(){\n  GUIMediator.applyWindowSettings();\n  GUIMediator.close(false);\n}\n', 'nl': 'This method responds to a quit event by closing the application in the whichever method the user has configured (closing after completed file transfers by default).  On OSX, this runs in a new ManagedThread to handle the possibility that event processing can become blocked if launched in the calling thread.'}
{'code': 'public void trimToSize(){\n  elements=cern.colt.Arrays.trimToCapacity(elements,size());\n}\n', 'nl': "Trims the capacity of the receiver to be the receiver's current  size. Releases any superfluos internal memory. An application can use this operation to minimize the  storage of the receiver."}
{'code': 'public void addComponent(Component component) throws InvalidComponentException {\n  isComponentAddable(component);\n  components.add(component);\n}\n', 'nl': 'Adds a component.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_nodedocumentfragmentnormalize2.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void testCameraPairwiseScenario22() throws Exception {\n  genericPairwiseTestCase(Flash.ON,Exposure.MAX,WhiteBalance.AUTO,SceneMode.ACTION,PictureSize.SMALL,Geotagging.OFF);\n}\n', 'nl': 'Flash: On / Exposure: Max / WB: Auto Scene: Action / Pic: Small / Geo: off'}
{'code': 'public void testFileFileWithConfigOption() throws Exception {\n  Properties properties=loadProperties("test-file-configfile-file");\n  assertEquals("12345",properties.getProperty("cargo.servlet.port"));\n}\n', 'nl': 'Test the Configuration Files option with copying of file in subdirectory.'}
{'code': 'public void stopDrawShadowTexture(){\n  GLES20.glColorMask(mCachedColorMask[0],mCachedColorMask[1],mCachedColorMask[2],mCachedColorMask[3]);\n  GLES20.glDepthMask(mCachedDepthMask[0]);\n  GLES20.glCullFace(GLES20.GL_BACK);\n  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);\n}\n', 'nl': 'Must be call after using shadow complete'}
{'code': 'public void changeGeneralConfig(String value){\n  WebElement generalConfigButton=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.general.tab.identifier"))));\n  WebElement inputGeneralConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.general.input.monitoringFr.identifier"))));\n  WebElement buttonSaveConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.general.button.save.identifier"))));\n  generalConfigButton.click();\n  inputGeneralConfig.sendKeys(value);\n  buttonSaveConfig.click();\n}\n', 'nl': 'This page imitates the general configuration changing scenario.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList childNodes;\n  ProcessingInstruction piNode;\n  String target;\n  doc=(Document)load("staff",false);\n  childNodes=doc.getChildNodes();\n  piNode=(ProcessingInstruction)childNodes.item(0);\n  target=piNode.getTarget();\n  assertEquals("processinginstructionGetTargetAssert","TEST-STYLE",target);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public static void until(Callable<Boolean> condition,long timeout,TimeUnit timeUnit){\n  until(condition,timeout,timeUnit,50);\n}\n', 'nl': 'Blocks until the given condition evaluates to true. The condition is evaluated every 50 milliseconds, so, the given condition should be an idempotent operation. If the condition is not met within the given timeout, an exception is thrown.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_attrinsertbefore1.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\\"PARENT\\"";\n  db.execSQL(sql);\n}\n', 'nl': 'Drops the underlying database table.'}
{'code': 'public ConcurrentSkipListSet(Comparator<? super E> comparator){\n  m=new ConcurrentSkipListMap<E,Object>(comparator);\n}\n', 'nl': 'Constructs a new, empty set that orders its elements according to the specified comparator.'}
{'code': 'public static void multiplyMV(float[] output,int outputOffset,float[] lhs,int lhsOffset,float[] rhs,int rhsOffset){\n  output[outputOffset + 0]=lhs[lhsOffset + 0] * rhs[rhsOffset + 0] + lhs[lhsOffset + 4] * rhs[rhsOffset + 1] + lhs[lhsOffset + 8] * rhs[rhsOffset + 2] + lhs[lhsOffset + 12] * rhs[rhsOffset + 3];\n  output[outputOffset + 1]=lhs[lhsOffset + 1] * rhs[rhsOffset + 0] + lhs[lhsOffset + 5] * rhs[rhsOffset + 1] + lhs[lhsOffset + 9] * rhs[rhsOffset + 2] + lhs[lhsOffset + 13] * rhs[rhsOffset + 3];\n  output[outputOffset + 2]=lhs[lhsOffset + 2] * rhs[rhsOffset + 0] + lhs[lhsOffset + 6] * rhs[rhsOffset + 1] + lhs[lhsOffset + 10] * rhs[rhsOffset + 2] + lhs[lhsOffset + 14] * rhs[rhsOffset + 3];\n  output[outputOffset + 3]=lhs[lhsOffset + 3] * rhs[rhsOffset + 0] + lhs[lhsOffset + 7] * rhs[rhsOffset + 1] + lhs[lhsOffset + 11] * rhs[rhsOffset + 2] + lhs[lhsOffset + 15] * rhs[rhsOffset + 3];\n}\n', 'nl': 'Multiply a 4 element vector by a 4x4 matrix and store the result in a 4 element column vector. In matrix notation: result = lhs x rhs The same float array may be passed for resultVec, lhsMat, and/or rhsVec. However, the resultVec element values are undefined if the resultVec elements overlap either the lhsMat or rhsVec elements.'}
{'code': 'public void reportSuccess(long waitTime){\n  mSumOfWaitTime+=waitTime;\n  mSuccessfulRequests++;\n}\n', 'nl': 'Called whenever image request finishes successfully, that is whenever final image is set.'}
{'code': 'public void releaseTargetVersionLock(){\n  _coordinator.releaseTargetVersionLock();\n}\n', 'nl': 'calls coordinator client to release a target version lock.'}
{'code': 'public LinkedIntegerMap(final LinkedIntegerMap<T>[] integerMaps){\n  m_values=new LinkedHashMap<>();\n  for (  final LinkedIntegerMap<T> integerMap : integerMaps) {\n    this.add(integerMap);\n  }\n}\n', 'nl': 'This will make a new IntegerMap. The Objects will be linked, but the integers mapped to them will not be linked.'}
{'code': 'public FileListener(Printer printer,File inputFile,ConstructLengths constructLengths,Set<Rules> enabledRules) throws IOException {\n  this.printer=printer;\n  this.inputFile=inputFile;\n  this.constructLengths=constructLengths;\n  this.reader=new LineNumberReader(Files.newBufferedReader(inputFile.toPath()));\n  this.enabledRules=enabledRules;\n}\n', 'nl': 'Constructs a file listener with the specified printer, input file, and max lengths restrictions.'}
{'code': 'public void withdraw(double amount){\n  balance-=amount;\n}\n', 'nl': 'Decrease balance by amount'}
{'code': 'public JUnitGuiceClassRunner(final Class<?> clazz) throws InitializationError {\n  super(clazz);\n  this.injector=createInjector(clazz);\n}\n', 'nl': 'Creates a new class runner instance'}
{'code': 'public final void testGetSystemScope(){\n  String name=Security.getProperty("system.scope");\n  assertNotNull(name);\n  IdentityScope scope=IdentityScope.getSystemScope();\n  assertNotNull(scope);\n  assertEquals(name,scope.getClass().getName());\n}\n', 'nl': 'just call IdentityScope.getSystemScope()'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringcountnegative.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void validateBusinessObjectData(Integer expectedBusinessObjectDataId,String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,Boolean expectedLatestVersion,String expectedStatusCode,String expectedStorageName,String expectedStorageDirectoryPath,List<StorageFile> expectedStorageFiles,List<Attribute> expectedAttributes,BusinessObjectData actualBusinessObjectData){\n  validateBusinessObjectData(expectedBusinessObjectDataId,expectedNamespace,expectedBusinessObjectDefinitionName,expectedBusinessObjectFormatUsage,expectedBusinessObjectFormatFileType,expectedBusinessObjectFormatVersion,expectedBusinessObjectDataPartitionValue,expectedBusinessObjectDataSubPartitionValues,expectedBusinessObjectDataVersion,expectedLatestVersion,expectedStatusCode,actualBusinessObjectData);\n  assertEquals(1,actualBusinessObjectData.getStorageUnits().size());\n  StorageUnit actualStorageUnit=actualBusinessObjectData.getStorageUnits().get(0);\n  assertEquals(expectedStorageName,actualStorageUnit.getStorage().getName());\n  assertEquals(expectedStorageDirectoryPath,actualStorageUnit.getStorageDirectory() != null ? actualStorageUnit.getStorageDirectory().getDirectoryPath() : null);\n  AbstractServiceTest.assertEqualsIgnoreOrder("storage files",expectedStorageFiles,actualStorageUnit.getStorageFiles());\n  assertEquals(expectedAttributes,actualBusinessObjectData.getAttributes());\n}\n', 'nl': 'Validates business object data against specified arguments and expected (hard coded) test values.'}
{'code': 'public static void main(String[] args){\n  LatLonPoint llpt1=new LatLonPoint.Double(87.00,-74.50);\n  System.out.println(llpt1.toString());\n  UPSPoint ups=new UPSPoint(llpt1);\n  System.out.println(ups.toString());\n  LatLonPoint llpt2=ups.toLatLonPoint(false);\n  System.out.println(llpt2.toString());\n  System.out.println("--------------------------------------------");\n  llpt1=new LatLonPoint.Double(-89.00,110.50);\n  System.out.println(llpt1.toString());\n  ups=new UPSPoint(llpt1);\n  System.out.println(ups.toString());\n  llpt2=ups.toLatLonPoint(true);\n  System.out.println(llpt2.toString());\n}\n', 'nl': 'Tested against the NIMA calculator'}
{'code': 'public void printf(String format,Object... args){\n  out.printf(LOCALE,format,args);\n  out.flush();\n}\n', 'nl': 'Prints a formatted string to this output stream, using the specified format string and arguments, and then flushes this output stream.'}
{'code': 'public void visible(boolean visible){\n  this.visible=visible;\n}\n', 'nl': 'Sets visible flag.'}
{'code': '@PUT @Path("/{machineId}/cancel") public void cancelExecution(@PathParam("machineId") Long machineId){\n}\n', 'nl': 'Cancel a machine being executed.'}
{'code': 'public void addDivider(ArchiveTokenDivider div){\n  m_dividers.add(div);\n}\n', 'nl': 'Agrega un nuevo clasificador al archivador'}
{'code': 'public void recordBounds(final PlanetModel planetModel,final LatLonBounds boundsInfo,final Plane p,final Membership... bounds){\n  findIntersectionBounds(planetModel,boundsInfo,p,bounds);\n}\n', 'nl': 'Accumulate bounds information for this plane, intersected with another plane and the world. Updates both latitude and longitude information, using max/min points found within the specified bounds.  Also takes into account the error envelope for all planes being intersected.'}
{'code': 'private void rebuildNode(){\n  m_realizer.regenerate();\n  m_graph.updateViews();\n}\n', 'nl': 'Regenerates the content of the node and updates the graph view.'}
{'code': 'public void addException(long fromDomainValue,long toDomainValue){\n  addException(new SegmentRange(fromDomainValue,toDomainValue));\n}\n', 'nl': 'Adds a segment range as an exception. An exception segment is defined as a segment to exclude from what would otherwise be considered a valid segment of the timeline.  An exception segment can not be contained inside an already excluded segment.  If so, no action will occur (the proposed exception segment will be discarded). <p> The segment range is identified by a domainValue that begins a valid segment and ends with a domainValue that ends a valid segment. Therefore the range will contain all segments whose segmentStart &lt;= domainValue and segmentEnd &lt;= toDomainValue.'}
{'code': 'public void insert(String namespace,String set,Key key,List<Bin> bins){\n  insert(namespace,set,key,bins,0);\n}\n', 'nl': 'inserts a record. If the record exists, and exception will be thrown.'}
{'code': 'public void markAsConsumedFromInterface(N4MemberDeclaration element){\n  tag(Tag.consumedFromInterface,element);\n}\n', 'nl': 'Marks given member as being consumed from an interface.'}
{'code': 'public void initialize(SignalStrength ss,int timingAdvance){\n  mSignalStrength=ss.getLteSignalStrenght();\n  mRsrp=ss.getLteRsrp();\n  mRsrq=ss.getLteRsrq();\n  mRssnr=ss.getLteRssnr();\n  mCqi=ss.getLteCqi();\n  mTimingAdvance=timingAdvance;\n}\n', 'nl': 'Initialize from the SignalStrength structure.'}
{'code': 'public void afterReceivingFromServer(EventID eventId){\n}\n', 'nl': 'Invoked after sending an instantiator message to server'}
{'code': 'public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n', 'nl': 'Enters a new lexical state'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(nodedocumentnodevalue.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void mouseMoved(MouseEvent e){\n}\n', 'nl': 'Mouse Moved'}
{'code': 'public void onLoad(ClassPool pool,String classname){\n}\n', 'nl': 'Does nothing. This is a method declared in javassist.Translator.'}
{'code': 'public void clear(){\n  elements=0;\n}\n', 'nl': 'Removes all of the elements from this set.'}
{'code': 'private CHighlightLayers(){\n}\n', 'nl': 'You are not supposed to instantiate this class.'}
{'code': 'public static void configItem(String name,String value){\n  openMinorTag("conf");\n  attribute("name",name);\n  attribute("value",value);\n  closeMinorTag();\n}\n', 'nl': 'Output a "config" entity, with a given name and <code>String</code>value.'}
{'code': 'private void handleSetTexture(int id){\n  mTextureId=id;\n}\n', 'nl': 'Sets the texture name that SurfaceTexture will use when frames are received.'}
{'code': 'public void updateGestorValoracion(String[] valoraciones,String idGestor){\n  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateORTokens(CAMPO_ID,valoraciones));\n  Map fieldsToUpdate=Collections.singletonMap(CAMPO_IDUSRGESTORSERIE,idGestor);\n  updateFields(qual.toString(),fieldsToUpdate,TABLE_NAME);\n}\n', 'nl': 'Actualiza el gestor de un conjunto de valoraciones'}
{'code': 'public void startScan(SiteNode startNode){\n  Target target=new Target(startNode);\n  target.setRecurse(true);\n  this.startScan(target,null,null);\n}\n', 'nl': 'Start scan.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_documentcreatecomment.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public static void createImageToStorage(String url,Label l,String cacheId,Image placeholder,byte priority){\n  createImageToStorage(url,l,cacheId,false,null,priority,placeholder,defaultMaintainAspectRatio);\n}\n', 'nl': 'Constructs an image request that will automatically populate the given Label when the response arrives, it will cache the file locally to the Storage'}
{'code': 'public void addConversation(Conversation conversation){\n  conversations.put(conversation.getName().toLowerCase(),conversation);\n}\n', 'nl': 'Add a new conversation'}
{'code': 'public void invalidate(){\n  isValid=false;\n  sessionContext=null;\n}\n', 'nl': 'It invalidates a SSL session forbidding any resumption.'}
{'code': '@DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.970 -0500",hash_original_method="7596573BC98218F8353DB810A415EA55",hash_generated_method="FC221DD174470D4245763A796A96A214") public PorterDuffColorFilter(int srcColor,PorterDuff.Mode mode){\n  native_instance=native_CreatePorterDuffFilter(srcColor,mode.nativeInt);\n  nativeColorFilter=nCreatePorterDuffFilter(native_instance,srcColor,mode.nativeInt);\n}\n', 'nl': 'Create a colorfilter that uses the specified color and porter-duff mode.'}
{'code': 'public void bindStage(Date currentDate,int stage){\n  mStage=stage;\n  mTitle.setText(itemView.getResources().getString(R.string.setting_stage,stage));\n  mInitialDate=currentDate;\n  initializeDuration(currentDate);\n  mButton.setEnabled(false);\n  mErrorLayout.setVisibility(View.GONE);\n  mErrorLayout.collapse();\n}\n', 'nl': 'Bind a stage to this ViewHolder'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.CASE_CLAUSE__EXPRESSION:\n    setExpression((Expression)null);\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void contributeToSymbols(ChooseByNameContributor contributor){\n  myGotoSymbolContributors.add(contributor);\n}\n', 'nl': 'Registers a component which contributes items to the "Goto Symbol" list.'}
{'code': '@Override public void close(){\n  CloseableReference.closeSafely(mPooledByteBufferRef);\n}\n', 'nl': 'Closes the buffer enclosed by this class.'}
{'code': 'public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){\n  tableLockMap.remove(absoluteTableIdentifier);\n  tableBlocksMap.remove(absoluteTableIdentifier);\n}\n', 'nl': 'remove all the details of a table this will be used in case of drop table'}
{'code': 'public void remove(int index){\n  m_List.remove(index);\n}\n', 'nl': 'Removes an element at the specified index from the list.'}
{'code': 'public Transform(Document doc,String algorithmURI) throws InvalidTransformException {\n  this(doc,algorithmURI,(NodeList)null);\n}\n', 'nl': 'Generates a Transform object that implements the specified <code>Transform algorithm</code> URI.'}
{'code': '@Override public void end(){\n  GLU.gluTessEndContour(this.tess);\n}\n', 'nl': 'Called by the GLU tessellator to indicate the end of the current line loop. This recursively ends the current contour with the GLU tessellator specified during construction by calling gluTessEndContour(tessellator).'}
{'code': 'public PipedOutputStream(PipedInputStream snk) throws IOException {\n  connect(snk);\n}\n', 'nl': 'Creates a piped output stream connected to the specified piped input stream. Data bytes written to this stream will then be available as input from <code>snk</code>.'}
{'code': 'public static void hideKeyboard(Activity activity,IBinder windowToken){\n  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);\n  mgr.hideSoftInputFromWindow(windowToken,0);\n}\n', 'nl': 'This method is used to hide a keyboard after a user has finished typing the url.'}
{'code': 'public void testLegacyIntReverse() throws IOException {\n  Directory dir=newDirectory();\n  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);\n  Document doc=new Document();\n  doc.add(new LegacyIntField("value",300000,Field.Store.YES));\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new LegacyIntField("value",-1,Field.Store.YES));\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new LegacyIntField("value",4,Field.Store.YES));\n  writer.addDocument(doc);\n  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_INTEGER));\n  writer.close();\n  IndexSearcher searcher=newSearcher(ir);\n  Sort sort=new Sort(new SortField("value",SortField.Type.INT,true));\n  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);\n  assertEquals(3,td.totalHits);\n  assertEquals("300000",searcher.doc(td.scoreDocs[0].doc).get("value"));\n  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));\n  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));\n  TestUtil.checkReader(ir);\n  ir.close();\n  dir.close();\n}\n', 'nl': 'Tests sorting on type legacy int in reverse'}
{'code': '@DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.192 -0500",hash_original_method="B19BAB1EEF674556A3A9CC47CD14FB0B",hash_generated_method="A4A93DB84096F87B82DB777B3CD75A12") private void updateVisitedHistory(String url,boolean isReload){\n  mCallbackProxy.doUpdateVisitedHistory(url,isReload);\n}\n', 'nl': 'Tell the activity to update its global history.'}
{'code': 'private void initRasterProgram(){\n  glUseProgram(rasterProgram);\n  viewMatrixUniform=glGetUniformLocation(rasterProgram,"viewMatrix");\n  projectionMatrixUniform=glGetUniformLocation(rasterProgram,"projectionMatrix");\n  glUseProgram(0);\n}\n', 'nl': 'Initialize the raster program.'}
{'code': 'public void released(){\n  released(-1,-1);\n}\n', 'nl': 'Invoked to change the state of the button to the released state'}
{'code': 'public void putString(String key,String value){\n  map.put(key,value);\n}\n', 'nl': 'Inserts a String value into the mapping of this Bundle, replacing any existing value for the given key.  Either key or value may be null.'}
{'code': 'public void loadLocal(final int local,final Type type){\n  setLocalType(local,type);\n  loadInsn(type,local);\n}\n', 'nl': 'Generates the instruction to load the given local variable on the stack.'}
{'code': 'public void addProperty(String property,Character value){\n  add(property,createJsonElement(value));\n}\n', 'nl': 'Convenience method to add a char member. The specified value is converted to a JsonPrimitive of Character.'}
{'code': 'public void disconnected(){\n  m_isHalted=false;\n  m_isConnected=false;\n  m_manager.disconnected();\n}\n', 'nl': 'Issued when the socket connection to the player is cut'}
{'code': 'public static void severe(final String message,final Object... objects){\n  NaviLogger.severe(message,objects);\n}\n', 'nl': 'Logs a string at log level SEVERE.'}
{'code': 'public void scheduleCommitWithin(long commitMaxTime){\n  _scheduleCommitWithin(commitMaxTime);\n}\n', 'nl': 'schedule individual commits'}
{'code': 'public void createPictScenario09() throws Exception {\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));\n  String supplierAdminId="Pict09Supplier";\n  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict09SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);\n  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);\n  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict09Supplier_MP",false,supplier);\n  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);\n  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);\n  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);\n  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);\n  setCutOffDay(supplierAdmin.getKey(),1);\n  String customerAdminId="PIC09Customer";\n  VOOrganization customer=orgSetup.registerCustomer("PIC09CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());\n  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);\n  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);\n  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT09_PERUNIT_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT09_UNIT_HOUR,example2TechService,supplierMarketplace);\n  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT09_FREE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);\n  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);\n  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate);\n  VOServiceDetails serviceDetails=serviceSetup.activateMarketableService(unitServTemplate);\n  VOServiceDetails serviceFreeDetails=serviceSetup.activateMarketableService(freeTemplate);\n  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");\n  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);\n  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_09",serviceDetails,customerAdmin,role);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));\n  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 13:00:00"));\n  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);\n  VOSubscriptionDetails upgradedSubDetailsOld=subDetails;\n  subDetails.setSubscriptionId("PICT_TEST_09" + "_SubID2");\n  subDetails=subscrSetup.modifySubscription(subDetails,null);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 14:00:00"));\n  subDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetailsOld);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:10:00"));\n  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);\n  paymentSetup.deleteCustomerPaymentTypes(customer);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:20:00"));\n  paymentSetup.reassignCustomerPaymentTypes(customer);\n  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());\n  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:30:00"));\n  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:40:00"));\n  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");\n  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());\n  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);\n  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 14:41:00"),"FILE_DOWNLOAD",100);\n  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 14:42:00"),"FILE_UPLOAD",100);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 11:59:58"));\n  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);\n  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 11:59:59"));\n  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 14:00:00"));\n  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);\n  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceDetails);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 15:00:00"));\n  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails2);\n  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);\n  subscrSetup.recordEventForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-31 15:05:00"),"FILE_DOWNLOAD",100);\n  subscrSetup.recordEventForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-31 15:06:00"),"FILE_UPLOAD",100);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 16:00:00"));\n  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);\n  serviceSetup.deleteMarketableService(serviceDetails);\n  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);\n  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-10 10:00:00"));\n  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());\n  resetCutOffDay(supplierAdmin.getKey());\n  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",subDetails);\n  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",upgradedSubDetails);\n  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",upgradedSubDetails2);\n  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_09",customer);\n}\n', 'nl': 'See testcase #9 of BESBillingFactorCombinations.xlsx'}
{'code': 'public void deactivate(URI id){\n  doDeactivate(id);\n}\n', 'nl': 'Deactivates the given virtual array by ID. <p> API Call: <tt>POST /vdc/varrays/{id}/deactivate</tt>'}
{'code': 'public void rollback(URI taskId){\n  client.postURI(String.class,client.uriBuilder(getIdUrl() + "/rollback").build(taskId));\n}\n', 'nl': 'Rollback a task'}
{'code': 'private void parseSecondaryDevicePar(Node node){\n}\n', 'nl': 'Parse the secondary device parameter'}
{'code': '@PatchMethod public static <T>void add(List array,T value){\n}\n', 'nl': 'Patch add method.'}
{'code': 'private void initProduct(long key,ServiceAccessType type){\n  product.setKey(key);\n  product.setProductId("ProductId");\n  product.setTemplate(product);\n  TechnicalProduct tp=new TechnicalProduct();\n  tp.setAccessType(type);\n  product.setTechnicalProduct(tp);\n}\n', 'nl': 'initialize product object'}
{'code': 'public void testFloatSortMissingFirst() throws Exception {\n  checkSortMissingFirst("floatdv_missingfirst","-1.3","4.2");\n}\n', 'nl': 'float with sort missing always first'}
{'code': 'public static void simpleDataExchange(Socket s1,Socket s2) throws Exception {\n  InputStream i1=s1.getInputStream();\n  InputStream i2=s2.getInputStream();\n  OutputStream o1=s1.getOutputStream();\n  OutputStream o2=s2.getOutputStream();\n  startSimpleWriter("SimpleWriter-1",o1,100);\n  startSimpleWriter("SimpleWriter-2",o2,200);\n  simpleRead(i2,100);\n  simpleRead(i1,200);\n}\n', 'nl': 'performs a simple exchange of data between the two sockets and throws an exception if there is any problem.'}
{'code': 'public void clearActive(){\n  end=array.length;\n}\n', 'nl': 'Clears the active region of the string.  Further operations are not restricted to part of the input.'}
{'code': 'public void zoneNullRollback(String stepId){\n  WorkflowStepCompleter.stepSucceded(stepId);\n}\n', 'nl': 'Performs a null rollback if desired.'}
{'code': 'public static void install(Globals globals){\n  globals.undumper=instance;\n}\n', 'nl': 'Install this class as the standard Globals.Undumper for the supplied Globals'}
{'code': 'public URL(String protocol,String host,String file) throws MalformedURLException {\n  this(protocol,host,-1,file,null);\n}\n', 'nl': "Creates a new URL of the given component parts. The URL uses the protocol's default port."}
{'code': 'public void removePrefix(String s){\n  prefix.removeElement(s);\n  update();\n}\n', 'nl': 'Removes the prefix.'}
{'code': '@Override public void init(CanvasRenderer canvasRenderer){\n  canvasRenderer.getRenderer().setBackgroundColor(backgroundColor);\n}\n', 'nl': 'Initialize this Scene'}
{'code': 'public void print(java.lang.String s){\n  return;\n}\n', 'nl': 'Print a string. If the argument is null then the string "null" is printed. Otherwise, the string\'s characters are converted into bytes according to the platform\'s default character encoding, and these bytes are written in exactly the manner of the method.'}
{'code': 'public void connectAndBind(String host,int port,BindType bindType,String systemId,String password,String systemType,TypeOfNumber addrTon,NumberingPlanIndicator addrNpi,String addressRange,long timeout) throws IOException {\n  connectAndBind(host,port,new BindParameter(bindType,systemId,password,systemType,addrTon,addrNpi,addressRange),timeout);\n}\n', 'nl': 'Open connection and bind immediately with specified timeout. The default timeout is 1 minutes.'}
{'code': 'private void updateToggleButton(Action action,Icon icon,Icon iconRover,Icon iconPressed){\n  toggleButton.setAction(action);\n  toggleButton.setIcon(icon);\n  toggleButton.setRolloverIcon(iconRover);\n  toggleButton.setPressedIcon(iconPressed);\n  toggleButton.setText(null);\n}\n', 'nl': 'Updates the toggle button to contain the Icon <code>icon</code>, and Action <code>action</code>.'}
{'code': 'static public void assertNull(String message,Object object){\n  assertTrue(message,object == null);\n}\n', 'nl': 'Asserts that an object is null.  If it is not an AssertionFailedError is thrown with the given message.'}
{'code': 'public void or(Criteria criteria){\n  oredCriteria.add(criteria);\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table PUBLIC.SAMPLETABLE1'}
{'code': 'public void bar(@Nullable Object o){\n}\n', 'nl': 'the only difference with DoesntWork.foo() is that the parameter is annotated as Nullable'}
{'code': 'private void initAtpTab(){\n  m_tableAtp=ListboxFactory.newDataTable();\n  m_tableAtp.setMultiSelection(false);\n  ArrayList<Info_Column> list=new ArrayList<Info_Column>();\n  list.add(new Info_Column(" ","M_Product_ID",IDColumn.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_Warehouse_ID"),"Warehouse",String.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_Locator_ID"),"Locator",String.class));\n  list.add(new Info_Column(Msg.getMsg(Env.getCtx(),"Date",true),"Date",Timestamp.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyAvailable"),"QtyAvailable",Double.class,true,true,null));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyOnHand"),"QtyOnHand",Double.class));\n  list.add(new Info_Column(Msg.getMsg(Env.getCtx(),"ExpectedChange",true),"DeltaQty",Double.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"C_BPartner_ID"),"BP_Name",String.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyOrdered"),"QtyOrdered",Double.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"QtyReserved"),"QtyReserved",Double.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"),"PASI",String.class));\n  list.add(new Info_Column(Msg.translate(Env.getCtx(),"DocumentNo"),"DocumentNo",String.class));\n  m_layoutATP=new Info_Column[list.size()];\n  list.toArray(m_layoutATP);\n}\n', 'nl': 'Query ATP'}
{'code': 'public void addVideoSharingInvitationRejected(ContactId contact,VideoContent content,ReasonCode reasonCode,long timestamp){\n  String sessionId=SessionIdGenerator.getNewId();\n  mRichCallLog.addVideoSharing(sessionId,contact,Direction.INCOMING,content,VideoSharing.State.REJECTED,reasonCode,timestamp);\n  mBroadcaster.broadcastInvitation(sessionId);\n}\n', 'nl': 'Add and broadcast video sharing invitation rejections'}
{'code': 'public void initTuner(boolean controlI2C) throws UsbException {\n  writeDemodRegister(mDeviceHandle,Page.ONE,(short)0xB1,(short)0x1A,1);\n  writeDemodRegister(mDeviceHandle,Page.ZERO,(short)0x08,(short)0x4D,1);\n  setIFFrequency(R820T_IF_FREQUENCY);\n  writeDemodRegister(mDeviceHandle,Page.ONE,(short)0x15,(short)0x01,1);\n  initializeRegisters(controlI2C);\n  setTVStandard(controlI2C);\n  systemFrequencySelect(0,controlI2C);\n}\n', 'nl': 'Initializes the tuner section.'}
{'code': 'public static void deinitialize(){\n  INSTANCE.codenameOneRunning=false;\nsynchronized (lock) {\n    lock.notifyAll();\n  }\n}\n', 'nl': 'Closes down the EDT and Codename One, under normal conditions this method is completely unnecessary since exiting the application will shut down Codename One. However, if the application is minimized and the user wishes to free all resources without exiting the application then this method can be used. Once this method is used Codename One will no longer work and Display.init(Object) should be invoked again for any further Codename One call! Notice that minimize (being a Codename One method) MUST be invoked before invoking this method!'}
{'code': 'public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {\n  super.startElement(elementNamespaceURI,elementLocalName,elementName);\n}\n', 'nl': 'From XSLTC'}
{'code': 'private boolean hasMatchingDo(){\n  Assert.isTrue(fToken == Symbols.TokenWHILE);\n  nextToken();\nswitch (fToken) {\ncase Symbols.TokenRBRACE:\n    skipScope();\ncase Symbols.TokenSEMICOLON:\n  skipToStatementStart(false,false);\nreturn fToken == Symbols.TokenDO;\n}\nreturn false;\n}\n', 'nl': 'while(condition); is ambiguous when parsed backwardly, as it is a valid statement by its own, so we have to check whether there is a matching do. A <code>do</code> can either be separated from the while by a block, or by a single statement, which limits our search distance.'}
{'code': 'public void trim(final int ego){\n  this.alters[ego].trim();\n}\n', 'nl': 'Memory optimisation: shrinks storing arrays so that they do not contain unused slots.'}
{'code': 'public void copyMeta(GridMetadataAwareAdapter from){\n  assert from != null;\n  copyMeta(from.allMeta());\n}\n', 'nl': 'Copies all metadata from another instance.'}
{'code': '@Pointcut("execution(* java.lang.Object.*(..))") public void objectMethod(){\n}\n', 'nl': 'Method execution pointcuts'}
{'code': 'private Data(){\n}\n', 'nl': 'This utility class cannot be instantiated'}
{'code': 'public void init() throws ServletException {\n}\n', 'nl': 'Initialization of the servlet. <br>'}
{'code': 'public void requestUpdate(){\nsynchronized (updateLock) {\n    updateOnce=true;\n  }\n}\n', 'nl': 'Asks Display2D to update itself next iteration regardless of the current redrawing/updating rule.'}
{'code': 'private void initializeListeners(){\n  addMouseListener(m_listener);\n  addMouseMotionListener(m_listener);\n  addKeyListener(m_listener);\n  addFocusListener(m_listener);\n  m_caret.addCaretListener(m_listener);\n}\n', 'nl': 'Initializes the listeners that handle keyboard and mouse input.'}
{'code': '@Override public void accept(double value){\n  ++count;\n  simpleSum+=value;\n  sumWithCompensation(value);\n  min=Math.min(min,value);\n  max=Math.max(max,value);\n}\n', 'nl': 'Records another value into the summary information.'}
{'code': 'public void add(int v){\n  _add(numberNode(v));\n}\n', 'nl': 'Method for setting value of a field to specified numeric value.'}
{'code': 'public void addLayoutComponent(String name,Component comp){\n}\n', 'nl': 'Adds the specified component with the specified name to the layout.'}
{'code': '@Override public void updateScreen(){\n  tokenBox.updateCursorCounter();\n}\n', 'nl': 'Called from the main game loop to update the screen.'}
{'code': 'private void drawX(Canvas canvas,Paint paint,float x,float y){\n  canvas.drawLine(x - size,y - size,x + size,y + size,paint);\n  canvas.drawLine(x + size,y - size,x - size,y + size,paint);\n}\n', 'nl': 'The graphical representation of an X point shape.'}
{'code': 'public void flushBuffer() throws IOException {\n  log.debug("flush buffer @ CompressionServletResponseWrapper");\n  ((CompressionResponseStream)stream).flush();\n}\n', 'nl': 'Flush the buffer and commit this response.'}
{'code': 'private void deleteStorePath(){\n  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);\n  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);\n  deleteRecursiveSilent(carbonFile);\n}\n', 'nl': 'this method will delete the store path'}
{'code': '@SideEffectFree public XMLStreamException(@Nullable String msg,Location location){\n  super("ParseError at [row,col]:[" + location.getLineNumber() + ","+ location.getColumnNumber()+ "]\\n"+ "Message: "+ msg);\n  this.location=location;\n}\n', 'nl': 'Construct an exception with the assocated message, exception and location.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node nameNode;\n  CharacterData child;\n  String childData;\n  doc=(Document)load("staff",true);\n  elementList=doc.getElementsByTagName("name");\n  nameNode=elementList.item(0);\n  child=(CharacterData)nameNode.getFirstChild();\n  child.insertData(0,"Mss. ");\n  childData=child.getData();\n  assertEquals("characterdataInsertDataBeginningAssert","Mss. Margaret Martin",childData);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'private void clearCachedValues(){\n  cachedTemplateNumberFormats=null;\n  cachedTemplateNumberFormat=null;\n  cachedTempDateFormatArray=null;\n  cachedTempDateFormatsByFmtStrArray=null;\n  cachedCollator=null;\n  cachedURLEscapingCharset=null;\n  cachedURLEscapingCharsetSet=false;\n}\n', 'nl': 'Deletes cached values that meant to be valid only during a single template execution.'}
{'code': 'public CModuleConfiguration(final INaviModule module,final SQLProvider provider,final ListenerProvider<IModuleListener> listeners,final int moduleId,final String name,final String comment,final Date creationDate,final Date modificationDate,final String md5,final String sha1,final IAddress fileBase,final IAddress imageBase,final DebuggerTemplate debuggerTemplate,final boolean isStared,final INaviRawModule rawModule){\n  m_module=module;\n  m_provider=provider;\n  m_listeners=listeners;\n  m_id=moduleId;\n  m_name=name;\n  m_description=comment;\n  m_creationDate=new Date(creationDate.getTime());\n  m_modificationDate=new Date(modificationDate.getTime());\n  m_md5=md5;\n  m_sha1=sha1;\n  m_fileBase=fileBase;\n  m_imageBase=imageBase;\n  m_debuggerTemplate=debuggerTemplate;\n  m_isStared=isStared;\n  m_rawModule=rawModule;\n  updateDebugger(debuggerTemplate);\n}\n', 'nl': 'Creates a new configuration object.'}
{'code': 'public void removeArchive(final int index){\n  this.archives.removeArchive(index);\n}\n', 'nl': 'Removes the specified archive from the archive registry.'}
{'code': 'public void removeAll(){\n  ioObjects.clear();\n}\n', 'nl': 'Removes all Objects from this IOContainer.'}
{'code': 'public void register5(String name,Type arg1,Type arg2,Type arg3,Type arg4,Type arg5,InvocationPlugin plugin){\n  plugins.register(plugin,false,allowOverwrite,declaringType,name,arg1,arg2,arg3,arg4,arg5);\n}\n', 'nl': 'Registers a plugin for a method with 5 arguments.'}
{'code': 'public final void transpose(){\n  float temp;\n  temp=this.m10;\n  this.m10=this.m01;\n  this.m01=temp;\n  temp=this.m20;\n  this.m20=this.m02;\n  this.m02=temp;\n  temp=this.m30;\n  this.m30=this.m03;\n  this.m03=temp;\n  temp=this.m21;\n  this.m21=this.m12;\n  this.m12=temp;\n  temp=this.m31;\n  this.m31=this.m13;\n  this.m13=temp;\n  temp=this.m32;\n  this.m32=this.m23;\n  this.m23=temp;\n}\n', 'nl': 'Sets the value of this matrix to its transpose in place.'}
{'code': 'public void testDefaults() throws Exception {\n  ClassicSimilarity sim=getSimilarity("text",ClassicSimilarity.class);\n  assertEquals(true,sim.getDiscountOverlaps());\n}\n', 'nl': 'Classic w/ default parameters'}
{'code': 'private void handleHttpRequestToHelloWorld(final HttpServerRequest httpRequest){\n  vertx.eventBus().send(Services.HELLO_WORLD.toString(),HelloWorldOperations.SAY_HELLO_WORLD.toString(),null);\n}\n', 'nl': 'This REST endpoint if for hello. It invokes the hello world service via the event bus.'}
{'code': 'public final void handleElement(Element elt,Object data){\n}\n', 'nl': 'Notifies the UserAgent that the input element has been found in the document. This is sometimes called, for example, to handle &lt;a&gt; or &lt;title&gt; elements in a UserAgent-dependant way.'}
{'code': 'public void test_DivideBigDecimalRoundingModeCEILING(){\n  String a="3736186567876876578956958765675671119238118911893939591735";\n  String b="74723342238476237823787879183470";\n  RoundingMode rm=RoundingMode.CEILING;\n  String c="50000260373164286401361914";\n  BigDecimal aNumber=new BigDecimal(new BigInteger(a));\n  BigDecimal bNumber=new BigDecimal(new BigInteger(b));\n  BigDecimal result=aNumber.divide(bNumber,rm);\n  assertEquals("incorrect value",c,result.toString());\n}\n', 'nl': 'java.math.BigDecimal#divide(java.math.BigDecimal, java.math.RoundingMode) divide(BigDecimal, RoundingMode)'}
{'code': '@Override public void start(){\n  super.start();\n}\n', 'nl': 'Called before the delegate will run.'}
{'code': 'public void saveToFile(){\n  String filePath=FileHelper.getCSVFile();\n  saveAsCsv(filePath);\n}\n', 'nl': 'Save landmark data to a file'}
{'code': 'public void testShellAndHoleSelfTouch(){\n  String wkt="POLYGON ((0 0, 0 340, 320 340, 320 0, 120 0, 180 100, 60 100, 120 0, 0 0),   (80 300, 80 180, 200 180, 200 240, 280 200, 280 280, 200 240, 200 300, 80 300))";\n  checkIsValidSTR(wkt,true);\n  checkIsValidDefault(wkt,false);\n}\n', 'nl': 'Tests a geometry with both a shell self-touch and a hole self=touch. This is valid if STR is allowed, but invalid in OGC'}
{'code': 'public BufferedDataOutputStream(String name) throws IOException {\n  this(new FileOutputStream(name));\n}\n', 'nl': 'Open this output stream on the underlying output stream <code>new FileOutputStream(name)</code>.'}
{'code': 'public void addTimezoneName(TimezoneName timezoneName){\n  addProperty(timezoneName);\n}\n', 'nl': 'Adds a traditional, non-standard name for the timezone observance.'}
{'code': 'public static void append(File file,Writer writer) throws IOException {\n  append(file,writer,false);\n}\n', 'nl': 'Append the text supplied by the Writer at the end of the File without writing a BOM.'}
{'code': 'public void clear(){\n  oredCriteria.clear();\n  orderByClause=null;\n  distinct=false;\n}\n', 'nl': 'This method was generated by MyBatis Generator. This method corresponds to the database table help_tip'}
{'code': 'public void closeContextMenu(){\n  mWindow.closePanel(Window.FEATURE_CONTEXT_MENU);\n}\n', 'nl': 'Programmatically closes the most recently opened context menu, if showing.'}
{'code': 'public void putAsString(String key,Long value){\n  String strValue=value.toString();\n  super.put(key,strValue);\n}\n', 'nl': "<p> Adds the given <code>Long</code> value as a string version to the <code>Job</code>'s data map. </p>"}
{'code': 'public void widgetDefaultSelected(SelectionEvent e){\n  widgetSelected(e);\n}\n', 'nl': 'Sent when default selection occurs in the control. The default behavior is to do nothing.'}
{'code': 'public void translate(ConditionOperand c){\nswitch (c.value) {\ncase ConditionOperand.EQUAL:\ncase ConditionOperand.CMPL_EQUAL:\n    value=EQUAL;\n  break;\ncase ConditionOperand.NOT_EQUAL:\ncase ConditionOperand.CMPL_NOT_EQUAL:\nvalue=NOT_EQUAL;\nbreak;\ncase ConditionOperand.LESS:\ncase ConditionOperand.LOWER:\ncase ConditionOperand.CMPG_LESS:\ncase ConditionOperand.CMPL_LESS:\nvalue=LESS;\nbreak;\ncase ConditionOperand.LESS_EQUAL:\ncase ConditionOperand.LOWER_EQUAL:\ncase ConditionOperand.CMPG_LESS_EQUAL:\ncase ConditionOperand.CMPL_LESS_EQUAL:\nvalue=LESS_EQUAL;\nbreak;\ncase ConditionOperand.GREATER:\ncase ConditionOperand.HIGHER:\ncase ConditionOperand.CMPL_GREATER:\ncase ConditionOperand.CMPG_GREATER:\nvalue=GREATER;\nbreak;\ncase ConditionOperand.GREATER_EQUAL:\ncase ConditionOperand.HIGHER_EQUAL:\ncase ConditionOperand.CMPL_GREATER_EQUAL:\ncase ConditionOperand.CMPG_GREATER_EQUAL:\nvalue=GREATER_EQUAL;\nbreak;\ndefault :\norg.jikesrvm.compilers.opt.OptimizingCompilerException.UNREACHABLE();\n}\n}\n', 'nl': 'Translate from ConditionOperand: used by BURS.'}
{'code': 'public static void main(String[] args) throws Exception {\n  AbstractMultiLabelClassifier.evaluation(new MLCBMaD(),args);\n}\n', 'nl': 'Main method for testing.'}
{'code': 'public ZookeeperConfigProvider(URI uri) throws Exception {\n  String connectString=uri.getHost() + ":" + (uri.getPort() == -1 ? 2181 : uri.getPort());\n  String serviceName=uri.getPath().split("/",2)[1];\n  client=CuratorFrameworkFactory.newClient(connectString,new RetryOneTime(1000));\n  client.start();\n  shutdownFunctions.add(null);\n  initProvider(client,serviceName);\n}\n', 'nl': 'Instantiates a new Zookeeper config provider.'}
{'code': '@Override public void clearUndo(){\n  m_UndoList=new Vector<File>();\n}\n', 'nl': 'removes the undo history'}
{'code': '@After public void tearDown(){\n  webClient.closeAllWindows();\n}\n', 'nl': 'Tear down after testing.'}
{'code': 'public void registerFactory(String name,Factory factory){\n  registerFactory(name,registrationGroupName,factory);\n}\n', 'nl': 'Registers a factory for a node name.'}
{'code': 'public void release(boolean majorGC){\n  sweepAllBlocks(majorGC);\n}\n', 'nl': 'Finish up after a collection. We help sweeping all the blocks in parallel.'}
{'code': 'public AttributeWeights(ExampleSet exampleSet){\n  for (  Attribute attribute : exampleSet.getAttributes()) {\n    setWeight(attribute.getName(),1.0d);\n  }\n}\n', 'nl': 'Creates a new attribute weights object containing a weight of 1 for each of the given input attributes.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.498 -0500",hash_original_method="EF115B092B0444968DFDE421B1D070CE",hash_generated_method="C7D761A604DCC217929B7918AB961994") public void connect(Context srcContext,Handler srcHandler,Class<?> klass){\n  connect(srcContext,srcHandler,klass.getPackage().getName(),klass.getName());\n}\n', 'nl': 'Connect handler to a class Sends a CMD_CHANNEL_HALF_CONNECTED message to srcHandler when complete. msg.arg1 = status msg.obj = the AsyncChannel'}
{'code': 'public void clear(){\n  data_.clear();\n  addKnownRates();\n}\n', 'nl': 'Removes all manually added exchange rates from this ExchangeRateManager.'}
{'code': 'public void PCDataAdded(String systemId,int lineNr){\n}\n', 'nl': 'Indicates that a new #PCDATA element has been encountered.'}
{'code': 'private void saveTableVersion(int t_version){\n  Context ctx=mDb.getContext();\n  SharedPreferences tableVersions=ctx.getSharedPreferences(PREFS_TABLE_VERSION,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=tableVersions.edit();\n  editor.putInt(mTableName,t_version);\n  editor.commit();\n}\n', 'nl': 'save table version'}
{'code': 'public void update(byte input){\n  digest.update(input);\n}\n', 'nl': 'update the internal digest with the byte b'}
{'code': 'public void updateLayerStatus(LayerStatusEvent evt){\nswitch (evt.getStatus()) {\ncase LayerStatusEvent.START_WORKING:\n    onoffButton.setSelectedIcon(layerWorking);\n  break;\ncase LayerStatusEvent.FINISH_WORKING:\nonoffButton.setSelectedIcon(layerDone);\nbreak;\n}\n}\n', 'nl': 'Update the Layer status. LayerStatusListener interface method.'}
{'code': 'public boolean isTable(long arc){\nswitch ((int)arc) {\ndefault :\n    break;\n}\nreturn false;\n}\n', 'nl': 'Returns true if "arc" identifies a table object.'}
{'code': 'public WriteMemoryReply(final int packetId,final int errorCode){\n  super(packetId,errorCode);\n}\n', 'nl': 'Creates a new Write Memory reply object.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(isSupported11.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'private void showMessage(String number,String order){\n}\n', 'nl': 'Display the message to user.'}
{'code': 'public void removeAllPhotos(){\n  photos.clear();\n}\n', 'nl': "Removes all photo's from this user"}
{'code': 'public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBorder(context,g,x,y,w,h,orientation);\n}\n', 'nl': 'Paints the border of the track of a scrollbar. The track contains the thumb. This implementation invokes the method of the same name without the orientation.'}
{'code': 'public void overrideDuration(int duration){\n  overriddenDuration=duration;\n}\n', 'nl': "Setting this will override the duration that the item may actually be.  This method should only be used when the item doesn't return the correct duration such as with audio streams. This only overrides the current audio item."}
{'code': 'public void clearParameters(){\nsynchronized (m_reentryGuard) {\n    VariableStack varstack=new VariableStack();\n    m_xcontext.setVarStack(varstack);\n    m_userParams=null;\n  }\n}\n', 'nl': 'Reset the parameters to a null list.'}
{'code': 'private Messages(){\n}\n', 'nl': 'Dis-allow construction ...'}
{'code': 'public void testMoveFileSourceParentRoot() throws Exception {\n  IgfsPath file=new IgfsPath("/" + FILE.name());\n  create(igfs,paths(DIR_NEW,SUBDIR_NEW),paths(file));\n  igfs.rename(file,SUBDIR_NEW);\n  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));\n  checkNotExist(igfs,igfsSecondary,file);\n}\n', 'nl': 'Test file move when source parent is the root.'}
{'code': 'public NativeUnixDirectory(Path path,LockFactory lockFactory,Directory delegate) throws IOException {\n  this(path,DEFAULT_MERGE_BUFFER_SIZE,DEFAULT_MIN_BYTES_DIRECT,lockFactory,delegate);\n}\n', 'nl': 'Create a new NIOFSDirectory for the named location.'}
{'code': '@Deprecated public void addImmutableType(final Class<?> type){\n  addImmutableType(type,true);\n}\n', 'nl': 'Add immutable types. The value of the instances of these types will always be written into the stream even if they appear multiple times. However, references are still supported at deserialization time.'}
{'code': 'public void flush() throws IOException {\n  out.flush();\n}\n', 'nl': 'Flushes this output stream and forces any buffered output bytes to be written out to the stream. <p> The <code>flush</code> method of <code>FilterOutputStream</code> calls the <code>flush</code> method of its underlying output stream.'}
{'code': 'public static void lockdown(){\n  locked=true;\n}\n', 'nl': 'Locks down the error consumer and prevents any further changes to the handler.'}
{'code': 'public void writeData(DataOutput dout) throws IOException {\n  dout.write(getMessage());\n}\n', 'nl': 'writeData -- output the completed Modbus message to dout'}
{'code': 'public static void max(TextField campo,int maxLength){\n  campo.textProperty().addListener(null);\n}\n', 'nl': 'Limitar o quantidade de caractres do campo de texto'}
{'code': 'public void rotate(float angle,int pivotX,int pivotY){\n  impl.rotate(nativeGraphics,angle,pivotX,pivotY);\n}\n', 'nl': 'Rotates the coordinate system around a radian angle using the affine transform'}
{'code': 'public void test_ticket_1105_quads_select1() throws Exception {\n  new TestHelper("ticket_1105_quads_select1","ticket_1105_select1.rq","ticket_1105.trig","ticket_1105.srx").runTest();\n}\n', 'nl': 'Query:  <code> SELECT ?s ?p ?o FROM NAMED <http://example/c> WHERE { ?s ?p ?o } </code> runs fine in quads mode.'}
{'code': 'public void visitBooleanExpression(BooleanExpression expression){\n  controller.getCompileStack().pushBooleanExpression();\n  int mark=controller.getOperandStack().getStackLength();\n  Expression inner=expression.getExpression();\n  inner.visit(this);\n  controller.getOperandStack().castToBool(mark,true);\n  controller.getCompileStack().pop();\n}\n', 'nl': 'return a primitive boolean value of the BooleanExpression.'}
{'code': 'public WebSocketImpl(URI location,Map<String,WebSocketExtensionFactorySpi> extensionFactories) throws URISyntaxException {\n  this(location,extensionFactories,HttpRedirectPolicy.ALWAYS,null,null,new HashMap<String,WsExtensionParameterValuesSpiImpl>(),null,0);\n}\n', 'nl': 'Creates a WebSocket that opens up a full-duplex connection to the target  location on a supported WebSocket provider. Call connect() to establish  the location after adding event listeners.'}
{'code': 'public void paintListBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n', 'nl': 'Paints the border of a list.'}
{'code': 'public void stop(){\n  advertiser.stop();\n  webHandler.stop();\n  started=false;\n}\n', 'nl': 'Stops advertising and handling the Homekit accessories.'}
{'code': 'public void printOptions(PrintWriter pw,int width,Options options,int leftPad,int descPad){\n  StringBuffer sb=new StringBuffer();\n  renderOptions(sb,width,options,leftPad,descPad);\n  pw.println(sb.toString());\n}\n', 'nl': '<p>Print the help for the specified Options to the specified writer,  using the specified width, left padding and description padding.</p>'}
{'code': 'private ConstCollector(SsaMethod ssaMethod){\n  this.ssaMeth=ssaMethod;\n}\n', 'nl': 'Constructs an instance.'}
{'code': 'public void testDoConfigureSetsDomainVersion() throws Exception {\n  configuration.setProperty(WebLogicPropertySet.DOMAIN_VERSION,DOMAIN_VERSION);\n  configuration.doConfigure(container);\n  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");\n  XMLAssert.assertXpathEvaluatesTo(DOMAIN_VERSION,"//weblogic:domain-version",config);\n}\n', 'nl': 'Test changing domain version.'}
{'code': 'public void copyFrom(P2Model other){\n  ius.addAll(other.ius);\n  repos.addAll(other.repos);\n  metadataRepos.addAll(other.metadataRepos);\n  artifactRepos.addAll(other.artifactRepos);\n}\n', 'nl': 'Copies everything from the other model into this one.'}
{'code': 'private void handleMobileCellScroll(){\n  mIsMobileScrolling=handleMobileCellScroll(mHoverCellCurrentBounds);\n}\n', 'nl': 'Determines whether this listview is in a scrolling state invoked by the fact that the hover cell is out of the bounds of the listview;'}
{'code': 'public void accept(MemberValueVisitor visitor){\n  visitor.visitDoubleMemberValue(this);\n}\n', 'nl': 'Accepts a visitor.'}
{'code': '@Override public final void perform(IR ir){\n  this.ir=ir;\n  translateFromSSA(ir);\n  ir.HIRInfo.dictionary=null;\n  ir.actualSSAOptions=null;\n  branchOpts.perform(ir,true);\n  ir.HIRInfo.dominatorsAreComputed=false;\n}\n', 'nl': 'perform the main out-of-ssa transformation'}
{'code': 'public void registerMetrics(MetricsCollector metricsCollector){\n  SystemConfig systemConfig=(SystemConfig)SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);\n  int interval=systemConfig.getHeronMetricsExportIntervalSec();\n  metricsCollector.registerMetric("__jvm-gc-collection-time-ms",jvmGCTimeMs,interval);\n  metricsCollector.registerMetric("__jvm-gc-collection-count",jvmGCCount,interval);\n  metricsCollector.registerMetric("__jvm-gc-time-ms",jvmGCTimeMsPerGCType,interval);\n  metricsCollector.registerMetric("__jvm-gc-count",jvmGCCountPerGCType,interval);\n  metricsCollector.registerMetric("__jvm-uptime-secs",jvmUpTimeSecs,interval);\n  metricsCollector.registerMetric("__jvm-thread-count",jvmThreadCount,interval);\n  metricsCollector.registerMetric("__jvm-daemon-thread-count",jvmDaemonThreadCount,interval);\n  metricsCollector.registerMetric("__jvm-process-cpu-time-nanos",processCPUTimeNs,interval);\n  metricsCollector.registerMetric("__jvm-threads-cpu-time-nanos",threadsCPUTimeNs,interval);\n  metricsCollector.registerMetric("__jvm-other-threads-cpu-time-nanos",otherThreadsCPUTimeNs,interval);\n  metricsCollector.registerMetric("__jvm-threads-user-cpu-time-nanos",threadsUserCPUTimeNs,interval);\n  metricsCollector.registerMetric("__jvm-other-threads-user-cpu-time-nanos",otherThreadsUserCPUTimeNs,interval);\n  metricsCollector.registerMetric("__jvm-process-cpu-load",processCPULoad,interval);\n  metricsCollector.registerMetric("__jvm-fd-count",fdCount,interval);\n  metricsCollector.registerMetric("__jvm-fd-limit",fdLimit,interval);\n  metricsCollector.registerMetric("__jvm-memory-free-mb",jvmMemoryFreeMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-used-mb",jvmMemoryUsedMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-mb-total",jvmMemoryTotalMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-heap-mb-used",jvmMemoryHeapUsedMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-heap-mb-committed",jvmMemoryHeapCommittedMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-heap-mb-max",jvmMemoryHeapMaxMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-non-heap-mb-used",jvmMemoryNonHeapUsedMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-non-heap-mb-committed",jvmMemoryNonHeapCommittedMB,interval);\n  metricsCollector.registerMetric("__jvm-memory-non-heap-mb-max",jvmMemoryNonHeapMaxMB,interval);\n  metricsCollector.registerMetric("__jvm-peak-usage",jvmPeakUsagePerMemoryPool,interval);\n  metricsCollector.registerMetric("__jvm-collection-usage",jvmCollectionUsagePerMemoryPool,interval);\n  metricsCollector.registerMetric("__jvm-estimated-usage",jvmEstimatedUsagePerMemoryPool,interval);\n  metricsCollector.registerMetric("__jvm-buffer-pool",jvmBufferPoolMemoryUsage,interval);\n}\n', 'nl': 'Register metrics with the metrics collector'}
{'code': 'public void markDirty(){\n  this.chunkData.markDirty();\n}\n', 'nl': 'Marks the data as dirty'}
{'code': '@Override public void requestLocationSuccess(String locationName){\n  weatherUtils.requestWeather(locationName,this);\n  getLocation().realLocation=locationName;\n  DatabaseHelper.getInstance(this).insertLocation(getLocation());\n}\n', 'nl': '<br> interface.'}
{'code': 'public void start(){\n  invokeAction(null);\n}\n', 'nl': 'Starts all the invocations.'}
{'code': '@Override public void mouseReleased(){\n  isDragging=false;\n  inputManager.releaseElement(this);\n}\n', 'nl': 'User must call this method to receive layout events relevant to mouse releases.'}
{'code': 'public void update(long n){\n  uncounted.addAndGet(n);\n}\n', 'nl': 'Update the moving average with a new value.'}
{'code': 'private void initialize(URI p_other){\n  m_scheme=p_other.getScheme();\n  m_userinfo=p_other.getUserinfo();\n  m_host=p_other.getHost();\n  m_port=p_other.getPort();\n  m_path=p_other.getPath();\n  m_queryString=p_other.getQueryString();\n  m_fragment=p_other.getFragment();\n}\n', 'nl': 'Initialize all fields of this URI from another URI.'}
{'code': 'public void addGroupColumn(String groupColumnName){\n  m_groups.add(groupColumnName);\n}\n', 'nl': 'Add Group Column'}
{'code': 'public void addTransaction(final Transaction transaction){\n  this.transactions.add(transaction);\n}\n', 'nl': 'Adds a new transaction to this block.'}
{'code': 'public void destroy(){\n  super.destroy();\n}\n', 'nl': 'Destruction of the servlet. <br>'}
{'code': 'public void openOptionsMenu(){\n  mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL,null);\n}\n', 'nl': 'Programmatically opens the options menu. If the options menu is already open, this method does nothing.'}
{'code': 'private void notifyDataSetChanged(){\n  addDebugText("notifyDataSetChanged");\n  adapter.notifyDataSetChanged();\n}\n', 'nl': 'Notifies the list view adapter the data has changed and refreshes the list view'}
{'code': 'private SystemPropertiesProxy(){\n}\n', 'nl': 'This class cannot be instantiated'}
{'code': '@Override public void offsetWrite(ObjectReference src,Address slot,Offset value,Word metaDataA,Word metaDataB,int mode){\n  VM.barriers.offsetWrite(src,value,metaDataA,metaDataB,mode);\n}\n', 'nl': 'Write an Offset. Take appropriate write barrier actions.'}
{'code': '@Override public void onClick(final DialogInterface dialog,final int which){\n  Visibility visibility=Visibility.PRIVATE;\nswitch (visibilitySpinner.getSelectedItemPosition()) {\ncase 0:\n    visibility=Visibility.PRIVATE;\n  break;\ncase 1:\nvisibility=Visibility.PUBLIC;\nbreak;\ncase 2:\nvisibility=Visibility.TRACKABLE;\nbreak;\ncase 3:\nvisibility=Visibility.IDENTIFIABLE;\nbreak;\n}\ncaller.performTrackUpload(descriptionField.getText().toString(),tagsField.getText().toString(),visibility);\n}\n', 'nl': 'note: the current code will only work if the string array in strings.xml is not changed'}
{'code': '@Override public void writeValueEOF(){\n  m_oId=null;\n  m_jTaxID.setText(null);\n  m_jSearchkey.setText(null);\n  m_jName.setText(null);\n  m_CategoryModel.setSelectedKey(null);\n  m_jNotes.setText(null);\n  txtMaxdebt.setText(null);\n  txtDiscount.setText(null);\n  txtCurdebt.setText(null);\n  txtCurdate.setText(null);\n  m_jVisible.setSelected(false);\n  jcard.setText(null);\n  txtFirstName.setText(null);\n  txtLastName.setText(null);\n  txtEmail.setText(null);\n  txtPhone.setText(null);\n  txtPhone2.setText(null);\n  txtFax.setText(null);\n  m_jImage.setImage(null);\n  txtAddress.setText(null);\n  txtAddress2.setText(null);\n  txtPostal.setText(null);\n  txtCity.setText(null);\n  txtRegion.setText(null);\n  txtCountry.setText(null);\n  j_mDOB.setText(null);\n  m_jTaxID.setEnabled(false);\n  m_jSearchkey.setEnabled(false);\n  m_jName.setEnabled(false);\n  m_jCategory.setEnabled(false);\n  m_jNotes.setEnabled(false);\n  txtMaxdebt.setEnabled(false);\n  txtDiscount.setEnabled(false);\n  txtCurdebt.setEnabled(false);\n  txtCurdate.setEnabled(false);\n  m_jVisible.setEnabled(false);\n  jcard.setEnabled(false);\n  txtFirstName.setEnabled(false);\n  txtLastName.setEnabled(false);\n  txtEmail.setEnabled(false);\n  txtPhone.setEnabled(false);\n  txtPhone2.setEnabled(false);\n  txtFax.setEnabled(false);\n  m_jImage.setEnabled(false);\n  txtAddress.setEnabled(false);\n  txtAddress2.setEnabled(false);\n  txtPostal.setEnabled(false);\n  txtCity.setEnabled(false);\n  txtRegion.setEnabled(false);\n  txtCountry.setEnabled(false);\n  jButton2.setEnabled(false);\n  jButton3.setEnabled(false);\n  jTable1.setEnabled(false);\n  jTable1.setVisible(false);\n  j_mDOB.setEnabled(false);\n}\n', 'nl': 'Write EOF'}
{'code': 'private void reportError(String context,String fmt,Object... args){\n  String message=String.format(fmt,args);\n  reasons.add(context + ": " + message);\n}\n', 'nl': 'Report an error in the current context.'}
{'code': 'public void close(){\n  client.close();\n  client=null;\n}\n', 'nl': 'Close the zookeeper client.'}
{'code': 'public AbstractItem(final int id,@Nullable final CharSequence title){\n  this.id=id;\n  this.title=title;\n}\n', 'nl': 'Creates a new item.'}
{'code': 'public void testFilterPlacement04(){\n  new Helper(){\n{\n      given=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("x2"),stmtPatternWithVarOptional("x2"),stmtPatternWithVar("x2"),stmtPatternWithVars("x2","x3"),stmtPatternWithVarOptional("y2"),filterWithVars("x1","x2"),filterWithVar("y2")));\n      expected=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("x2"),stmtPatternWithVarOptional("x2"),stmtPatternWithVar("x2"),filterWithVars("x1","x2"),stmtPatternWithVars("x2","x3"),stmtPatternWithVarOptional("y2"),filterWithVar("y2")));\n    }\n  }\n.testWhileIgnoringExplainHints();\n}\n', 'nl': 'Test filter placement where one filter variables is bound in the first, one in the join group'}
{'code': 'public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){\n  paintBackground(context,g,x,y,w,h,orientation);\n}\n', 'nl': 'Paints the background of a slider. This implementation invokes the method of the same name without the orientation.'}
{'code': 'public void updateUI(){\n  setUI((SeparatorUI)UIManager.getUI(this));\n}\n', 'nl': 'Resets the UI property to a value from the current look and feel.'}
{'code': '@Override public void validate(){\n}\n', 'nl': 'empty method'}
{'code': 'public void testSerialization(){\n  DefaultPieDataset d1=new DefaultPieDataset();\n  d1.setValue("C1",new Double(234.2));\n  d1.setValue("C2",null);\n  d1.setValue("C3",new Double(345.9));\n  d1.setValue("C4",new Double(452.7));\n  DefaultPieDataset d2=(DefaultPieDataset)TestUtilities.serialised(d1);\n  assertEquals(d1,d2);\n}\n', 'nl': 'Serialize an instance, restore it, and check for equality.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList addressList;\n  Node testNode;\n  NamedNodeMap attributes;\n  Attr streetAttr;\n  String value;\n  doc=(Document)load("hc_staff",true);\n  addressList=doc.getElementsByTagName("acronym");\n  testNode=addressList.item(3);\n  attributes=testNode.getAttributes();\n  streetAttr=(Attr)attributes.getNamedItem("class");\n  streetAttr.setValue("Y&ent1;");\n  value=streetAttr.getValue();\n  assertEquals("value","Y&ent1;",value);\n  value=streetAttr.getNodeValue();\n  assertEquals("nodeValue","Y&ent1;",value);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public static void correctTableFocusTraversal(JTable table){\n  table.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,Collections.singleton(AWTKeyStroke.getAWTKeyStroke("TAB")));\n  table.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,Collections.singleton(AWTKeyStroke.getAWTKeyStroke("shift TAB")));\n}\n', 'nl': 'Make JTable handle TAB key as all other components - move focus to next/previous components. <p>Default Swing behaviour for table is to move focus to next/previous cell inside the table.</p>'}
{'code': '@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.tv_album_list);\n}\n', 'nl': 'Called when the activity is first created.'}
{'code': 'public void logInWithReadPermissions(Fragment fragment,Collection<String> permissions){\n  validateReadPermissions(permissions);\n  LoginClient.Request loginRequest=createLoginRequest(permissions);\n  startLogin(new FragmentStartActivityDelegate(fragment),loginRequest);\n}\n', 'nl': 'Logs the user in with the requested read permissions.'}
{'code': '@Override public void menuAboutToShow(IMenuManager menuManager){\n  super.menuAboutToShow(menuManager);\n  MenuManager submenuManager=null;\n  submenuManager=new MenuManager(EipEditorPlugin.INSTANCE.getString("_UI_CreateChild_menu_item"));\n  populateManager(submenuManager,createChildActions,null);\n  menuManager.insertBefore("edit",submenuManager);\n  submenuManager=new MenuManager(EipEditorPlugin.INSTANCE.getString("_UI_CreateSibling_menu_item"));\n  populateManager(submenuManager,createSiblingActions,null);\n  menuManager.insertBefore("edit",submenuManager);\n}\n', 'nl': 'This populates the pop-up menu before it appears. <!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n', 'nl': 'Enters a new lexical state'}
{'code': 'public void remove(String userId) throws ServerException {\n  requireNonNull(userId,"Required non-null user id");\n  preferenceDao.remove(userId);\n}\n', 'nl': "Removes(clears) user's preferences."}
{'code': 'public void stopMonitorApiCnx(Activity activity){\n  mClientsToNotify.remove(activity);\n}\n', 'nl': 'Stop monitoring the API connection'}
{'code': 'public void addRow(Expression[] expr){\n  list.add(expr);\n}\n', 'nl': 'Add a row to this merge statement.'}
{'code': 'public void pushSAXLocatorNull(){\n  m_saxLocations.push(null);\n}\n', 'nl': 'Push a slot on the locations stack so that setSAXLocator can be  repeatedly called.'}
{'code': 'public static void deleteDbFiles(File dbFile){\n  dbFile.delete();\n  new File(dbFile + "-journal").delete();\n}\n', 'nl': 'Deletes database and related journal file'}
{'code': 'public synchronized void clear(){\n  cookies.clear();\n}\n', 'nl': 'Clears all cookies.'}
{'code': 'public static void showAddressOnMap(Context mContext,String address){\n  address=address.replace(\' \',\'+\');\n  Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse("geo:0,0?q=" + address));\n  mContext.startActivity(geoIntent);\n}\n', 'nl': 'use to show address location pin on map.'}
{'code': 'public void ignoreUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){\n  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionIgnore,userId);\n}\n', 'nl': 'Modify the relationship between the current user and the target user. Ignore a user. <p/> REQUIREMENTS : InstagramKitLoginScopeRelationships during authentication. <p/> To request access to this endpoint, please complete this form - https://help.instagram.com/contact/185819881608116'}
{'code': 'public static void sort(short[] array){\n  DualPivotQuicksort.sort(array);\n}\n', 'nl': 'Sorts the specified array in ascending numerical order.'}
{'code': 'public static void rethrow(Throwable t){\n  Rethrow.<Error>rethrow0(t);\n}\n', 'nl': 'Rethrows <code>t</code> (identical object).'}
{'code': 'public void initWithContext(URI uri,Context ctx,SpeechConfiguration sc){\n  this.setHostURL(uri);\n  this.appCtx=ctx;\n  this.sConfig=sc;\n}\n', 'nl': 'Init the shared instance with the context'}
{'code': 'public void onIceCandidate(String endpointName,String candidate,int sdpMLineIndex,String sdpMid,String participantId) throws RoomException {\n  log.debug("Request [ICE_CANDIDATE] endpoint={} candidate={} " + "sdpMLineIdx={} sdpMid={} ({})",endpointName,candidate,sdpMLineIndex,sdpMid,participantId);\n  Participant participant=getParticipant(participantId);\n  participant.addIceCandidate(endpointName,new IceCandidate(candidate,sdpMid,sdpMLineIndex));\n}\n', 'nl': 'Request that carries info about an ICE candidate gathered on the client side. This information is required to implement the trickle ICE mechanism. Should be triggered or called whenever an icecandidate event is created by a RTCPeerConnection.'}
{'code': 'public void debug(String msg,Throwable t){\n  log(Log.VERBOSE,msg,t);\n}\n', 'nl': 'Log an exception (throwable) at level DEBUG with an accompanying message.'}
{'code': 'public void addSequence(GenericClass clazz,TestCase sequence){\n  ObjectSequence seq=new ObjectSequence(clazz,sequence);\n  addSequence(seq);\n}\n', 'nl': 'Insert a new sequence for given Type'}
{'code': '@Override @Pure public void instantiate(){\n}\n', 'nl': 'Cause instantiation to take place. This is a no-op for unboxed types.'}
{'code': 'public void addActionListener(ActionListener l){\n  dispatcher.addListener(l);\n}\n', 'nl': 'Allows binding a listener to user selection actions'}
{'code': 'public void init(Controller c){\n  super.init(c);\n  display=new Display2D(ForagingHoneyBeeSimulation.WIDTH,ForagingHoneyBeeSimulation.HEIGHT,this,1);\n  displayFrame=display.createFrame();\n  displayFrame.setTitle("Honey bee playground");\n  c.registerFrame(displayFrame);\n  displayFrame.setVisible(true);\n  display.attach(vidPortrayal,"Agents");\n  display.setInterval(1);\n  initGraphDisplays(c);\n}\n', 'nl': 'Setting up the visuals.'}
{'code': 'public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){\n  XYChart chart=getXYChart(seriesIndex);\n  chart.drawLegendShape(canvas,renderer,x,y,getChartSeriesIndex(seriesIndex),paint);\n}\n', 'nl': 'The graphical representation of the legend shape.'}
{'code': 'public void mousePress(int x,int y,int mouseButton){\n  mouseX=x;\n  mouseY=y;\n  timestamp=System.currentTimeMillis();\n  velocity=0;\n  amplitude=0;\n}\n', 'nl': 'Mouse button was pressed'}
{'code': 'public void show(RenameRefactoringSession renameRefactoringSession){\n  this.renameRefactoringSession=renameRefactoringSession;\n  prepareWizard();\nswitch (renameRefactoringSession.getWizardType()) {\ncase COMPILATION_UNIT:\n    view.setTitle(locale.renameCompilationUnitTitle());\n  view.setVisiblePatternsPanel(true);\nview.setVisibleFullQualifiedNamePanel(true);\nview.setVisibleSimilarlyVariablesPanel(true);\nbreak;\ncase PACKAGE:\nview.setTitle(locale.renamePackageTitle());\nview.setVisiblePatternsPanel(true);\nview.setVisibleFullQualifiedNamePanel(true);\nview.setVisibleRenameSubpackagesPanel(true);\nbreak;\ncase TYPE:\nview.setTitle(locale.renameTypeTitle());\nview.setVisiblePatternsPanel(true);\nview.setVisibleFullQualifiedNamePanel(true);\nview.setVisibleSimilarlyVariablesPanel(true);\nbreak;\ncase FIELD:\nview.setTitle(locale.renameFieldTitle());\nview.setVisiblePatternsPanel(true);\nbreak;\ncase ENUM_CONSTANT:\nview.setTitle(locale.renameEnumTitle());\nview.setVisiblePatternsPanel(true);\nbreak;\ncase TYPE_PARAMETER:\nview.setTitle(locale.renameTypeVariableTitle());\nbreak;\ncase METHOD:\nview.setTitle(locale.renameMethodTitle());\nview.setVisibleKeepOriginalPanel(true);\nbreak;\ncase LOCAL_VARIABLE:\nview.setTitle(locale.renameLocalVariableTitle());\nbreak;\ndefault :\n}\nview.show();\n}\n', 'nl': 'Show Rename window with the special information.'}
{'code': 'public void goToNextColor(){\n  mColorIndex=(mColorIndex + 1) % (mColors.length);\n}\n', 'nl': 'Proceed to the next available ring color. This will automatically wrap back to the beginning of colors.'}
{'code': '@Override public void unregisterListener(RadioListener mRadioListener){\n  log("Register unregistered.");\n  mService.unregisterListener(mRadioListener);\n}\n', 'nl': 'Unregister listeners'}
{'code': 'public void write(String str,int off,int len) throws IOException {\n  internalOut.write(str,off,len);\n}\n', 'nl': 'Writes a portion of a string.'}
{'code': 'public void onMotion(MotionEvent event,Interaction iact){\n}\n', 'nl': 'Notifies listener of a mouse motion event. A motion event is dispatched when no button is currently pressed, in an isolated "one shot" interaction, and always goes to the layer hit by the event coordinates.'}
{'code': 'public void tank(double leftSpeed,double rightSpeed){\n  leftSpeed=speedLimiter.applyAsDouble(leftSpeed);\n  rightSpeed=speedLimiter.applyAsDouble(rightSpeed);\n  left.setSpeed(leftSpeed);\n  right.setSpeed(rightSpeed);\n}\n', 'nl': 'Provide tank steering using the stored robot configuration. This function lets you directly provide joystick values from any source.'}
{'code': 'public void releaseStreamAllocation() throws IOException {\n  streamAllocation.release();\n}\n', 'nl': 'Configure the socket connection to be either pooled or closed when it is either exhausted or closed. If it is unneeded when this is called, it will be released immediately.'}
{'code': 'public void removeControllerListener(ControllerListener listener){\n  listeners.removeListener(listener);\n}\n', 'nl': 'Removes the specified listener so it no longer receives controller events.'}
{'code': 'public DropDownTriangle(final UpDirection upState,final boolean down,final String upLabel,final String downLabel,final Window parent){\n  ddTriangle=new ClickableTriangle(upState,down);\n  upTriLabel=new JLabel(upLabel);\n  downTriLabel=new JLabel(downLabel);\n  this.parent=parent;\n  this.down=down;\n  this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));\n  initLayout();\n  addMouseListener(this);\n}\n', 'nl': 'Creates a drop down triangle with a label displayed when it is in the "up" state and a label displayed when it is in the "down" state. The triangle points either left or right in the "up" state and starts out either "up" or down.'}
{'code': 'public CPaper(double x,double y,int units,boolean landscape,double left,double top,double right,double bottom){\n  super();\n  setMediaSize(x,y,units,landscape);\n  setImageableArea(left,top,getWidth() - left - right,getHeight() - top - bottom);\n}\n', 'nl': 'Get Media Size'}
{'code': 'public final void testValidateSucceeds(){\n  IRIValidator iriValidator=new IRIValidator("foo");\n  assertTrue(iriValidator.validate(""));\n  assertTrue(iriValidator.validate("http://www.foo.com"));\n  assertTrue(iriValidator.validate("http://www.foo123.com"));\n  assertTrue(iriValidator.validate("http://www.foo.com/bar/bar_2"));\n  assertTrue(iriValidator.validate("http://www.foo123.com/bar/bar_2"));\n  assertTrue(iriValidator.validate("http://foo.com"));\n  assertTrue(iriValidator.validate("http://foo123.com"));\n  assertTrue(iriValidator.validate("http://www.foo.com:8080"));\n  assertTrue(iriValidator.validate("http://www.foo123.com:8080"));\n  assertTrue(iriValidator.validate("http://www.foo.com.au"));\n  assertTrue(iriValidator.validate("http://www.foo123.com.au"));\n  assertTrue(iriValidator.validate("www.foo.com"));\n  assertTrue(iriValidator.validate("www.foo123.com"));\n}\n', 'nl': 'Tests the functionality of the validate-method, if it succeeds.'}
{'code': 'public void addWhitelistURL(String URL){\n  serviceWhitelist.add(URL);\n}\n', 'nl': 'Add URL to service whitelist'}
{'code': 'public void testXformLoadFailed_ShowsError(){\n  mController.init();\n  mFakeGlobalEventBus.post(new FetchXformFailedEvent(FetchXformFailedEvent.Reason.UNKNOWN));\n  verify(mMockUi).showError(R.string.fetch_xform_failed_unknown_reason);\n}\n', 'nl': 'Tests that an error message is displayed when the xform fails to load.'}
{'code': 'public void newProcessingInstruction(String target,Reader reader){\n}\n', 'nl': 'This method is called when a processing instruction is encountered. PIs with target "xml" are handled by the parser.'}
{'code': 'public void start(){\n  thd=new Thread(this,"ConnectorHandler: initializing");\n  thd.start();\n}\n', 'nl': 'Start the thread to serve thl changes to requesting slaves.'}
{'code': 'public void testApp(){\n  assertTrue(true);\n}\n', 'nl': 'Rigourous Test :-)'}
{'code': 'public void add(Input key){\nsynchronized (this.keys) {\n    this.keys.put(key.getEvent(),key);\n  }\n}\n', 'nl': 'Adds the given key.'}
{'code': 'public void rebalanceNestedOperations(){\n  nestedOperations=preparedOperations;\n}\n', 'nl': 'Used to make things stable again after an operation has failed between a workspace.prepareOperation() and workspace.beginOperation(). This method can only be safely called from inside a workspace operation. Should NOT be called from outside a prepareOperation/endOperation block.'}
{'code': 'public void incThreadIdentifiers(){\n  this._stats.incInt(_threadIdentifiersId,1);\n}\n', 'nl': 'Increments the "threadIdentifiers" stat by 1.'}
{'code': 'public void notifyDataChanged(){\n  init(mDataSets);\n}\n', 'nl': 'Call this method to let the CartData know that the underlying data has changed.'}
{'code': 'public static void remove(final String key){\n  SharedPreferences prefs=getOptimusPref();\n  final Editor editor=prefs.edit();\n  editor.remove(key).apply();\n}\n', 'nl': 'Removes a preference value.'}
{'code': 'private void initNullGraphicsDevice(){\n  graphicsDevices[NULL_GRAPHICS_DEVICE_INDEX]=NullGraphicsDevice.getInstance();\n}\n', 'nl': 'According to GNUR 0 index is for the Null graphics device.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node nameNode;\n  CharacterData child;\n  String substring;\n  doc=(Document)load("staff",false);\n  elementList=doc.getElementsByTagName("name");\n  nameNode=elementList.item(0);\n  child=(CharacterData)nameNode.getFirstChild();\n  substring=child.substringData(0,8);\n  assertEquals("characterdataSubStringValueAssert","Margaret",substring);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void println(char x){\n  out.println(x);\n}\n', 'nl': 'Print a char and then terminate the line.'}
{'code': 'public static void log(String event,String user,String reason,Map<String,Object> data){\n  Map<String,Object> message=new LinkedHashMap<>();\n  message.put(EVENT_PARAM,event + FAILURE_SUFFIX);\n  message.put(USER_PARAM,user);\n  message.put(REASON_PARAM,reason);\n  message.put(DATA_PARAM,data);\n  log(JsonUtils.getSerializer().toJson(message));\n}\n', 'nl': 'Log a failure event with data for a user.'}
{'code': 'public ClientResourceException(final int statusCode){\n  this.statusCode=statusCode;\n}\n', 'nl': 'Creates a new exposition instance with the HTTP status code argument.'}
{'code': 'public void addTaskEventListener(HeadlessJsTaskEventListener listener){\n  mHeadlessJsTaskEventListeners.add(listener);\n}\n', 'nl': 'Register a task lifecycle event listener.'}
{'code': 'public void buildLayout(){\n  final HorizontalLayout horizontalLayout=new HorizontalLayout();\n  upload=new Upload();\n  upload.setEnabled(false);\n  upload.setButtonCaption("Bulk Upload");\n  upload.setReceiver(this);\n  upload.setImmediate(true);\n  upload.setWidthUndefined();\n  upload.addSucceededListener(this);\n  upload.addFailedListener(this);\n  upload.addStartedListener(this);\n  horizontalLayout.addComponent(upload);\n  horizontalLayout.setComponentAlignment(upload,Alignment.BOTTOM_RIGHT);\n  setCompositionRoot(horizontalLayout);\n}\n', 'nl': 'Intialize layout.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.775 -0400",hash_original_method="5FCAC44BDC2A7F1CC8FB3837FD1118B9",hash_generated_method="211D4B144F9A7E0B9FE154FE655316F1") public void stop(){\n  SR_RecognizerStop(mRecognizer);\n  SR_RecognizerDeactivateRule(mRecognizer,mActiveGrammar.mGrammar,"trash");\n}\n', 'nl': 'Stop the <code>Recognizer</code>.'}
{'code': 'public void addSeriesRenderer(SimpleSeriesRenderer renderer){\n  mRenderers.add(renderer);\n}\n', 'nl': 'Adds a simple renderer to the multiple renderer.'}
{'code': '@Override public void logError(final String message,final Throwable throwable){\nswitch (mLevel) {\ndefault :\ncase Debug:\ncase Error:\n    Log.e(getTag(),message,throwable);\n}\n}\n', 'nl': 'Logs an error message with throwable.'}
{'code': 'public void executeASync(ProcessInfo pi){\n}\n', 'nl': 'Method to be executed async. Called from the Worker'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node employeeNode;\n  Node clonedNode;\n  Node parentNode;\n  doc=(Document)load("hc_staff",true);\n  elementList=doc.getElementsByTagName("p");\n  employeeNode=elementList.item(1);\n  clonedNode=employeeNode.cloneNode(false);\n  parentNode=clonedNode.getParentNode();\n  assertNull("nodeCloneGetParentNullAssert1",parentNode);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void releaseMemory(){\n  corpus=null;\n  realTokens=null;\n  originalTokens=null;\n  tokenToNodeMap=null;\n  originalTokenToNodeMap=null;\n  tokenToListInfo=null;\n  wsClassifier=null;\n  hposClassifier=null;\n}\n', 'nl': 'Free anything we can to reduce memory footprint after a format(). keep analysis, testDoc as they are used for results.'}
{'code': 'private void write(double duration_home_work_min,double distance_home_work_meter,double duration_work_home_min,double distance_work_home_meter,String mode,Person p){\n  UrbanSimPersonCSVWriter.write(p.getId().toString(),duration_home_work_min,distance_home_work_meter,duration_work_home_min,distance_work_home_meter,mode);\n}\n', 'nl': 'writing agent performances to csv file'}
{'code': 'public void testRandomStrings() throws Exception {\n  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);\n}\n', 'nl': 'blast some random strings through the analyzer'}
{'code': '@RpcMethod public void ping() throws InterruptedException, RpcException {\n  SyncHandler<Object,AgentControl.AsyncClient.ping_call> syncHandler=new SyncHandler<>();\n  ping(syncHandler);\n  syncHandler.await();\n}\n', 'nl': 'This method performs a synchronous Thrift call to ping the host.'}
{'code': 'public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n', 'nl': "Paints the border of the window containing the tool bar when it has been detached from it's primary frame."}
{'code': 'public void print(java.io.PrintWriter out){\n  new Printer(this,out).print();\n}\n', 'nl': 'Prints this stack map.'}
{'code': 'public void close() throws IOException {\n}\n', 'nl': 'Closing a <tt>StringWriter</tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt>IOException</tt>.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(elementsetattributenodens02.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'private Images(){\n}\n', 'nl': 'This utility class cannot be instantiated'}
{'code': 'public XCalDocument(InputStream in) throws SAXException, IOException {\n  this(XmlUtils.toDocument(in));\n}\n', 'nl': 'Parses an xCal document from an input stream.'}
{'code': 'public void incMarkerEventsConflated(){\n  this._stats.incLong(_markerEventsConflatedId,1);\n}\n', 'nl': 'Increments the "markerEventsConflated" stat by 1.'}
{'code': 'public void testNodeDocumentFragmentNormalize1() throws Throwable {\n  Document doc;\n  DocumentFragment docFragment;\n  String nodeValue;\n  Text txtNode;\n  Node retval;\n  doc=(Document)load("hc_staff",builder);\n  docFragment=doc.createDocumentFragment();\n  txtNode=doc.createTextNode("foo");\n  retval=docFragment.appendChild(txtNode);\n  txtNode=doc.createTextNode("bar");\n  retval=docFragment.appendChild(txtNode);\n  docFragment.normalize();\n  txtNode=(Text)docFragment.getFirstChild();\n  nodeValue=txtNode.getNodeValue();\n  assertEquals("normalizedNodeValue","foobar",nodeValue);\n  retval=txtNode.getNextSibling();\n  assertNull("singleChild",retval);\n}\n', 'nl': 'Runs the test case.'}
{'code': '@Override public void registerOutParameter(int parameterIndex,int sqlType) throws SQLException {\n  registerOutParameter(parameterIndex);\n}\n', 'nl': 'Registers the given OUT parameter.'}
{'code': 'public void addTag(String text){\n  addTag(text,mChildViews.size());\n}\n', 'nl': 'Inserts the specified TagView into this ContainerLayout at the end.'}
{'code': 'public void unsetId(){\n  issetBitfield=EncodingUtils.clearBit(issetBitfield,ID_ISSET_ID);\n}\n', 'nl': 'Description: <br>'}
{'code': 'public void removeObserver(final Observer observer){\n  observers.remove(observer);\n}\n', 'nl': 'remove observer from list'}
{'code': 'public static void clearWinContext(int WindowNo){\n  clearWinContext(getCtx(),WindowNo);\n}\n', 'nl': 'Clean up context for Window (i.e. delete it)'}
{'code': 'public void translateRectInScreenToAppWindow(Rect rect){\n  rect.scale(applicationInvertedScale);\n}\n', 'nl': "Translate a Rect in screen coordinates into the app window's coordinates."}
{'code': '@HLEFunction(nid=0x5F10D406,version=150) public void sceKernelCpuResumeIntr(int flagInterrupts){\n  hleKernelCpuResumeIntr(flagInterrupts);\n}\n', 'nl': 'Resume all interrupts.'}
{'code': 'public DViewCertCsrPem(JDialog parent,String title,PKCS10CertificationRequest pkcs10Csr) throws CryptoException {\n  super(parent,title,ModalityType.DOCUMENT_MODAL);\n  this.pkcs10Csr=pkcs10Csr;\n  initComponents();\n}\n', 'nl': 'Creates new DViewCertCsrPem dialog where the parent is a dialog.'}
{'code': 'private void init(){\n  timeOut=Integer.parseInt(Configurator.getInstance().getProperty(ConfigurationKeys.KEY_SERVER_CACHE_ENTRY_TIMEOUT)) * 1000;\n}\n', 'nl': 'Private methods'}
{'code': 'private ZyNodeBuilder(){\n}\n', 'nl': 'You are not supposed to instantiate this class.'}
{'code': '@Override public void paintComponent(Graphics g){\n  Graphics2D g2d=(Graphics2D)g;\n  GradientPaint gradient=new GradientPaint(0,0,color1,getWidth(),getHeight(),color2);\n  g2d.setPaint(gradient);\n  g.fillRect(0,0,this.getWidth(),this.getHeight());\n}\n', 'nl': 'Paint component with gradient.'}
{'code': 'private void registerListener(TrackDataType trackDataType){\nswitch (trackDataType) {\ncase TRACKS_TABLE:\n    dataSource.registerContentObserver(TracksColumns.CONTENT_URI,tracksTableObserver);\n  break;\ncase WAYPOINTS_TABLE:\ndataSource.registerContentObserver(WaypointsColumns.CONTENT_URI,waypointsTableObserver);\nbreak;\ncase SAMPLED_IN_TRACK_POINTS_TABLE:\ndataSource.registerContentObserver(TrackPointsColumns.CONTENT_URI,trackPointsTableObserver);\nbreak;\ncase SAMPLED_OUT_TRACK_POINTS_TABLE:\nbreak;\ncase PREFERENCE:\ndataSource.registerOnSharedPreferenceChangeListener(preferenceListener);\nbreak;\ndefault :\nbreak;\n}\n}\n', 'nl': 'Registers a listener with data source.'}
{'code': '@Override public void initCPTs(BayesNet bayesNet) throws Exception {\n  bayesNet.m_Distributions=new Estimator[bayesNet.m_Instances.numAttributes()][2];\n}\n', 'nl': 'initCPTs reserves space for CPTs and set all counts to zero'}
{'code': 'public void showNext(){\n  setDisplayedChild(mWhichChild + 1);\n}\n', 'nl': 'Manually shows the next child.'}
{'code': '@Override public void closingCancel(){\n}\n', 'nl': 'Actions to perform when the user has closed the dialog with the Cancel button'}
{'code': '@Deprecated public void write(DataOutput out) throws IOException {\n  this.comparator.write(out);\n}\n', 'nl': 'Old interface in hbase-0.94'}
{'code': 'public void add(int index,int element){\n  checkRangeIncludingEndpoint(index);\n  ensureCapacity(size + 1);\n  int numtomove=size - index;\n  System.arraycopy(array,index,array,index + 1,numtomove);\n  array[index]=element;\n  size++;\n}\n', 'nl': 'Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).'}
{'code': 'public HierarchicalClusterModel(ClusterModel clusterModel){\n  rootNode=new HierarchicalClusterNode("root");\n  for (  Cluster cluster : clusterModel.getClusters()) {\n    rootNode.addSubNode(new HierarchicalClusterLeafNode(cluster.getClusterId(),cluster.getExampleIds()));\n  }\n}\n', 'nl': 'Creates a hierarchical cluster model by copying a flat one.'}
{'code': 'private void log(String str){\n  Log.i(this.getClass().getSimpleName(),"-----------------" + str);\n}\n', 'nl': 'send message to logcat'}
{'code': 'public static void add(List<String> options,char option,Object value){\n  add(options,"" + option,value);\n}\n', 'nl': 'Adds the array to the options.'}
{'code': 'public void init(ModeledAuthenticatedUser currentUser,ConnectionModel connectionModel){\n  this.currentUser=currentUser;\n  this.connectionModel=connectionModel;\n}\n', 'nl': 'Initializes this configuration, associating it with the current authenticated user and populating it with data from the given model object.'}
{'code': 'public static void logStart(@Nullable IgniteLogger log,Class<?> clazz,long start){\n  log0(log,start,"[" + clazz.getSimpleName() + "]: STARTED");\n}\n', 'nl': 'Log start.'}
{'code': 'public static void main(String[] args){\n  doMain(args);\n}\n', 'nl': 'Application entry point.'}
{'code': 'public LevelDBBlockStore(Context context,File directory) throws BlockStoreException {\n  this(context,directory,JniDBFactory.factory);\n}\n', 'nl': 'Creates a LevelDB SPV block store using the JNI/C++ version of LevelDB.'}
{'code': 'public void testApp(){\n  assertTrue(true);\n}\n', 'nl': 'Rigourous Test :-)'}
{'code': '@Override public void registerResourceFactories(ResourceSet resourceSet){\n  super.registerResourceFactories(resourceSet);\n}\n', 'nl': "This can be used to update the resource set's resource factory registry with all needed factories."}
{'code': 'public static void verifyClearRecursively(FinishedTriggers finishedSet){\n  ExecutableTriggerStateMachine trigger=ExecutableTriggerStateMachine.create(AfterAllStateMachine.of(AfterFirstStateMachine.of(AfterPaneStateMachine.elementCountAtLeast(3),AfterWatermarkStateMachine.pastEndOfWindow()),AfterAllStateMachine.of(AfterPaneStateMachine.elementCountAtLeast(10),AfterProcessingTimeStateMachine.pastFirstElementInPane())));\n  setFinishedRecursively(finishedSet,trigger);\n  assertTrue(finishedSet.isFinished(trigger));\n  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0)));\n  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0).subTriggers().get(0)));\n  assertTrue(finishedSet.isFinished(trigger.subTriggers().get(0).subTriggers().get(1)));\n  finishedSet.clearRecursively(trigger.subTriggers().get(1));\n  assertTrue(finishedSet.isFinished(trigger));\n  verifyFinishedRecursively(finishedSet,trigger.subTriggers().get(0));\n  verifyUnfinishedRecursively(finishedSet,trigger.subTriggers().get(1));\n}\n', 'nl': 'Tests that clearing a trigger recursively clears all of that triggers subTriggers, but no others.'}
{'code': 'public X509CertImpl(byte[] encoding) throws IOException {\n  this((Certificate)Certificate.ASN1.decode(encoding));\n}\n', 'nl': 'Constructs the instance on the base of ASN.1 encoded form of X.509 certificate provided via array of bytes.'}
{'code': 'private Zeroes(){\n}\n', 'nl': 'This class is uninstantiable.'}
{'code': 'public void proceed(String username,String password){\n  this.handler.proceed(username,password);\n}\n', 'nl': 'Instructs the WebView to proceed with the authentication with the given credentials.'}
{'code': 'public void addRow(Assignment condition,double head,double prob){\n  addRow(condition,ValueFactory.create(head),prob);\n}\n', 'nl': 'Adds a new row to the probability table, given the conditional assignment, the head assignment and the probability value. If the table already contains a probability, it is erased.'}
{'code': 'public void parseDataTypes(OneRowChange oneRowChange) throws UnsupportedEncodingException, ReplicatorException, SerialException, SQLException {\n  oneColVal currentCol=null;\n  columnValues=new ArrayList<oneColVal>();\n  for (Iterator<PlogLCRTag> iterator=rawTags.iterator(); iterator.hasNext(); ) {\n    PlogLCRTag tag=iterator.next();\nswitch (tag.id) {\ncase PlogLCRTag.TAG_COL_ID:\n      currentCol=new oneColVal();\n    columnValues.add(currentCol);\n  currentCol.id=tag.valueInt();\ncurrentCol.columnSpec=oneRowChange.new ColumnSpec();\ncurrentCol.columnSpec.setBlob(false);\ncurrentCol.columnSpec.setNotNull(false);\ncurrentCol.columnVal=oneRowChange.new ColumnVal();\niterator.remove();\nbreak;\ncase PlogLCRTag.TAG_COL_NAME:\ncurrentCol.name=tag.valueString();\ncurrentCol.columnSpec.setName(currentCol.name);\niterator.remove();\nbreak;\ncase PlogLCRTag.TAG_COL_TYPE:\ncurrentCol.datatype=tag.valueString();\ncurrentCol.columnSpec.setTypeDescription(currentCol.datatype);\nint tagTypeAsSQLType=currentCol.typeAsSQLType();\ncurrentCol.columnSpec.setType(tagTypeAsSQLType);\ncurrentCol.columnSpec.setSigned(tagTypeAsSQLType == java.sql.Types.NUMERIC);\niterator.remove();\nbreak;\ncase PlogLCRTag.TAG_LOB_POSITION:\ncurrentCol.lobPosition=tag.valueInt();\niterator.remove();\nbreak;\ncase PlogLCRTag.TAG_LOBOFFSET:\ncurrentCol.lobOffset=tag.valueLong();\niterator.remove();\nbreak;\ncase PlogLCRTag.TAG_LOBLEN:\ncurrentCol.lobLength=tag.valueLong();\niterator.remove();\nbreak;\ncase PlogLCRTag.TAG_PREIMAGE:\ncase PlogLCRTag.TAG_POSTIMAGE:\ncase PlogLCRTag.TAG_KEYIMAGE:\ncase PlogLCRTag.TAG_LOBDATA:\ncurrentCol.imageType=tag.id;\ncurrentCol.rawVal=tag.rawData;\ncurrentCol.parseValue();\niterator.remove();\nbreak;\ndefault :\n}\n}\n}\n', 'nl': 'Fill in the given oneRowChange with info from this LCR'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(createAttributeNS01.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public DecoWildWheat(int type){\n  farmtype=type == 0 ? Blocks.potatoes : type == 1 ? Blocks.carrots : Blocks.wheat;\n}\n', 'nl': '0 = potatoes, 1 = carrots, 2 = wheat'}
{'code': 'public void disconnected(){\n}\n', 'nl': 'Called when the DDM server disconnects.  Can be used to disable periodic transmissions or clean up saved state.'}
{'code': 'private void goPrinterSetting(){\n  Intent intent=new Intent(getApplicationContext(),MainActivity_.class);\n  startActivity(intent);\n  this.finish();\n}\n', 'nl': 'go printer setting activity'}
{'code': '@Override public void onAction(){\n  onAction(ActionType.USE);\n}\n', 'nl': 'Perform the default action.'}
{'code': 'public static void connectFromMatlab(String receiverID,int port){\n  connect(receiverID,port,false);\n}\n', 'nl': 'Called from MATLAB at launch. Creates the JMI wrapper and then sends it over RMI to the Java program running in a separate JVM.'}
{'code': 'public RollingResourceAppender(Layout layout,Resource res,Charset charset,boolean append,RetireListener listener) throws IOException {\n  this(layout,res,charset,append,DEFAULT_MAX_FILE_SIZE,DEFAULT_MAX_BACKUP_INDEX,60,listener);\n}\n', 'nl': 'Instantiate a RollingFileAppender and open the file designated by <code>filename</code>. The opened filename will become the ouput destination for this appender. <p>If the <code>append</code> parameter is true, the file will be appended to. Otherwise, the file desginated by <code>filename</code> will be truncated before being opened.'}
{'code': 'public void write(String string,Color color){\n  setForeground(color);\n  write(string);\n}\n', 'nl': 'Set the foreground to prescribed color and  write text to screen'}
{'code': 'public static void createImageToFileSystem(String url,Component targetList,int targetOffset,String targetKey,String destFile,Image placeholder,byte priority){\n  createImageToFileSystem(url,targetList,null,targetOffset,targetKey,destFile,null,priority,placeholder,defaultMaintainAspectRatio);\n}\n', 'nl': 'Constructs an image request that will automatically populate the given list when the response arrives, it will cache the file locally as a file in the file storage. This assumes the GenericListCellRenderer style of list which relies on a map based model approach.'}
{'code': 'public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {\n  ObjectWritable objWrite=new ObjectWritable();\n  objWrite.set(value);\n  output.collect(key,objWrite);\n}\n', 'nl': 'Convert values to ObjectWritable'}
{'code': 'public void init(CredentialInfo info,APIAccessCallBack apiAccessCallBack,Context appContext){\n  IdentityProxy.clientID=info.getClientID();\n  IdentityProxy.clientSecret=info.getClientSecret();\n  this.apiAccessCallBack=apiAccessCallBack;\n  context=appContext;\n  SharedPreferences mainPref=context.getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);\n  Editor editor=mainPref.edit();\n  editor.putString(Constants.CLIENT_ID,clientID);\n  editor.putString(Constants.CLIENT_SECRET,clientSecret);\n  editor.putString(Constants.TOKEN_ENDPOINT,info.getTokenEndPoint());\n  editor.commit();\n  setAccessTokenURL(info.getTokenEndPoint());\n  AccessTokenHandler accessTokenHandler=new AccessTokenHandler(info,this);\n  accessTokenHandler.obtainAccessToken();\n}\n', 'nl': 'Initializing the IDP plugin and obrtaining the access token.'}
{'code': '@DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:18.130 -0500",hash_original_method="45431E38A045C0C983A2E1F24B9ACFC3",hash_generated_method="75FF6DCE1A5016BCF3AE6BCA9B4BE9D0") public LayerDrawable(Drawable[] layers){\n  this(layers,null);\n}\n', 'nl': 'Create a new layer drawable with the list of specified layers.'}
{'code': 'public void testExtractEncodingFromElidedLine(){\n  String encoding=ExtractXMLEncoding.extractEncoding(elidedLine);\n  assertEquals("iso-8859-1",encoding);\n}\n', 'nl': "Some books have no newline after the xml element. My code failed to extract the encoding corectly. This test will help me fix my parsing code and make sure I don't make the mistake in future."}
{'code': 'public static void main(String[] args){\n  junit.textui.TestRunner.run(suite());\n}\n', 'nl': 'for running the test from commandline'}
{'code': '@Override public void reset(){\n  editorSite.getActionBars().getStatusLineManager().setErrorMessage(null);\n}\n', 'nl': 'Sets clears the status line'}
{'code': 'public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){\n  mRecycler.addOnItemTouchListener(listener);\n}\n', 'nl': 'Add the onItemTouchListener for the recycler'}
{'code': 'public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,boolean result,VersionedObjectList versions,ReplyException ex){\n  Assert.assertTrue(recipient != null,"RemoveAllReplyMessage NULL reply message");\n  RemoveAllReplyMessage m=new RemoveAllReplyMessage(processorId,result,versions,ex);\n  m.setRecipient(recipient);\n  dm.putOutgoing(m);\n}\n', 'nl': 'Send an ack'}
{'code': 'public void execute(TransformerImpl transformer) throws TransformerException {\n}\n', 'nl': 'This is the normal call when xsl:fallback is instantiated. In accordance with the XSLT 1.0 Recommendation, chapter 15, "Normally, instantiating an xsl:fallback element does nothing."'}
{'code': 'public void cancel(){\n  cancel=true;\n}\n', 'nl': 'Calling this method cancels the event'}
{'code': 'public void remove(){\n  purge(cursor);\n}\n', 'nl': 'Removes the match from the cursor position. This also ensures that the node is removed from the active set so that it is not longer considered a relevant output node.'}
{'code': 'public void searchStopped(){\n}\n', 'nl': 'Called when the user presses the cancel search button or presses escape while the search is in focus.'}
{'code': 'public void sendCanMessage(CanMessage m,CanListener reply){\n  log.debug("TrafficController sendCanMessage() " + m.toString());\n  sendMessage(m,reply);\n}\n', 'nl': 'Forward a preformatted message to the actual interface.'}
{'code': '@Override public void accumulate(Object value){\n  this.distinct.addAll((Set)value);\n}\n', 'nl': 'The input data is the Set of values(distinct) receieved from each of the bucket nodes.'}
{'code': 'private void resetSourceParameters(){\n  resetVendor(s_isSource,null);\n  resetHost(s_isSource,null);\n  resetPort(s_isSource,null);\n  resetUser(s_isSource,null);\n  resetPassword(s_isSource,null);\n  resetSystemUser(s_isSource,null);\n  resetSystemPassword(s_isSource,null);\n  resetSystemUserStatus(s_isSource);\n  resetName(s_isSource,null);\n  resetURL(s_isSource,null);\n  resetCatalog(s_isSource,null);\n  resetSchema(s_isSource,null);\n  resetVersion(s_isSource);\n}\n', 'nl': 'reset source parameter fields from application parameters'}
{'code': '@After public void tearDown(){\n  test=null;\n}\n', 'nl': 'Removes references to shared objects so they can be garbage collected.'}
{'code': 'public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n', 'nl': 'Removes wheel scrolling listener'}
{'code': 'public void removeStatementEventListener(StatementEventListener listener){\nsynchronized (this.statementEventListeners) {\n    this.statementEventListeners.remove(listener);\n  }\n}\n', 'nl': 'Removes the specified <code>StatementEventListener</code> from the list of components that will be notified when the driver detects that a <code>PreparedStatement</code> has been closed or is invalid.'}
{'code': 'public void reply(CanReply m){\n}\n', 'nl': "Don't pay attention to replies"}
{'code': '@Override public void respond(String response){\n  getChannel().send().message(getUser(),response);\n}\n', 'nl': 'Respond with a channel message in <code>user: message</code> format to the <i>user that preformed the kick</i>'}
{'code': 'public static void disableTotalKeySizeTracking(){\n  factory.disableTotalKeySizeTracking();\n}\n', 'nl': 'Call this method if you want to disable key size tracking.'}
{'code': 'public PrintfFormat(String fmtArg) throws IllegalArgumentException {\n  this(Locale.getDefault(),fmtArg);\n}\n', 'nl': 'Constructs an array of control specifications possibly preceded, separated, or followed by ordinary strings.  Control strings begin with unpaired percent signs.  A pair of successive percent signs designates a single percent sign in the format.'}
{'code': 'public final void reset(){\n  cursor=Address.zero();\n  limit=Address.zero();\n  internalLimit=Address.zero();\n  initialRegion=Address.zero();\n  region=Address.zero();\n}\n', 'nl': 'Reset the allocator. Note that this does not reset the space. This is must be done by the caller.'}
{'code': 'public static void encodeRaypickColorId(int id,PickerIDAttribute out){\n  out.r=id & 0x000000FF;\n  out.g=(id & 0x0000FF00) >>> 8;\n  out.b=(id & 0x00FF0000) >>> 16;\n}\n', 'nl': 'Encodes a id to a GameObjectIdAttribute with rgb channels.'}
{'code': '@Override public void onCreate(Bundle icicle){\n  super.onCreate(icicle);\n  setContentView(R.layout.mediaplayer_2);\n  mPreview=(SurfaceView)findViewById(R.id.surface);\n  holder=mPreview.getHolder();\n  holder.addCallback(this);\n  holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n  extras=getIntent().getExtras();\n}\n', 'nl': 'Called when the activity is first created.'}
{'code': '@After public void tearDown(){\n  List<HashMap> financialActivities=this.financialActivityAccountHelper.getAllFinancialActivityAccounts(this.responseSpec);\n  for (  HashMap financialActivity : financialActivities) {\n    Integer financialActivityAccountId=(Integer)financialActivity.get("id");\n    Integer deletedFinancialActivityAccountId=this.financialActivityAccountHelper.deleteFinancialActivityAccount(financialActivityAccountId,this.responseSpec,CommonConstants.RESPONSE_RESOURCE_ID);\n    Assert.assertNotNull(deletedFinancialActivityAccountId);\n    Assert.assertEquals(financialActivityAccountId,deletedFinancialActivityAccountId);\n  }\n}\n', 'nl': 'Delete the Liability transfer account'}
{'code': 'public void endVisit(MethodInvocation node){\n}\n', 'nl': 'End of visit the given type-specific AST node. <p> The default implementation does nothing. Subclasses may reimplement. </p>'}
{'code': 'public static void hideKeyboard(Activity activity,IBinder windowToken){\n  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);\n  mgr.hideSoftInputFromWindow(windowToken,0);\n}\n', 'nl': 'This method is used to hide a keyboard after a user has finished typing the url.'}
{'code': 'public static void main(String[] args){\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Now,, beweber@ea.com, true,,false",true));\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Now,, beweber@ea.com, true,,false",false));\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Hourly,19:35, beweber@ea.com, true,,false",true));\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Daily,11:00, beweber@ea.com, true,,false",true));\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Weekly,Sun 18:00, beweber@ea.com, false,,false",true));\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Monthly,24 11:30, beweber@ea.com, true,,false",true));\n  System.out.println(parseSchedule("EmailTest,//GAI/datascience/tasks/daily/EmailTest,sendmail.r,Never,, beweber@ea.com, true,,false",true));\n  System.out.println(parseSchedule("PvZ2_Model, //GAI/popcap/,tasks/berfu/PvZ2_Model/pvz2_model_data.R,Monthly,27 11:45,bduraksen@popcap.com,TRUE,,",true));\n}\n', 'nl': 'Unit test. '}
{'code': '@Override public void close(){\n  this.allowedOps.clear();\n}\n', 'nl': 'Clears the cached information for this principal.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS:\n    getDeclaredModifiers().clear();\n  return;\ncase N4JSPackage.FUNCTION_DECLARATION__BODY:\nsetBody((Block)null);\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__LOK:\nset_lok((LocalArgumentsVariable)null);\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE:\nsetDefinedType((Type)null);\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__FPARS:\ngetFpars().clear();\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:\nsetReturnTypeRef((TypeRef)null);\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__GENERATOR:\nsetGenerator(GENERATOR_EDEFAULT);\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC:\nsetDeclaredAsync(DECLARED_ASYNC_EDEFAULT);\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:\ngetTypeVars().clear();\nreturn;\ncase N4JSPackage.FUNCTION_DECLARATION__NAME:\nsetName(NAME_EDEFAULT);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public final void yyreset(java.io.Reader reader){\n  zzBuffer=s.array;\n  zzStartRead=s.offset;\n  zzEndRead=zzStartRead + s.count - 1;\n  zzCurrentPos=zzMarkedPos=s.offset;\n  zzLexicalState=YYINITIAL;\n  zzReader=reader;\n  zzAtEOF=false;\n}\n', 'nl': 'Resets the scanner to read from a new input stream. Does not close the old reader. All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state is set to <tt>YY_INITIAL</tt>.'}
{'code': 'public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){\n  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);\n}\n', 'nl': "Method for BeanContextChild interface. Uses the BeanContextChildSupport to add a listener to this object's property. This listener wants to have the right to veto a property change."}
{'code': '@After public void tearDown() throws Exception {\n}\n', 'nl': 'Method tearDown.'}
{'code': 'public void lostOwnership(Clipboard clipboard,Transferable contents){\n}\n', 'nl': 'Required by the AbstractAction interface; does nothing.'}
{'code': 'public void init() throws ServletException {\n}\n', 'nl': 'Initialization of the servlet. <br>'}
{'code': 'public void incomingPanDisconnection(BluetoothAdapter adapter,BluetoothDevice device){\n  disconnectFromRemoteOrVerifyConnectNap(adapter,device,false);\n}\n', 'nl': 'Checks that a remote PANU disconnects from the local NAP correctly and that the correct actions were broadcast.'}
{'code': 'public URL(String protocol,String host,int port,String file) throws MalformedURLException {\n  this(protocol,host,port,file,null);\n}\n', 'nl': "Creates a new URL of the given component parts. The URL uses the protocol's default port."}
{'code': 'private void startVoiceRecognitionActivity(){\n  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,"Voice recognition test...");\n  startActivityForResult(intent,REQUEST_CODE);\n}\n', 'nl': 'Fire an intent to start the voice recognition activity.'}
{'code': 'public static void declareAll(ExtensionProfile profile){\n  profile.declareAdditionalNamespace(NS);\n  profile.declare(BaseEntry.class,MediaGroup.getDefaultDescription());\n  profile.declare(BaseEntry.class,MediaContent.getDefaultDescription(false));\n  profile.declare(MediaGroup.class,MediaContent.getDefaultDescription(true));\n  for (  ExtensionDescription desc : STANDARD_EXTENSIONS) {\n    profile.declare(BaseEntry.class,desc);\n    profile.declare(BaseFeed.class,desc);\n    profile.declare(MediaGroup.class,desc);\n    profile.declare(MediaContent.class,desc);\n  }\n}\n', 'nl': 'Extends given profile with Yahoo media RSS extensions.'}
{'code': '@DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.558 -0500",hash_original_method="668D89CF48F3ADC6BE7AF94D782DA652",hash_generated_method="2ABA277C680FC2569DEF64D5B0C8092B") public ColorMatrix(ColorMatrix src){\n  System.arraycopy(src.mArray,0,mArray,0,20);\n}\n', 'nl': 'Create a new colormatrix initialized with the specified colormatrix.'}
{'code': 'public void clear(){\n  userHostMap.clear();\n}\n', 'nl': 'Clear all stored UUID-vhosts.'}
{'code': 'public void testWriteVarint() throws Exception {\n  assertWriteVarint(bytes(0x00),0);\n  assertWriteVarint(bytes(0x01),1);\n  assertWriteVarint(bytes(0x7f),127);\n  assertWriteVarint(bytes(0xa2,0x74),(0x22 << 0) | (0x74 << 7));\n  assertWriteVarint(bytes(0xbe,0xf7,0x92,0x84,0x0b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x0bL << 28));\n  assertWriteVarint(bytes(0xbe,0xf7,0x92,0x84,0x1b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x1bL << 28));\n  assertWriteVarint(bytes(0x80,0xe6,0xeb,0x9c,0xc3,0xc9,0xa4,0x49),(0x00 << 0) | (0x66 << 7) | (0x6b << 14)| (0x1c << 21)| (0x43L << 28)| (0x49L << 35)| (0x24L << 42)| (0x49L << 49));\n  assertWriteVarint(bytes(0x9b,0xa8,0xf9,0xc2,0xbb,0xd6,0x80,0x85,0xa6,0x01),(0x1b << 0) | (0x28 << 7) | (0x79 << 14)| (0x42 << 21)| (0x3bL << 28)| (0x56L << 35)| (0x00L << 42)| (0x05L << 49)| (0x26L << 56)| (0x01L << 63));\n}\n', 'nl': 'Tests writeRawVarint32() and writeRawVarint64().'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase StextPackage.EVENT_RAISING_EXPRESSION__EVENT:\n    setEvent((Expression)null);\n  return;\ncase StextPackage.EVENT_RAISING_EXPRESSION__VALUE:\nsetValue((Expression)null);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void testGetAttributeNodeNS1() throws Throwable {\n  Document doc;\n  Element element;\n  Attr attribute1;\n  Attr attribute2;\n  Attr attribute;\n  String attrValue;\n  String attrName;\n  String attNodeName;\n  String attrLocalName;\n  String attrNS;\n  doc=(Document)load("staffNS",builder);\n  element=doc.createElementNS("namespaceURI","root");\n  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");\n  element.setAttributeNodeNS(attribute1);\n  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Level1","att");\n  element.setAttributeNodeNS(attribute2);\n  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");\n  attrValue=attribute.getNodeValue();\n  attrName=attribute.getName();\n  attNodeName=attribute.getNodeName();\n  attrLocalName=attribute.getLocalName();\n  attrNS=attribute.getNamespaceURI();\n  assertEquals("elementgetattributenodens01_attrValue","",attrValue);\n  assertEquals("elementgetattributenodens01_attrName","l2:att",attrName);\n  assertEquals("elementgetattributenodens01_attrNodeName","l2:att",attNodeName);\n  assertEquals("elementgetattributenodens01_attrLocalName","att",attrLocalName);\n  assertEquals("elementgetattributenodens01_attrNs","http://www.w3.org/DOM/Level2",attrNS);\n}\n', 'nl': 'Runs the test case.'}
{'code': '@Override public void update(){\n  dispatchUpdate();\n}\n', 'nl': 'UpdateDispatcher.update() -> BaseObservable.dispatchUpdate()'}
{'code': 'public void add(KeywordInfo info){\n  keywords.put(info.getKeyword(),info);\n}\n', 'nl': 'Adds information about a keyword to this collection.'}
{'code': 'public FileSystemConfiguration(FileSystemConfiguration cfg){\n  assert cfg != null;\n  blockSize=cfg.getBlockSize();\n  bufSize=cfg.getStreamBufferSize();\n  colocateMeta=cfg.isColocateMetadata();\n  dataCacheName=cfg.getDataCacheName();\n  dfltMode=cfg.getDefaultMode();\n  dualModeMaxPendingPutsSize=cfg.getDualModeMaxPendingPutsSize();\n  dualModePutExec=cfg.getDualModePutExecutorService();\n  dualModePutExecShutdown=cfg.getDualModePutExecutorServiceShutdown();\n  fragmentizerConcurrentFiles=cfg.getFragmentizerConcurrentFiles();\n  fragmentizerLocWritesRatio=cfg.getFragmentizerLocalWritesRatio();\n  fragmentizerEnabled=cfg.isFragmentizerEnabled();\n  fragmentizerThrottlingBlockLen=cfg.getFragmentizerThrottlingBlockLength();\n  fragmentizerThrottlingDelay=cfg.getFragmentizerThrottlingDelay();\n  secondaryFs=cfg.getSecondaryFileSystem();\n  initDfltPathModes=cfg.isInitializeDefaultPathModes();\n  ipcEndpointCfg=cfg.getIpcEndpointConfiguration();\n  ipcEndpointEnabled=cfg.isIpcEndpointEnabled();\n  maxSpace=cfg.getMaxSpaceSize();\n  maxTaskRangeLen=cfg.getMaximumTaskRangeLength();\n  metaCacheName=cfg.getMetaCacheName();\n  mgmtPort=cfg.getManagementPort();\n  name=cfg.getName();\n  pathModes=cfg.getPathModes();\n  perNodeBatchSize=cfg.getPerNodeBatchSize();\n  perNodeParallelBatchCnt=cfg.getPerNodeParallelBatchCount();\n  prefetchBlocks=cfg.getPrefetchBlocks();\n  relaxedConsistency=cfg.isRelaxedConsistency();\n  seqReadsBeforePrefetch=cfg.getSequentialReadsBeforePrefetch();\n  trashPurgeTimeout=cfg.getTrashPurgeTimeout();\n  updateFileLenOnFlush=cfg.isUpdateFileLengthOnFlush();\n}\n', 'nl': 'Constructs the copy of the configuration.'}
{'code': 'public void loadDataFromPush(Node sourceNode,InputStream in,OutputStream out) throws IOException {\n  loadDataFromPush(sourceNode,null,in,out);\n}\n', 'nl': 'Load database from input stream and write acknowledgment to output stream. This is used for a "push" request with a response of an acknowledgment.'}
{'code': 'public void startStatementWithinTransaction(){\n  startStatement=-1;\n}\n', 'nl': 'Start a new statement within a transaction.'}
{'code': 'public void clip(Shape s){\n  mGraphics.clip(s);\n}\n', 'nl': 'Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection. The indicated shape is transformed with the current transform in the Graphics2D state before being intersected with the current clip. This method is used to make the current clip smaller. To make the clip larger, use any setClip method.'}
{'code': 'public void mark(int value){\n  buffer.mark(value);\n}\n', 'nl': 'Mark the current position in the buffer, so that a later call to <code>reset</code> will return here.'}
{'code': '@Override public void agg(Object newVal){\n  valueSet.add(newVal instanceof Long ? (Long)newVal : Long.valueOf(newVal.toString()));\n  firstTime=false;\n}\n', 'nl': 'Distinct Aggregate function which update the Distinct set'}
{'code': 'public void executeFirst(Runnable task){\nsynchronized (internalLock) {\n    queue.addFirst(task);\n  }\n  startQueueWorker();\n}\n', 'nl': 'Prepends a task to the front of the queue and makes sure a worker thread is running, unless the queue has been suspended.'}
{'code': 'public StartRecordingKillsAction(final String questSlot,@Dev(defaultValue="1") final int index,final Map<String,Pair<Integer,Integer>> toKill){\n  this.toKill=checkNotNull(toKill);\n  this.questname=checkNotNull(questSlot);\n  this.index=index;\n}\n', 'nl': 'Creates a new StartRecordingKillsAction.'}
{'code': 'private DeclarationListener(Declaration decl){\n  this.declarationType=decl;\n  declarations=new ArrayList<>();\n}\n', 'nl': 'Creates a DeclarationListener object.'}
{'code': 'public void hierarchyChanged(HierarchyEvent e){\n  ((HierarchyListener)a).hierarchyChanged(e);\n  ((HierarchyListener)b).hierarchyChanged(e);\n}\n', 'nl': 'Handles the hierarchyChanged event by invoking the hierarchyChanged methods on listener-a and listener-b.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(processinginstructionsetdatanomodificationallowederr.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void logStatistics(){\n  for (  QueryStatistic statistic : queryStatistics) {\n    LOGGER.statistic(statistic.getStatistics(queryIWthTask));\n  }\n}\n', 'nl': 'Below method will be used to log the statistic'}
{'code': 'public XmlSlurper() throws ParserConfigurationException, SAXException {\n  this(false,true);\n}\n', 'nl': 'Creates a non-validating and namespace-aware <code>XmlSlurper</code> which does not allow DOCTYPE declarations in documents.'}
{'code': 'public void addHost(String port,MACAddress host){\n  this.portToMac.put(port,host);\n  return;\n}\n', 'nl': 'Adds a host to this network record'}
{'code': 'public void testDoubleMissingLast() throws IOException {\n  Directory dir=newDirectory();\n  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);\n  Document doc=new Document();\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new DoublePoint("value",-1.3));\n  doc.add(new StoredField("value",-1.3));\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new DoublePoint("value",4.2333333333333));\n  doc.add(new StoredField("value",4.2333333333333));\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new DoublePoint("value",4.2333333333332));\n  doc.add(new StoredField("value",4.2333333333332));\n  writer.addDocument(doc);\n  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.DOUBLE_POINT));\n  writer.close();\n  IndexSearcher searcher=newSearcher(ir,false);\n  SortField sortField=new SortField("value",SortField.Type.DOUBLE);\n  sortField.setMissingValue(Double.MAX_VALUE);\n  Sort sort=new Sort(sortField);\n  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);\n  assertEquals(4,td.totalHits);\n  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));\n  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));\n  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));\n  assertNull(searcher.doc(td.scoreDocs[3].doc).get("value"));\n  TestUtil.checkReader(ir);\n  ir.close();\n  dir.close();\n}\n', 'nl': 'Tests sorting on type double, specifying the missing value should be treated as Double.MAX_VALUE'}
{'code': 'public void decUniqueCqQuery(){\n  this._stats.incInt(_numUniqueCqQuery,-1);\n}\n', 'nl': 'Decrements number of unique Queries.'}
{'code': 'private void initializeLiveAttributes(){\n  filterUnits=createLiveAnimatedEnumeration(null,SVG_FILTER_UNITS_ATTRIBUTE,UNITS_VALUES,(short)2);\n  primitiveUnits=createLiveAnimatedEnumeration(null,SVG_PRIMITIVE_UNITS_ATTRIBUTE,UNITS_VALUES,(short)1);\n  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_FILTER_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);\n  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_FILTER_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);\n  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,SVG_FILTER_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);\n  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,SVG_FILTER_HEIGHT_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);\n  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);\n  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);\n}\n', 'nl': 'Initializes the live attribute values of this element.'}
{'code': 'public final void trimToSize(){\n  Object[] newObjects=new Object[m_Size];\n  System.arraycopy(m_Objects,0,newObjects,0,m_Size);\n  m_Objects=newObjects;\n}\n', 'nl': "Sets the vector's capacity to its size."}
{'code': 'public void keyPress(int keyCode){\n  TestUtils.keyPress(keyCode);\n}\n', 'nl': 'This method just invokes the test utils method, it is here for convenience'}
{'code': 'public void toggle(boolean animate){\n  toggle(animate,fadeIn,fadeOut);\n}\n', 'nl': 'Toggle the badge visibility in the UI.'}
{'code': 'public void testKeyword() throws Exception {\n  Input keys[]=new Input[]{new Input("foo",50),new Input("bar",10),new Input("barbar",12),new Input("barbara",6)};\n  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.KEYWORD,false);\n  Directory tempDir=getDirectory();\n  FuzzySuggester suggester=new FuzzySuggester(tempDir,"fuzzy",analyzer);\n  suggester.build(new InputArrayIterator(keys));\n  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("bariar",random()),false,2);\n  assertEquals(2,results.size());\n  assertEquals("barbar",results.get(0).key.toString());\n  assertEquals(12,results.get(0).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("barbr",random()),false,2);\n  assertEquals(2,results.size());\n  assertEquals("barbar",results.get(0).key.toString());\n  assertEquals(12,results.get(0).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("barbara",random()),false,2);\n  assertEquals(2,results.size());\n  assertEquals("barbara",results.get(0).key.toString());\n  assertEquals(6,results.get(0).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("barbar",random()),false,2);\n  assertEquals(2,results.size());\n  assertEquals("barbar",results.get(0).key.toString());\n  assertEquals(12,results.get(0).value,0.01F);\n  assertEquals("barbara",results.get(1).key.toString());\n  assertEquals(6,results.get(1).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("barbaa",random()),false,2);\n  assertEquals(2,results.size());\n  assertEquals("barbar",results.get(0).key.toString());\n  assertEquals(12,results.get(0).value,0.01F);\n  assertEquals("barbara",results.get(1).key.toString());\n  assertEquals(6,results.get(1).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("f",random()),false,2);\n  assertEquals(1,results.size());\n  assertEquals("foo",results.get(0).key.toString());\n  assertEquals(50,results.get(0).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("bar",random()),false,1);\n  assertEquals(1,results.size());\n  assertEquals("bar",results.get(0).key.toString());\n  assertEquals(10,results.get(0).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("b",random()),false,2);\n  assertEquals(2,results.size());\n  assertEquals("barbar",results.get(0).key.toString());\n  assertEquals(12,results.get(0).value,0.01F);\n  assertEquals("bar",results.get(1).key.toString());\n  assertEquals(10,results.get(1).value,0.01F);\n  results=suggester.lookup(TestUtil.stringToCharSequence("ba",random()),false,3);\n  assertEquals(3,results.size());\n  assertEquals("barbar",results.get(0).key.toString());\n  assertEquals(12,results.get(0).value,0.01F);\n  assertEquals("bar",results.get(1).key.toString());\n  assertEquals(10,results.get(1).value,0.01F);\n  assertEquals("barbara",results.get(2).key.toString());\n  assertEquals(6,results.get(2).value,0.01F);\n  IOUtils.close(analyzer,tempDir);\n}\n', 'nl': 'this is basically the WFST test ported to KeywordAnalyzer. so it acts the same'}
{'code': 'public final void testGetKeysize(){\n  RSAKeyGenParameterSpec rkgps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));\n  assertEquals(512,rkgps.getKeysize());\n}\n', 'nl': 'Test for <code>getKeySize()</code> method<br> Assertion: returns key size value'}
{'code': 'public void ruimo(Code code){\nswitch (code) {\ncase A:\n    System.out.println("Hello");\n  break;\ncase B:\nSystem.out.println("Hello");\nbreak;\ndefault :\nbreak;\n}\n}\n', 'nl': 'patch 1524949 (submitted as a patch, not a bug)'}
{'code': 'public void testInt() throws IOException {\n  Directory dir=newDirectory();\n  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);\n  Document doc=new Document();\n  doc.add(new NumericDocValuesField("value",300000));\n  doc.add(newStringField("value","300000",Field.Store.YES));\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new NumericDocValuesField("value",-1));\n  doc.add(newStringField("value","-1",Field.Store.YES));\n  writer.addDocument(doc);\n  doc=new Document();\n  doc.add(new NumericDocValuesField("value",4));\n  doc.add(newStringField("value","4",Field.Store.YES));\n  writer.addDocument(doc);\n  IndexReader ir=writer.getReader();\n  writer.close();\n  IndexSearcher searcher=newSearcher(ir);\n  Sort sort=new Sort(new SortField("value",SortField.Type.INT));\n  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);\n  assertEquals(3,td.totalHits);\n  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));\n  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));\n  assertEquals("300000",searcher.doc(td.scoreDocs[2].doc).get("value"));\n  ir.close();\n  dir.close();\n}\n', 'nl': 'Tests sorting on type int'}
{'code': '@DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.389 -0500",hash_original_method="C0676E9FE520D18F322700EE730819D6",hash_generated_method="29D24BE5410E4955A051AB5D177667AC") public CancellationException(){\n}\n', 'nl': 'Constructs a <tt>CancellationException</tt> with no detail message.'}
{'code': '@Override public void add(int index,Instance instance){\n  Instance newInstance=(Instance)instance.copy();\n  newInstance.setDataset(this);\n  m_Instances.add(index,newInstance);\n}\n', 'nl': 'Adds one instance at the given position in the list. Shallow copies instance before it is added. Increases the size of the dataset if it is not large enough. Does not check if the instance is compatible with the dataset. Note: String or relational values are not transferred.'}
{'code': 'public AdeDirectoriesManagerImpl(String outputPath) throws AdeException {\n  this(outputPath,null,null);\n}\n', 'nl': 'Construct the manager given the root directory.'}
{'code': 'public void skip(){\n  signature=signature.substring(1);\n}\n', 'nl': 'Skip the first character of the remaining part of the signature.'}
{'code': '@Override public void initializeLogging(){\n  LogWrapper logWrapper=new LogWrapper();\n  Log.setLogNode(logWrapper);\n  MessageOnlyLogFilter msgFilter=new MessageOnlyLogFilter();\n  logWrapper.setNext(msgFilter);\n  LogFragment logFragment=(LogFragment)getSupportFragmentManager().findFragmentById(R.id.log_fragment);\n  msgFilter.setNext(logFragment.getLogView());\n  logFragment.getLogView().setTextAppearance(this,R.style.Log);\n  logFragment.getLogView().setBackgroundColor(Color.WHITE);\n  Log.i(TAG,"Ready");\n}\n', 'nl': 'Create a chain of targets that will receive log data'}
{'code': 'public static void renameTempDMLScript(String dmlScriptFile){\n  File oldPath=new File(dmlScriptFile + "t");\n  File newPath=new File(dmlScriptFile);\n  oldPath.renameTo(newPath);\n}\n', 'nl': "<p> Renames a temporary DML script file back to it's original name. </p>"}
{'code': 'public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {\n  fsb().sendSAXComment(lh,m_start,m_length);\n}\n', 'nl': 'Directly call the comment method on the passed LexicalHandler for the string-value.'}
{'code': 'public synchronized void stop(){\n  doStop();\n}\n', 'nl': 'Stops the counter monitor.'}
{'code': 'public void flushTemp(){\n  temp=new LineNumberMap(null,null);\n}\n', 'nl': 'flush temporary line mappings'}
{'code': 'public void write(Runnable operation){\n  try {\n    lock.writeLock().lock();\n    operation.run();\n  }\n  finally {\n    lock.writeLock().unlock();\n  }\n}\n', 'nl': 'Obtain an exclusive write lock, perform the operation, and release the lock.'}
{'code': 'public void firePropertyChange(String name,Object oldValue,Object newValue){\n  pcSupport.firePropertyChange(name,oldValue,newValue);\n}\n', 'nl': 'Report a bound property update to any registered listeners. No event is fired if old and new are equal and non-null.'}
{'code': 'public void initialize(LocalDispatcher dispatcher){\n  this.dispatcher=dispatcher;\n  this.delegator=dispatcher.getDelegator();\n  Debug.logInfo(this.getClass().getName() + " Authenticator initialized",module);\n}\n', 'nl': 'Method called when authenticator is first initialized (the delegator object can be obtained from the LocalDispatcher)'}
{'code': 'public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  request.getSession().setAttribute("school","sptc");\n  response.sendRedirect("servlet/SchoolServlet");\n  return;\n}\n', 'nl': 'The doGet method of the servlet. <br> This method is called when a form has its tag value method equals to get.'}
{'code': '@SuppressWarnings("rawtypes") public FilteredRowSetImpl(Hashtable env) throws SQLException {\n  super(env);\n}\n', 'nl': 'Construct a <code>FilteredRowSet</code> with a specified synchronization provider.'}
{'code': 'public static void writeConfigFile(File configFile,File searchDir) throws SQLException, IOException {\n  List<Class<?>> classList=new ArrayList<Class<?>>();\n  findAnnotatedClasses(classList,searchDir,0);\n  writeConfigFile(configFile,classList.toArray(new Class[classList.size()]));\n}\n', 'nl': 'Finds the annotated classes in the specified search directory or below and writes a configuration file.'}
{'code': 'private void initialize(){\n  this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));\n  this.setResizable(false);\n  this.setContentPane(getAboutPanel());\n  this.pack();\n  centerFrame();\n}\n', 'nl': 'This method initializes this'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.522 -0500",hash_original_method="4CD681E2D11D80A916993A5E2A67B6D2",hash_generated_method="088B63961957732197A9E3C8FB47F4E7") public void onError(SipSession session,int errorCode,String errorMessage){\n}\n', 'nl': 'Called when an error occurs during session initialization and termination.'}
{'code': 'public synchronized void deactivateCheckOid(){\n  checkOid=false;\n}\n', 'nl': 'Access Control will not check the oids. By default is false.'}
{'code': 'public void removeNotification(Notification notification){\n  notification.removeObserver(this);\n  notifications.remove(notification);\n  nContainer.removeNotification(notification);\n  onValueChanged();\n}\n', 'nl': 'Remove notification.'}
{'code': 'public static void main(String[] argv){\n  runClassifier(new NaiveBayes(),argv);\n}\n', 'nl': 'Main method for testing this class.'}
{'code': 'public void add(OHLCItem item){\n  ParamChecks.nullNotPermitted(item,"item");\n  add(item.getPeriod(),item.getOpenValue(),item.getHighValue(),item.getLowValue(),item.getCloseValue());\n}\n', 'nl': 'Adds a data item to the series.  The values from the item passed to this method will be copied into a new object.'}
{'code': 'public AbstractDataSource(Class<? extends Comparable<?>>... types){\n  this(null,types);\n}\n', 'nl': 'Initializes a new instance with the specified number of columns and column types.'}
{'code': '@Override public void draw(Graphics2D g){\n  drawCircle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_STROKE_COLOR));\n}\n', 'nl': 'Draws this handle.'}
{'code': 'private CalendarAlerts(){\n}\n', 'nl': 'This utility class cannot be instantiated'}
{'code': 'public void method(String param){\n}\n', 'nl': 'A sample method.'}
{'code': 'private void gsave(){\n  GState oldGState=getGState();\n  mGStateStack.add(new GState(oldGState));\n  mPSStream.println(GSAVE_STR);\n}\n', 'nl': "Emit a PostScript gsave command and add a new GState on to our stack which represents the printer's gstate stack."}
{'code': 'public void indent(){\n  currentIndentLevel++;\n}\n', 'nl': 'Increases indentation level from the next line to be written, onwards.'}
{'code': 'private Base64(){\n}\n', 'nl': 'Defeats instantiation.'}
{'code': '@Override public void close() throws IOException {\n  in.close();\n}\n', 'nl': 'Closes this stream. This implementation closes the filtered stream.'}
{'code': '@After public void tearDown() throws Exception {\n}\n', 'nl': 'Method tearDown.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node nameNode;\n  CharacterData child;\n  String substring;\n  doc=(Document)load("staff",false);\n  elementList=doc.getElementsByTagName("name");\n  nameNode=elementList.item(0);\n  child=(CharacterData)nameNode.getFirstChild();\n  substring=child.substringData(9,10);\n  assertEquals("characterdataSubStringExceedsValueAssert","Martin",substring);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void clearCache(){\n  clearMemoryCache();\n  clearDiskCache();\n}\n', 'nl': 'Clears both the memory and disk cache associated with this ImageCache object. Note that this includes disk access so this should not be executed on the main/UI thread.'}
{'code': 'public void postprocess(CompilationUnit unit,SymbolTable symbolTable){\n}\n', 'nl': 'Postprocess... could be invoked multiple times.'}
{'code': 'public void testIsolatedMode() throws Exception {\n  processIsolatedModeTest(DeploymentMode.ISOLATED);\n}\n', 'nl': 'Test GridDeploymentMode.ISOLATED mode.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase UmplePackage.INTERFACE_DEFINITION___NAME_1:\n    setName_1(NAME_1_EDEFAULT);\n  return;\ncase UmplePackage.INTERFACE_DEFINITION___DEPEND_1:\ngetDepend_1().clear();\nreturn;\ncase UmplePackage.INTERFACE_DEFINITION___INTERFACE_BODY_1:\ngetInterfaceBody_1().clear();\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void scale(float sx,float sy){\n  showMissingWarning("scale");\n}\n', 'nl': "Scale in X and Y. Equivalent to scale(sx, sy, 1). Not recommended for use in 3D, because the z-dimension is just scaled by 1, since there's no way to know what else to scale it by."}
{'code': 'public void unsetOperatorId(){\n  issetBitfield=EncodingUtils.clearBit(issetBitfield,OPERATORID_ISSET_ID);\n}\n', 'nl': 'Description: <br>'}
{'code': 'public static void nl(String nl){\n  Formatting.nl=nl;\n  Formatting.dnl=nl + nl;\n}\n', 'nl': 'Sets which new-line-character to use. Should be set before any code generation happens for indentation to work as expected.'}
{'code': 'public void sendSynchronously(String commandName){\n  getClientDolphin().send(commandName);\n  syncPoint(1);\n}\n', 'nl': 'for testing purposes, we may want to send commands synchronously such that we better know when to run asserts'}
{'code': 'public final void invert(Matrix3d m1){\n  invertGeneral(m1);\n}\n', 'nl': 'Sets the value of this matrix to the matrix inverse of the passed matrix m1.'}
{'code': 'public void clone(float[] source){\n  System.arraycopy(source,0,points,0,3);\n}\n', 'nl': 'Clone the input vector so that this vector has the same values.'}
{'code': 'public void queryContacts(){\n  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()].execute(null);\n}\n', 'nl': 'Query the contacts.'}
{'code': '@Override public void process(KeyValPair<K,V> tuple){\n  HashMap<K,V> otuple=new HashMap<K,V>(1);\n  otuple.put(tuple.getKey(),tuple.getValue());\n  map.emit(otuple);\n}\n', 'nl': 'Emits key, key/val pair, and val based on port connections'}
{'code': 'private Colors(){\n}\n', 'nl': 'This utility class cannot be instantiated'}
{'code': 'public void lostOwnership(Clipboard clipboard,Transferable contents){\n}\n', 'nl': 'Required by the AbstractAction interface; does nothing.'}
{'code': '@Override public void show(ExportDataProvider dataProvider,String resourceName){\n  String extension=getFileExt(resourceName);\n  ExportFormat format=ExportFormat.getByExtension(extension);\n  show(dataProvider,resourceName,format);\n}\n', 'nl': 'Show/Download resource at client side'}
{'code': 'public final void insertElementAt(E element,int index){\n  add(index,element);\n}\n', 'nl': 'Inserts an element at the given position.'}
{'code': 'public IA32ConditionOperand flipOperands(){\nswitch (value) {\ncase LLT:\n    value=LGT;\n  break;\ncase LGE:\nvalue=LLE;\nbreak;\ncase LLE:\nvalue=LGE;\nbreak;\ncase LGT:\nvalue=LLT;\nbreak;\ncase LT:\nvalue=GT;\nbreak;\ncase GE:\nvalue=LE;\nbreak;\ncase LE:\nvalue=GE;\nbreak;\ncase GT:\nvalue=LT;\nbreak;\ndefault :\nOptimizingCompilerException.TODO();\n}\nreturn this;\n}\n', 'nl': 'change the condition when operands are flipped'}
{'code': 'public void addTable(String tagString,TrueTypeTable table){\n  tables.put(tagString,table);\n}\n', 'nl': 'Add a table to the font'}
{'code': 'public void endRequest(){\n  repository.logout(mailboxSession);\n}\n', 'nl': 'Logout from open JCR Session'}
{'code': 'public void onTextTrackLocaleChanged(Locale locale){\n  LOGD(TAG,"onTextTrackLocaleChanged() reached");\n  for (  VideoCastConsumer consumer : mVideoConsumers) {\n    consumer.onTextTrackLocaleChanged(locale);\n  }\n}\n', 'nl': 'Signals a change in the Text Track locale. Clients should not call this directly.'}
{'code': 'private LossAction(String name){\n  this.name=name;\n}\n', 'nl': 'Creates a new instance of LossAction.'}
{'code': 'public void clearParameters(){\n  m_Rows.clear();\n  m_Labels.clear();\n  m_Parameters.clear();\n  update();\n}\n', 'nl': 'Removes all parameters.'}
{'code': '@Override public void write(DataOutput out) throws IOException {\n  this.key.write(out);\n  this.value.write(out);\n}\n', 'nl': 'Serialize the fields of this object to <code>out</code>.'}
{'code': 'public void testIsValidUtf8_3Bytes() throws UnsupportedEncodingException {\n  IsValidUtf8TestUtil.testBytes(3,IsValidUtf8TestUtil.EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT);\n}\n', 'nl': 'Tests that round tripping of all three byte permutations work.'}
{'code': 'public void body(String namespace,String name,String text) throws Exception {\n}\n', 'nl': '<p>No body processing is required.</p>'}
{'code': 'public void multiply(Complex multiplier){\n  float inphase=multiplyInphase(inphase(),quadrature(),multiplier.inphase(),multiplier.quadrature());\n  float quadrature=multiplyQuadrature(inphase(),quadrature(),multiplier.inphase(),multiplier.quadrature());\n  mLeft=inphase;\n  mRight=quadrature;\n}\n', 'nl': 'Multiplies this sample by the multiplier sample'}
{'code': '@Override public void onTokenRefresh(){\n  SettingsMy.setTokenSentToServer(false);\n  Intent intent=new Intent(this,MyRegistrationIntentService.class);\n  startService(intent);\n}\n', 'nl': 'Called if InstanceID token is updated. This may occur if the security of the previous token had been compromised. This call is initiated by the InstanceID provider.'}
{'code': 'public HadoopIgfsInputStream(HadoopIgfsStreamDelegate delegate,long limit,int bufSize,Log log,IgfsLogger clientLog,long logStreamId){\n  assert limit >= 0;\n  this.delegate=delegate;\n  this.limit=limit;\n  this.log=log;\n  this.clientLog=clientLog;\n  this.logStreamId=logStreamId;\n  bufHalfSize=Math.max(bufSize,MIN_BUF_SIZE);\n  lastTs=System.nanoTime();\n  delegate.hadoop().addEventListener(delegate,this);\n}\n', 'nl': 'Creates input stream.'}
{'code': 'private Util(){\n}\n', 'nl': 'Creates new Util'}
{'code': 'public void stop(BundleContext context) throws Exception {\n  super.stop(context);\n  plugin=null;\n}\n', 'nl': 'This method is called when the plug-in is stopped'}
{'code': 'public static void cleanupEpisodes(@NonNull Context context,int stateFilter){\n  Intent intent=new Intent(context,BackgroundOperations.class);\n  intent.setAction(ACTION_CLEANUP_EPISODES);\n  intent.putExtra(EXTRA_EPISODE_STATE,stateFilter);\n  context.startService(intent);\n}\n', 'nl': 'deletes episodes whose state == stateFilter'}
{'code': 'public final void deOp(String channel,String nick){\n  this.setMode(channel,"-o " + nick);\n}\n', 'nl': 'Removes operator privilidges from a user on a channel. Successful use of this method may require the bot to have operator status itself.'}
{'code': 'public void addBannedUsername(final String username){\n  addBannedUsername(username,null);\n}\n', 'nl': 'Ban the username permanently'}
{'code': 'public @Test final void testCreation(){\n  Role role=new Role(TEST_ROLE,TEST_DESCR);\n  assertThat(role.getName()).isEqualTo(TEST_ROLE);\n  Assert.assertEquals(TEST_DESCR,role.getDescription());\n  Role role2=new Role(TEST_ROLE2);\n  Assert.assertEquals(TEST_ROLE2,role2.getName());\n}\n', 'nl': 'Simple POJOS test to test setters only.'}
{'code': 'public synchronized void updateServerBucketProfile(BucketProfile p){\n  this.localProfile=p;\n}\n', 'nl': 'Only for local profile.'}
{'code': 'private Base64(){\n}\n', 'nl': 'Defeats instantiation.'}
{'code': 'public void addLabelOffset(int hash,int offset,int cid){\n  int bucketIndex=indexFor(hash,this.capacity);\n  addEntry(offset,cid,hash,bucketIndex);\n}\n', 'nl': "This method does not check if the same value is already in the map because we pass in an char-array offset, so so we now that we're in resize-mode here."}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.IDENTIFIER_REF__STRICT_MODE:\n    setStrictMode(STRICT_MODE_EDEFAULT);\n  return;\ncase N4JSPackage.IDENTIFIER_REF__ID:\nsetId((IdentifiableElement)null);\nreturn;\ncase N4JSPackage.IDENTIFIER_REF__ID_AS_TEXT:\nsetIdAsText(ID_AS_TEXT_EDEFAULT);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public ExceptionsAttribute(ConstPool cp){\n  super(cp,tag);\n  byte[] data=new byte[2];\n  data[0]=data[1]=0;\n  this.info=data;\n}\n', 'nl': 'Constructs a new exceptions attribute.'}
{'code': 'public void error(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {\n  error(srcLctr,null,null,msg,args);\n}\n', 'nl': 'Tell the user of an error, and probably throw an exception.'}
{'code': 'public void addAll(double[] values){\n  super.addAll(values,0);\n}\n', 'nl': 'Adds several new observations with the specified values.'}
{'code': '@Override public void write(int b){\n}\n', 'nl': 'Discards the specified byte.'}
{'code': 'public void testSpanNearScorerSkipTo1() throws Exception {\n  SpanNearQuery q=makeQuery();\n  Weight w=searcher.createNormalizedWeight(q,true);\n  IndexReaderContext topReaderContext=searcher.getTopReaderContext();\n  LeafReaderContext leave=topReaderContext.leaves().get(0);\n  Scorer s=w.scorer(leave);\n  assertEquals(1,s.iterator().advance(1));\n}\n', 'nl': 'not a direct test of NearSpans, but a demonstration of how/when this causes problems'}
{'code': '@Deprecated public void datasource(String name,String defName,ConsolFun consolFun){\n  datasource(name,defName,consolFun.getVariable());\n}\n', 'nl': 'Creates a new (static) virtual datasource. The value of the datasource is constant. This value is evaluated by applying the given consolidation function to another virtual datasource.'}
{'code': 'public void removeListener(final IFilterDialogListener listener){\n  m_listeners.removeListener(listener);\n}\n', 'nl': 'Removes a previously added listener object.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(getAttributeNS04.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void blockUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){\n  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionBlock,userId);\n}\n', 'nl': 'Modify the relationship between the current user and the target user. Block a user. <p/> REQUIREMENTS : InstagramKitLoginScopeRelationships during authentication. <p/> To request access to this endpoint, please complete this form - https://help.instagram.com/contact/185819881608116'}
{'code': 'public void remove(MessageListener listener){\n  m_notifier.remove(listener);\n}\n', 'nl': 'Method remove.'}
{'code': 'public void removeListener(final PropertyChangeListener listener){\n  pcs.removePropertyChangeListener(listener);\n}\n', 'nl': 'Removes a change listener.'}
{'code': 'private Sandbox(){\n}\n', 'nl': 'end of shitty part'}
{'code': 'public void testPolygonNotClosed(){\n  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);\n  assertTrue(expected.getMessage(),expected.getMessage().contains("it must close itself"));\n}\n', 'nl': 'polygon must be closed'}
{'code': '@Override public void execute(){\n  entity.onTalk(event.get("text"));\n}\n', 'nl': 'executes the event'}
{'code': 'public void clear(){\n  clear(DEFAULT_CAPACITY);\n}\n', 'nl': 'Flushes the internal state of the list, resetting the capacity to the default.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList elementList;\n  Node nameNode;\n  Node nodeV;\n  String value;\n  doc=(Document)load("staff",false);\n  elementList=doc.getElementsByTagName("name");\n  nameNode=elementList.item(2);\n  nodeV=nameNode.getFirstChild();\n  value=nodeV.getNodeValue();\n  assertEquals("textNodeValue","Roger\\n Jones",value);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void testLocale() throws IOException {\n  assertEquals(new Locale("en"),mapper.readValue(quote("en"),Locale.class));\n  assertEquals(new Locale("es","ES"),mapper.readValue(quote("es_ES"),Locale.class));\n  assertEquals(new Locale("FI","fi","savo"),mapper.readValue(quote("fi_FI_savo"),Locale.class));\n}\n', 'nl': 'Test for [JACKSON-419]'}
{'code': 'public void testBasicsMultiDims() throws Exception {\n  Directory dir=newDirectory();\n  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);\n  Document document=new Document();\n  document.add(new HalfFloatPoint("field",1.25f,-2f));\n  writer.addDocument(document);\n  IndexReader reader=writer.getReader();\n  IndexSearcher searcher=newSearcher(reader);\n  assertEquals(1,searcher.count(HalfFloatPoint.newRangeQuery("field",new float[]{0,-5},new float[]{1.25f,-1})));\n  assertEquals(0,searcher.count(HalfFloatPoint.newRangeQuery("field",new float[]{0,0},new float[]{2,2})));\n  assertEquals(0,searcher.count(HalfFloatPoint.newRangeQuery("field",new float[]{-10,-10},new float[]{1,2})));\n  reader.close();\n  writer.close();\n  dir.close();\n}\n', 'nl': 'Add a single multi-dimensional value and search for it'}
{'code': 'public void connect(Context context,BeanListener listener){\n  lastKnownContext=context;\n  beanListener=listener;\n  gattClient.connect(context,device);\n}\n', 'nl': 'Attempt to connect to this Bean.'}
{'code': 'private void sendLogManagerSavedTimestamp(TimestampSucceeded message){\n  SaveTimestampedDataMessage data=new SaveTimestampedDataMessage(message);\n  getContext().parent().tell(data,getSelf());\n}\n', 'nl': 'Sends successfully time stamped data to logManager for storing (previously logManager.saveTimestampRecord(message);)'}
{'code': 'private void loadServerDetailsActivity(){\n  Preference.putString(context,resources.getString(R.string.shared_pref_ip),resources.getString(R.string.shared_pref_default_string));\n  Intent intent=new Intent(AlreadyRegisteredActivity.this,ServerDetails.class);\n  intent.putExtra(getResources().getString(R.string.intent_extra_regid),regId);\n  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());\n  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n  startActivity(intent);\n  finish();\n}\n', 'nl': 'Load server details activity.'}
{'code': 'public void onSaveInstanceState(Bundle outState){\n  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());\n  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());\n}\n', 'nl': 'Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both).'}
{'code': 'public static void writeStringToFile(File file,String data) throws IOException {\n  writeStringToFile(file,data,null,false);\n}\n', 'nl': 'Writes a String to a file creating the file if it does not exist using the default encoding for the VM.'}
{'code': 'public void append(final char data){\n  provideCapacity(length + 1);\n  c[length]=data;\n  length++;\n}\n', 'nl': 'Appends a single character to the end of this CharBuffer. This method involves copying the new data once!'}
{'code': 'public void query(WebSocket session,HeadersAmp headers,String from,long qid,String to,String methodName,PodRef podCaller,Object... args) throws IOException {\n}\n', 'nl': 'Sends a message to a given address'}
{'code': 'public void resetOriginals(){\n  mStartingStartTrim=0;\n  mStartingEndTrim=0;\n  mStartingRotation=0;\n  setStartTrim(0);\n  setEndTrim(0);\n  setRotation(0);\n}\n', 'nl': 'Reset the progress spinner to default rotation, start and end angles.'}
{'code': 'public static void dropTable(SQLiteDatabase db,boolean ifExists){\n  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\'THREAD\'";\n  db.execSQL(sql);\n}\n', 'nl': 'Drops the underlying database table.'}
{'code': 'public static void warn(int windowNo,String adMessage){\n  warn(windowNo,null,adMessage,null,null);\n}\n', 'nl': 'Display warning with warning icon'}
{'code': '@Override public void addPropertyChangeListener(PropertyChangeListener listener){\n  m_propSupport.addPropertyChangeListener(listener);\n}\n', 'nl': 'Adds an object to the list of those that wish to be informed when the cost matrix changes.'}
{'code': 'public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {\n  _crc=Crc64.generate(_crc,buffer,offset,length);\n  _next.write(buffer,offset,length,isEnd);\n}\n', 'nl': 'Writes a buffer to the underlying stream.'}
{'code': 'public void encode(OutputStream out) throws IOException {\n  super.encode(out,PKIXExtensions.FreshestCRL_Id,false);\n}\n', 'nl': 'Writes the extension to the DerOutputStream.'}
{'code': 'private void configureApiBinding(){\n  bind(KeyBindingAgent.class).to(KeyBindingManager.class).in(Singleton.class);\n  bind(SelectionAgent.class).to(SelectionAgentImpl.class).asEagerSingleton();\n  bind(WorkspaceAgent.class).to(WorkspacePresenter.class).in(Singleton.class);\n  bind(IconRegistry.class).to(IconRegistryImpl.class).in(Singleton.class);\n  bind(EditorMultiPartStack.class).to(EditorMultiPartStackPresenter.class).in(Singleton.class);\n  bind(ActionManager.class).to(ActionManagerImpl.class).in(Singleton.class);\n  GinMultibinder<NodeInterceptor> nodeInterceptors=GinMultibinder.newSetBinder(binder(),NodeInterceptor.class);\n  nodeInterceptors.addBinding().to(DefaultNodeInterceptor.class);\n  bind(CommandTypeRegistry.class).to(CommandTypeRegistryImpl.class).in(Singleton.class);\n  bind(MacroRegistry.class).to(MacroRegistryImpl.class).in(Singleton.class);\n  bind(MacroProcessor.class).to(MacroProcessorImpl.class).in(Singleton.class);\n  GinMultibinder<Macro> macrosBinder=GinMultibinder.newSetBinder(binder(),Macro.class);\n  macrosBinder.addBinding().to(EditorCurrentFileNameMacro.class);\n  macrosBinder.addBinding().to(EditorCurrentFilePathMacro.class);\n  macrosBinder.addBinding().to(EditorCurrentFileRelativePathMacro.class);\n  macrosBinder.addBinding().to(EditorCurrentProjectNameMacro.class);\n  macrosBinder.addBinding().to(EditorCurrentProjectTypeMacro.class);\n  macrosBinder.addBinding().to(ExplorerCurrentFileNameMacro.class);\n  macrosBinder.addBinding().to(ExplorerCurrentFilePathMacro.class);\n  macrosBinder.addBinding().to(ExplorerCurrentFileParentPathMacro.class);\n  macrosBinder.addBinding().to(ExplorerCurrentFileRelativePathMacro.class);\n  macrosBinder.addBinding().to(ExplorerCurrentProjectNameMacro.class);\n  macrosBinder.addBinding().to(ExplorerCurrentProjectTypeMacro.class);\n  macrosBinder.addBinding().to(WorkspaceNameMacro.class);\n}\n', 'nl': 'API Bindings, binds API interfaces to the implementations'}
{'code': 'private void LtoOSP(long l,byte[] sp){\n  sp[0]=(byte)(l >>> 56);\n  sp[1]=(byte)(l >>> 48);\n  sp[2]=(byte)(l >>> 40);\n  sp[3]=(byte)(l >>> 32);\n  sp[4]=(byte)(l >>> 24);\n  sp[5]=(byte)(l >>> 16);\n  sp[6]=(byte)(l >>> 8);\n  sp[7]=(byte)(l >>> 0);\n}\n', 'nl': 'long to octet string.'}
{'code': 'public PlaylistMark(sage.io.SageDataFile inStream) throws java.io.IOException {\n  inStream.skipBytes(1);\n  type=inStream.read();\n  playItemIdRef=inStream.readUnsignedShort();\n  timestamp=inStream.readInt();\n  entryESPID=inStream.readUnsignedShort();\n  duration=inStream.readInt();\n}\n', 'nl': 'Creates a new instance of PlaylistMark'}
{'code': 'public void xor(int offset,int width,int value){\n  BinaryMessage mask=new BinaryMessage(this.size());\n  mask.load(offset,width,value);\n  this.xor(mask);\n}\n', 'nl': 'Performs exclusive or of the value against this bitset starting at the offset position using width bits from the value.'}
{'code': 'public void clearPeekedIDs(){\n  peekedEventsContext.set(null);\n}\n', 'nl': 'Use caution while using it!'}
{'code': 'public void execute(TransformerImpl transformer) throws TransformerException {\n}\n', 'nl': 'This is the normal call when xsl:fallback is instantiated. In accordance with the XSLT 1.0 Recommendation, chapter 15, "Normally, instantiating an xsl:fallback element does nothing."'}
{'code': 'public CompressorStreamDeflater(IDatChunkWriter idatCw,int maxBlockLen,long totalLen,Deflater def){\n  super(idatCw,maxBlockLen,totalLen);\n  this.deflater=def == null ? new Deflater() : def;\n  this.deflaterIsOwn=def == null;\n}\n', 'nl': 'if a deflater is passed, it must be already reset. It will not be released on close'}
{'code': 'public void removeSingleInterest(Object key,int interestType,boolean isDurable,boolean receiveUpdatesAsInvalidates){\n  this.pool.getRITracker().removeSingleInterest(this.region,key,interestType,isDurable,receiveUpdatesAsInvalidates);\n}\n', 'nl': 'Support for server-side interest registration'}
{'code': 'public void invoke(BasicBlock bb){\n  BURS_StateCoder burs=makeCoder();\n  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {\n    Instruction s=e.nextElement();\n    AbstractBURS_TreeNode tn=buildTree(s);\n    label(tn);\n    mark(tn,(byte)1);\n    generateTree(tn,burs);\n  }\n}\n', 'nl': 'Build BURS trees for the basic block <code>bb</code>, label the trees, and then generate MIR instructions based on the labeling.'}
{'code': 'public void cancelScheduledEvent(URI eventId){\n  client.post(String.class,PathConstants.SCHEDULED_EVENTS_CANCELLATION_URL,eventId);\n}\n', 'nl': 'Cancellation an recurring event <p> API Call: <tt>POST /catalog/events/{id}/cancel</tt>'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase DatatypePackage.OBJECT_PROPERTY_TYPE__TYPE:\n    setType((Type)null);\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void configureManagersPR2(){\n  mode=PR3MODE;\n  InstanceManager.store(getPowerManager(),jmri.PowerManager.class);\n  InstanceManager.setThrottleManager(getThrottleManager());\n  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());\n}\n', 'nl': 'Configure the subset of LocoNet managers valid for the PR3 in PR2 mode.'}
{'code': 'public static void printf(String format,Object... args){\n  out.printf(LOCALE,format,args);\n  out.flush();\n}\n', 'nl': 'Print a formatted string to standard output using the specified format string and arguments, and flush standard output.'}
{'code': 'public void deleteTag(int tagId,int ifdId){\n  mData.removeTag(getTrueTagKey(tagId),ifdId);\n}\n', 'nl': 'Removes the ExifTag for a tag constant from the given IFD.'}
{'code': 'public void warn(String trace){\n  printTrace(trace,WARN_LEVEL);\n}\n', 'nl': 'Warning trace'}
{'code': 'public void onDrag(Interaction iact){\n}\n', 'nl': 'Notifies listener of a pointer drag (move) event.'}
{'code': '@Override public void releaseWriter(){\n  writerLock.unlock();\n}\n', 'nl': "Relinquishes exclusive write access to the Guacamole instruction stream. This function should be called whenever a thread finishes using a GuacamoleTunnel's GuacamoleWriter."}
{'code': 'private void establecerElementosBusqueda(HttpServletRequest request){\n  String pFondoID=request.getParameter("fondo");\n  String pCodigo=request.getParameter("codigo");\n  String pTitulo=request.getParameter("tituloBuscar");\n  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));\n  GestionSeriesBI serieBI=getGestionSeriesBI(request);\n  List series=serieBI.findSeriesValorables(pFondoID,pCodigo,pTitulo);\n  CollectionUtils.transform(series,SerieToPO.getInstance(services));\n  request.setAttribute(ValoracionConstants.LISTA_SERIES_KEY,series);\n}\n', 'nl': 'Realiza la busqueda de las series segun el filtrado deseado estableciendo los elementos encontrados para mostrarlos en la vista'}
{'code': 'public void addInvokevirtual(int clazz,String name,String desc){\n  add(INVOKEVIRTUAL);\n  addIndex(constPool.addMethodrefInfo(clazz,name,desc));\n  growStack(Descriptor.dataSize(desc) - 1);\n}\n', 'nl': 'Appends INVOKEVIRTUAL. <p>The specified method must not be an inherited method. It must be directly declared in the class specified by <code>clazz</code>.'}
{'code': 'public void testExportImportOneWithMarker_kml(){\n  testExportImportOneWithMarker(TrackFileFormat.KML);\n}\n', 'nl': 'Tests export all as KML and import all KML when there is only one track and the track contains markers.'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase SexecPackage.SCHEDULE_TIME_EVENT__TIME_EVENT:\n    setTimeEvent((TimeEvent)newValue);\n  return;\ncase SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE:\nsetTimeValue((Expression)newValue);\nreturn;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void animate(MarkerWithPosition marker,LatLng from,LatLng to){\n  lock.lock();\n  mAnimationTasks.add(new AnimationTask(marker,from,to));\n  lock.unlock();\n}\n', 'nl': 'Animates a markerWithPosition some time in the future.'}
{'code': 'public void updateInventory(UpdateInventory update) throws Exception {\n  Thread.sleep(100);\n  LOG.info("Inventory " + update.getPartId() + " updated");\n}\n', 'nl': 'To simulate updating the inventory by calling some external system which takes a bit of time'}
{'code': 'public void validateCopiedS3Files(List<StorageFile> expectedStorageFiles,List<S3ObjectSummary> actualS3Files,String storageName,BusinessObjectDataKey businessObjectDataKey){\n  validateS3Files(expectedStorageFiles,actualS3Files,storageName,businessObjectDataKey,"copied");\n}\n', 'nl': 'Validates copied S3 files per list of expected storage files.'}
{'code': 'public static void recordUse(RegisterOperand regOp){\n  Register reg=regOp.getRegister();\n  regOp.setNext(reg.useList);\n  reg.useList=regOp;\n  reg.useCount++;\n}\n', 'nl': 'Record a use of a register'}
{'code': 'public void test_uri_ordering(){\n  final V v=new V();\n  final IVComparator c=new IVComparator();\n  assertLT(c.compare(v.noninline_uri1,v.noninline_uri2));\n}\n', 'nl': 'Unit test of the relative ordering of URIs.'}
{'code': 'public void learnEdges(int iterLimit,int edgeChangeTol){\n  ProximalGradient pg=new ProximalGradient(.5,.9,true);\n  pg.setEdgeChangeTol(edgeChangeTol);\n  setParams(new MGMParams(pg.learnBackTrack(this,params.toMatrix1D(),0.0,iterLimit),p,lsum));\n}\n', 'nl': 'Learn MGM using edge convergence using edgeChangeTol (see ProximalGradient for documentation). Recommended when we only care about edge existence.'}
{'code': 'public void showPrevious(){\n  setDisplayedChild(mWhichChild - 1);\n}\n', 'nl': 'Manually shows the previous child.'}
{'code': 'public void closeDialog(){\n  view.close();\n}\n', 'nl': 'Close dialog.'}
{'code': 'public void multiplyByScalar(float scalar){\n  this.points[0]*=scalar;\n  this.points[1]*=scalar;\n  this.points[2]*=scalar;\n  this.points[3]*=scalar;\n}\n', 'nl': 'Multiply by scalar.'}
{'code': 'public void bind(int index,long value){\n  mPreparedStatement.bindLong(index,value);\n}\n', 'nl': 'Bind the value to an index. A prepareForInsert() or prepareForReplace() without a matching execute() must have already have been called.'}
{'code': 'public void removeValueChangedListener(ValueChangedListener listener){\n  listeners.remove(listener);\n}\n', 'nl': 'Remove the given listener.'}
{'code': '@Override public void eSet(int featureID,Object newValue){\nswitch (featureID) {\ncase UmplePackage.TRACE_OPTION___OPTION_1:\n    setOption_1((String)newValue);\n  return;\n}\nsuper.eSet(featureID,newValue);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void meet() throws ParseException {\n  meet=true;\n}\n', 'nl': "Invoked when 'meet' has been parsed."}
{'code': 'public void cancel(Account account,OCFile file){\n  mSyncFolderHandler.cancel(account,file);\n}\n', 'nl': 'Cancels a pending or current synchronization.'}
{'code': 'public DoubleBufferSet(int b,int k){\n  this.buffers=new DoubleBuffer[b];\n  this.clear(k);\n}\n', 'nl': 'Constructs a buffer set with b buffers, each having k elements'}
{'code': 'public void testDoConfigureSetsAdminServer() throws Exception {\n  configuration.setProperty(WebLogicPropertySet.SERVER,SERVER);\n  configuration.doConfigure(container);\n  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");\n  XMLAssert.assertXpathEvaluatesTo(SERVER,"//weblogic:admin-server-name",config);\n}\n', 'nl': 'Test changed admin server.'}
{'code': 'public final void removeBrowseListener(BrowseListener l){\n  listeners.remove(BrowseListener.class,l);\n}\n', 'nl': 'Delete from browse listener'}
{'code': 'public void fireTextRemoved(final NetworkTextObject deleted){\n  for (  TextListener listener : textListeners) {\n    listener.textRemoved(deleted);\n  }\n}\n', 'nl': 'Fire a text deleted event to all registered model listeners.'}
{'code': 'public void runTest() throws Throwable {\n  Document doc;\n  NodeList nameList;\n  Node nameNode;\n  Node firstChild;\n  String childValue;\n  doc=(Document)load("hc_staff",false);\n  nameList=doc.getElementsByTagName("strong");\n  nameNode=nameList.item(3);\n  firstChild=nameNode.getFirstChild();\n  childValue=firstChild.getNodeValue();\n  assertEquals("documentGetElementsByTagNameValueAssert","Jeny Oconnor",childValue);\n}\n', 'nl': 'Runs the test case.'}
{'code': 'public void action(String action){\n  bot.sendIRC().action(channel.getName(),action);\n}\n', 'nl': 'Send an action to the channel.'}
{'code': 'private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime,String filter,Integer queueExpireTime,Map<String,String> staticHeaders){\n  registerListener(requestUrl,target,methods,expireTime,filter,queueExpireTime,staticHeaders,null);\n}\n', 'nl': 'Registers a listener with a filter and static headers.'}
{'code': 'public void invoke(BurlapInput in,BurlapOutput out) throws Exception {\n  invoke(_service,in,out);\n}\n', 'nl': 'Invoke the object with the request from the input stream.'}
{'code': 'public void clipRect(int x,int y,int width,int height){\n  clip(new Rectangle(x,y,width,height));\n}\n', 'nl': 'Intersects the current clip with the specified rectangle. The resulting clipping area is the intersection of the current clipping area and the specified rectangle.  If there is no current clipping area, either because the clip has never been set, or the clip has been cleared using <code>setClip(null)</code>, the specified rectangle becomes the new clip. This method sets the user clip, which is independent of the clipping associated with device bounds and window visibility. This method can only be used to make the current clip smaller. To set the current clip larger, use any of the setClip methods. Rendering operations have no effect outside of the clipping area.'}
{'code': 'public void shiftLeft() throws IOException {\n  writeCode(SHIFT_LEFT);\n}\n', 'nl': 'SWFActions interface'}
{'code': 'public void addHeaderView(View v){\n  addHeaderView(v,null,true);\n}\n', 'nl': 'Add a fixed view to appear at the top of the list. If addHeaderView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. <p> NOTE: Call this before calling setAdapter. This is so ListView can wrap the supplied cursor with one that will also account for header and footer views.'}
{'code': 'public void addListener(final ICodeNodeListener listener){\n  m_listeners.addListener(listener);\n}\n', 'nl': 'Adds a listener object that is notified about changes in the code node.'}
{'code': '@Override public void close() throws IOException {\n  coreContainer.shutdown();\n}\n', 'nl': 'Shutdown all cores within the EmbeddedSolrServer instance'}
{'code': 'public void encodeByte(int b){\n  ensureFreeBytes(1);\n  buf[offset++]=(byte)b;\n}\n', 'nl': 'Encode a single byte.'}
{'code': '@OnClose public void onClose(final Session session,final CloseReason closeReason){\n  removeSession(session);\n}\n', 'nl': 'Called when the connection closed.'}
{'code': 'public void addMember(Stream member){\n  memberSet.add(member);\n}\n', 'nl': 'Add a single member to the equivalence class.'}
{'code': 'public CertificateValidity(DerInputStream in) throws IOException {\n  DerValue derVal=in.getDerValue();\n  construct(derVal);\n}\n', 'nl': 'Create the object, decoding the values from the passed DER stream.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_characterdatadeletedataend.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public ReliefF(final ClassificationDataSet cds,int featureCount,final int m,final int n,final DistanceMetric dm,VectorCollectionFactory<Vec> vcf,ExecutorService threadPool){\n  this(featureCount,m,n,dm,vcf);\n  fit(cds,threadPool);\n}\n', 'nl': 'Creates a new ReliefF object to measure the importance of the variables with  respect to a classification task. Only numeric features will be removed.  Categorical features will be ignored and left in tact by the transformation'}
{'code': 'public void randomizeFanOut(){\n  for (  Synapse synapse : getFanOut().values()) {\n    synapse.randomize();\n  }\n}\n', 'nl': 'Randomize all synapses that attach to this neuron.'}
{'code': 'public void markUsed(long pos,int length){\n  freeSpace.markUsed(pos,length);\n}\n', 'nl': 'Mark the space as in use.'}
{'code': 'public static void swapCol(Matrix A,int j,int k){\n  swapCol(A,j,k,0,A.rows());\n}\n', 'nl': 'Swaps the columns <tt>j</tt> and <tt>k</tt> in the given matrix.'}
{'code': 'public void onDestroy(){\n  closeDialog();\n}\n', 'nl': 'Called by AccelBroker when listener is to be shut down. Stop listener.'}
{'code': '@Deprecated public void addPostalLocation(Context context,long postalId,double latitude,double longitude){\n  final ContentResolver resolver=context.getContentResolver();\n  ContentValues values=new ContentValues(2);\n  values.put(POSTAL_LOCATION_LATITUDE,latitude);\n  values.put(POSTAL_LOCATION_LONGITUDE,longitude);\n  Uri loc=resolver.insert(CONTENT_URI,values);\n  long locId=ContentUris.parseId(loc);\n  values.clear();\n  values.put(AUX_DATA,locId);\n  resolver.update(ContentUris.withAppendedId(CONTENT_URI,postalId),values,null,null);\n}\n', 'nl': 'Add a longitude and latitude location to a postal address.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:\n    getDeclaredModifiers().clear();\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void execute(final Session session){\n  for (  String cqlStatement : cqlStatements) {\n    LOG.debug("Executing CQL: " + cqlStatement);\n    session.execute(cqlStatement);\n  }\n}\n', 'nl': 'Executes this script against the database.'}
{'code': 'private void updateCallStackForCallNode(Stack<MethodCall> callStack,CCFGMethodCallNode callNode){\n  MethodCall call=MethodCall.constructForCallNode(callNode);\n  updateCallStackForCall(callStack,call);\n}\n', 'nl': 'Creates a new MethodCall object for the given MethodCallNode and pushes it onto the given callStack.'}
{'code': 'public void showDialog(){\n  view.setEnabledImportButton(false);\n  view.showDialog();\n}\n', 'nl': 'Show dialog.'}
{'code': 'public Linear3SystemSolver(final int numVariables,final int numEquations){\n  this.numVertices=numVariables;\n  this.numEdges=numEquations;\n  peeled=new boolean[numEdges];\n  edge=new int[numVertices];\n  edge2Vertex=new int[3][numEdges];\n  stack=new int[numEdges];\n  d=new int[numVertices];\n  visitStack=new IntArrayList(INITIAL_QUEUE_SIZE);\n  neverUsed=true;\n}\n', 'nl': 'Creates a linear 3-regular system solver for a given number of variables and equations.'}
{'code': 'public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  request.getSession().setAttribute("school","ycit");\n  response.sendRedirect("servlet/SchoolServlet");\n  return;\n}\n', 'nl': 'The doGet method of the servlet. <br> This method is called when a form has its tag value method equals to get.'}
{'code': 'public void animateUnlayout(final int duration,int opacity,Runnable callback){\n  animateUnlayout(duration,false,opacity,callback);\n}\n', 'nl': '<p>This method is the exact reverse of animateLayout, when completed it leaves the container in  an invalid state. It is useful to invoke this in order to remove a component, transition to a different form or provide some other interaction. E.g.:</p> <script src="https://gist.github.com/codenameone/ba6fdc5f841b083e13e9.js"></script>'}
{'code': 'public void add(OnClickWrapper onClickWrapper){\n  onClickWrapperList.add(onClickWrapper);\n}\n', 'nl': 'Adds an onclickwrapper to a list that will be reattached on orientation change.'}
{'code': 'public void removeDataChangedListener(DataChangedListener d){\n  listeners.removeListener(d);\n}\n', 'nl': 'Removes the listener for data change events'}
{'code': 'public void clear(){\n  pending.clear();\n  mTileCache.clear();\n  mCtx.unbindService(this);\n}\n', 'nl': 'Clear out memory related to tracking map tiles.'}
{'code': 'public static void i(String tag,String msg,Throwable tr){\n  println(INFO,tag,msg,tr);\n}\n', 'nl': 'Prints a message at INFO priority.'}
{'code': 'public void printPool(){\n  for (  Entry<VariableReference,Object> entry : pool.entrySet()) {\n    System.out.println("Pool: " + entry.getKey().getName() + ", "+ entry.getKey().getType()+ " : "+ entry.getValue());\n  }\n}\n', 'nl': 'Debug output'}
{'code': '@Override public final void flushObjectValues(final boolean reinit){\n  parser.flushObjectValues(reinit);\n}\n', 'nl': 'provide method for outside class to clear store of objects once written out to reclaim memory'}
{'code': 'public void newRepeat(){\n  mFormEntryController.newRepeat();\n}\n', 'nl': 'Creates a new repeated instance of the group referenced by the current FormIndex.'}
{'code': 'public void addAtom(Atom at){\n  formula.add(at);\n}\n', 'nl': 'Put an atom in the current formula'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF:\n    setDeclaredTypeRef((TypeRef)null);\n  return;\ncase N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF:\nsetBogusTypeRef((TypeRef)null);\nreturn;\ncase N4JSPackage.FORMAL_PARAMETER__NAME:\nsetName(NAME_EDEFAULT);\nreturn;\ncase N4JSPackage.FORMAL_PARAMETER__ANNOTATIONS:\ngetAnnotations().clear();\nreturn;\ncase N4JSPackage.FORMAL_PARAMETER__VARIADIC:\nsetVariadic(VARIADIC_EDEFAULT);\nreturn;\ncase N4JSPackage.FORMAL_PARAMETER__DEFINED_TYPE_ELEMENT:\nsetDefinedTypeElement((TFormalParameter)null);\nreturn;\ncase N4JSPackage.FORMAL_PARAMETER__INITIALIZER:\nsetInitializer((Expression)null);\nreturn;\ncase N4JSPackage.FORMAL_PARAMETER__BINDING_PATTERN:\nsetBindingPattern((BindingPattern)null);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public void startBasicBlock(){\n  instanceOfType=null;\n  instanceOfValueNumber=null;\n}\n', 'nl': 'This method must be called at the beginning of modeling a basic block in order to clear information cached for instanceof modeling.'}
{'code': 'public void test_langCodeLiterals(){\n  final Literal a=new LiteralImpl("bigdata","en");\n  assertEquals(a,roundTrip_tuned(a));\n}\n', 'nl': 'Test round trip of some language code literals.'}
{'code': 'public void start(int totalSeeds,int maxNFE){\n  this.totalSeeds=totalSeeds;\n  this.maxNFE=maxNFE;\n  lastSeed=1;\n  lastNFE=0;\n  currentSeed=1;\n  currentNFE=0;\n  statistics.clear();\n  startTime=System.currentTimeMillis();\n  lastTime=startTime;\n}\n', 'nl': 'Prepares this progress helper for use.  This method must be invoked prior to calling all other methods.  The internal state of the progress helper is reset, allowing a single progress helper to be reused across many sequential runs.'}
{'code': 'public static void println(boolean x){\n  out.println(x);\n}\n', 'nl': 'Print a boolean to standard output and then terminate the line.'}
{'code': 'public void sendMessage(String id,DTNHost to){\n  this.router.sendMessage(id,to);\n}\n', 'nl': 'Sends a message from this host to another host'}
{'code': 'private void updateBasePlan(double addedCost){\n  basePlanModel.updateBaseCost(addedCost);\n}\n', 'nl': 'Update the navigation bar to reflect the base plan changes'}
{'code': 'public void worked(int work){\n}\n', 'nl': 'Does nothing.'}
{'code': 'private void visitStatement(StatementTree node,CollapseEmptyOrNot collapseEmptyOrNot,AllowLeadingBlankLine allowLeadingBlank,AllowTrailingBlankLine allowTrailingBlank){\n  sync(node);\nswitch (node.getKind()) {\ncase BLOCK:\n    builder.space();\n  visitBlock((BlockTree)node,collapseEmptyOrNot,allowLeadingBlank,allowTrailingBlank);\nbreak;\ndefault :\nbuilder.open(plusTwo);\nbuilder.breakOp(" ");\nscan(node,null);\nbuilder.close();\n}\n}\n', 'nl': 'Helper method for statements.'}
{'code': '@Override public void startDocument() throws SAXException {\n  buffer=new StringBuffer();\n  jsVector=new HashSet();\n  locator=new LocatorImpl();\n  inlineResourceList=new ArrayList<>();\n  jsSet=new HashSet<>();\n}\n', 'nl': 'Event fired when the parse starts'}
{'code': 'public static void main(String[] args){\n  JFrame frame=new JFrame(TextFieldDemo.class.getAnnotation(DemoProperties.class).value());\n  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  frame.getContentPane().add(new TextFieldDemo());\n  frame.setPreferredSize(new Dimension(800,600));\n  frame.pack();\n  frame.setLocationRelativeTo(null);\n  frame.setVisible(true);\n}\n', 'nl': 'main method allows us to run as a standalone demo.'}
{'code': 'public void tryToDequeueFileTransfers(){\n  mImOperationHandler.post(new FileTransferDequeueTask(mCtx,mCore,mMessagingLog,mChatService,mFileTransferService,mContactManager,mRcsSettings));\n}\n', 'nl': 'Try to dequeue one-to-one and group file transfers'}
{'code': 'private void updatePathConstraints(TestChromosome test){\n  List<BranchCondition> pathCondition=ConcolicExecution.getSymbolicPath(test);\n  pathConditions.put(test,pathCondition);\n}\n', 'nl': 'Calculate and store path constraints for an individual'}
{'code': 'private void stopCountdown(){\n  mTimeoutTV.removeCallbacks(mTimeoutCounter);\n  mTimeoutTV.setVisibility(View.GONE);\n}\n', 'nl': 'Stop count down, hide count down info'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.615 -0500",hash_original_method="BFD2027492A8CA27CCE6A852F5D0D4BF",hash_generated_method="CFB27AB400DD88FBC877D4D8B3607B54") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onDataConnectionStateChanged(int state,int networkType){\n}\n', 'nl': 'same as above, but with the network type.  Both called.'}
{'code': 'public void receiveErrorregisterVASACertificate(java.lang.Exception e){\n}\n', 'nl': 'auto generated Axis2 Error handler override this method for handling error response from registerVASACertificate operation'}
{'code': 'public void actionPerformed(ActionEvent evt){\n  root.panel.view.getSharedContext().setDebug_draw_line_boxes(!root.panel.view.getSharedContext().debugDrawLineBoxes());\n  root.panel.view.repaint();\n}\n', 'nl': 'Description of the Method'}
{'code': 'public void reset(){\n  parser.reset();\n}\n', 'nl': 'Sets this parser back to the beginning of the raw data.'}
{'code': 'private void rememberDeletedOffset(int offset){\n  fDeleteOffset=offset;\n}\n', 'nl': 'Remembers the given offset as the deletion offset.'}
{'code': 'public static <T>void onNextDropped(T t){\n}\n', 'nl': 'Take an unsignalled data and handle it.'}
{'code': 'public synchronized void removeZoomListener(ZoomListener listener){\n  mZoomListeners.remove(listener);\n}\n', 'nl': 'Removes a zoom listener.'}
{'code': 'public CalculatorScreen(final boolean openAPP) throws Exception {\n  super(null,openAPP ? SeleniumTestsContextManager.getThreadContext().getApp() : null);\n}\n', 'nl': 'Opens log in page.'}
{'code': 'public void testGetScope() throws Exception {\n  Identity i=new IdentityStub("testGetScope");\n  assertNull(i.getScope());\n  IdentityScope s=IdentityScope.getSystemScope();\n  Identity i2=new IdentityStub("testGetScope2",s);\n  assertSame(s,i2.getScope());\n}\n', 'nl': "verify Identity.getScope() returns identity's scope"}
{'code': 'public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {\n  doGet(request,response);\n}\n', 'nl': 'The doPost method of the servlet. <br> This method is called when a form has its tag value method equals to post.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hc_notationssetnameditem1.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'private SecurityWarning(){\n}\n', 'nl': 'The SecurityWarning class should not be instantiated'}
{'code': 'public void updateValue(String iconValue){\n  TrackIconUtils.setIconSpinner(spinner,iconValue);\n  textView.setText(recordingSettingsActivity.getString(TrackIconUtils.getIconActivityType(iconValue)));\n  textView.clearFocus();\n}\n', 'nl': 'Updates the value of the dialog.'}
{'code': 'public final void unmarkResourceAbsent(long resourceID){\n  this.unmarkResourceAbsent(Long.toString(resourceID));\n}\n', 'nl': 'Mark the resource as not-absent, effectively removing it from this absent-resource list.'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase OrientedPackage.COMPONENT__INPUT_COMPONET_REFS:\n    getInputComponetRefs().clear();\n  return;\ncase OrientedPackage.COMPONENT__OUTPUT_COMPONET_REFS:\ngetOutputComponetRefs().clear();\nreturn;\ncase OrientedPackage.COMPONENT__INPUT_PORT_REFS:\ngetInputPortRefs().clear();\nreturn;\ncase OrientedPackage.COMPONENT__OUTPUT_PORT_REFS:\ngetOutputPortRefs().clear();\nreturn;\ncase OrientedPackage.COMPONENT__ID:\nsetId(ID_EDEFAULT);\nreturn;\ncase OrientedPackage.COMPONENT__INPUT_CNT:\nsetInputCnt(INPUT_CNT_EDEFAULT);\nreturn;\ncase OrientedPackage.COMPONENT__OUTPUT_CNT:\nsetOutputCnt(OUTPUT_CNT_EDEFAULT);\nreturn;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': 'public static void initialize(final RPServerManager rpMan){\n  StendhalRPAction.rpman=rpMan;\n}\n', 'nl': 'initializes the StendhalRPAction'}
{'code': 'public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){\n  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);\n}\n', 'nl': 'Method for BeanContextChild interface.'}
{'code': 'public void dispose(){\n  mRunButton.setSelected(false);\n  super.dispose();\n}\n', 'nl': 'When the window closes, stop any sequences running'}
{'code': 'private void addEndToken(int tokenType){\n  addToken(zzMarkedPos,zzMarkedPos,tokenType);\n}\n', 'nl': 'Adds the token specified to the current linked list of tokens as an "end token;" that is, at <code>zzMarkedPos</code>.'}
{'code': 'public void storeLocal(final int local){\n  storeInsn(getLocalType(local),local);\n}\n', 'nl': 'Generates the instruction to store the top stack value in the given local variable.'}
{'code': '@Override public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {\n}\n', 'nl': 'Check server trusted'}
{'code': '@Override public void shutdown(){\n  super.shutdown();\n  disconnect();\n}\n', 'nl': 'Stop sensing.'}
{'code': 'public void notifyInSeconds(final int sec,final TurnListener turnListener){\n  notifyInTurns(SingletonRepository.getRPWorld().getTurnsInSeconds(sec),turnListener);\n}\n', 'nl': 'Notifies the <i>turnListener</i> in <i>sec</i> seconds.'}
{'code': 'public void debug(Throwable throwable,String msg){\n  innerLog(Level.DEBUG,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);\n}\n', 'nl': 'Log a debug message with a throwable.'}
{'code': 'public void reset(){\n  list.iterReverse();\n  currentIndex=list.size() - 1;\n}\n', 'nl': "Restarts iteration from the list's tail (last element)."}
{'code': 'public FixedWidthTextTableReader(String location) throws DataIOException {\n  this(FixedWidthTextTableSchema.load(location));\n}\n', 'nl': 'Creates a new FixedWidthTextTableReader using the schema at the given location.'}
{'code': 'private Builder(org.apache.nutch.storage.ProtocolStatus.Builder other){\n  super(other);\n}\n', 'nl': 'Creates a Builder by copying an existing Builder'}
{'code': '@Override public void logError(CacheErrorCategory category,Class<?> clazz,String message,@Nullable Throwable throwable){\n}\n', 'nl': 'Log an error of the specified category.'}
{'code': 'public void defineToFile(String key,File value){\n  define(key,value.getAbsolutePath());\n}\n', 'nl': 'Defines a property to a file for the ant task.'}
{'code': 'public void nextPage(){\n  skipResults+=pageSize;\n  pageNumber+=1;\n}\n', 'nl': 'metodo para obtener la siguiente pagina de la busqueda realizada previamente'}
{'code': 'public void ready(String message){\n  setMessage(message);\n  setProgress(100);\n  updateStatus(Status.ready.name());\n}\n', 'nl': 'This method sets the status of the operation to "ready" and updates progress to be 100%'}
{'code': '@Override public void minus(int value){\n  this.value-=value;\n}\n', 'nl': 'operation minus'}
{'code': 'public void write(SWFActions swfactions) throws IOException {\n  ActionParser parser=new ActionParser(swfactions);\n  swfactions.start(conditions);\n  parser.parse(bytes);\n  swfactions.done();\n}\n', 'nl': 'Parse the action contents and write them to the SWFActions interface'}
{'code': 'public static void init(){\n  logger=Logger.getLogger("");\n  logger.getHandlers()[0].setFormatter(new BriefLogFormatter());\n}\n', 'nl': 'Configures JDK logging to use this class for everything.'}
{'code': '@Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){\n  buildNPC(zone);\n}\n', 'nl': 'Configure a zone.'}
{'code': 'private void removeListeners(){\n  m_debugger.removeListener(m_debuggerListener);\n  m_debugger.getProcessManager().removeListener(m_processListener);\n}\n', 'nl': 'Removes all attached listeners.'}
{'code': 'public static void render(Node node,Namespaces ns,RenderContext rc){\n  render(node,ns,rc,false);\n}\n', 'nl': 'Serializes the given DOM node to HTML or XML.'}
{'code': 'public void add(final Number operand){\n  this.value+=operand.byteValue();\n}\n', 'nl': 'Adds a value to the value of this instance.'}
{'code': '@Inline @Uninterruptible public static void scanObject(int code,int id,Object object,TransitiveClosure trace){\n  scanObject(code,id,object,trace,SpecializedScanMethod.ENABLED);\n}\n', 'nl': 'Hand-inlined scanning of objects.  The cases of the conditional are ordered in descending frequency of patterns. This entry point falls back to specialized scanning if it is enabled.'}
{'code': 'public void loadMetaData(){\n  loadMetaData(null,null);\n}\n', 'nl': 'find out the metadata for this connection'}
{'code': 'public void configure(){\n  XNetTrafficController packets=new XNetPacketizer(new LenzCommandStation());\n  packets.connectPort(this);\n  this.getSystemConnectionMemo().setXNetTrafficController(packets);\n  new XNetInitializationManager(this.getSystemConnectionMemo());\n}\n', 'nl': 'set up all of the other objects to operate with a LI101 connected to this port'}
{'code': 'public StripedLockIntObjectConcurrentHashMap(int initialCapacity,float loadFactor){\n  int cap=getInitCap(initialCapacity,loadFactor);\n  setTable(new IntHashEntry[cap]);\n}\n', 'nl': 'Creates a new, empty map with the specified initial capacity, load factor, and concurrency level.'}
{'code': '@DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.799 -0500",hash_original_method="A776EE9CD94492AC9830F6D90123EF80",hash_generated_method="4AF9EA9654FEF9F99B4CC125624506F1") public void launchQuerySearch(){\n  launchQuerySearch(KeyEvent.KEYCODE_UNKNOWN,null);\n}\n', 'nl': 'Launch a search for the text in the query text field.'}
{'code': 'public void addExceptionDates(ExceptionDates exceptionDates){\n  addProperty(exceptionDates);\n}\n', 'nl': 'Adds a list of exceptions to the timezone observance. Note that this property can contain multiple dates.'}
{'code': 'public void testLoadContent(){\n  System.out.println("loadContent");\n  AuditCommand mockAuditCommand=createMock(AuditCommand.class);\n  mockAuditCommand.loadContent();\n  expectLastCall().once();\n  replay(mockAuditCommand);\n  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);\n  instance.loadContent();\n  verify(mockAuditCommand);\n}\n', 'nl': 'Test of loadContent method, of class AuditServiceThreadImpl.'}
{'code': 'public static void onContextStop(){\n  PersistedEvents.persistEvents(applicationContext,stateMap);\n}\n', 'nl': 'Call this when the consuming Activity/Fragment receives an onStop() callback in order to persist any outstanding events to disk so they may be flushed at a later time. The next flush (explicit or not) will check for any outstanding events and if present, include them in that flush. Note that this call may trigger an I/O operation on the calling thread. Explicit use of this method is necessary.'}
{'code': 'public XMLWriter(OutputStream output) throws IOException {\n  this(new OutputStreamWriter(output,"UTF8"));\n}\n', 'nl': 'Create a new XMLWriter'}
{'code': 'public void dispose() throws GSSException {\n  x.dispose();\n}\n', 'nl': 'Disposes the GSSContext within'}
{'code': '@Override public void repaint(Rectangle r){\n}\n', 'nl': 'Overridden for performance reasons. See the <a href="#override">Implementation Note</a> for more information.'}
{'code': 'public void clearHighlightedView(){\n  mStrokeCell=null;\n  mStrokeCellPrevBound=null;\n  invalidate();\n  requestLayout();\n}\n', 'nl': 'Clears the cell selector'}
{'code': 'public void clearAll(){\n  scriptString=null;\n  clearIOS();\n}\n', 'nl': 'Clear the script string, inputs, outputs, and symbol table.'}
{'code': '@Override public void hide(){\n  super.hide();\n}\n', 'nl': 'Hides the button. <p>This method will animate the button hide if the view has already been laid out.</p>'}
{'code': 'public void defaultRouteSet(boolean enabled){\n  mDefaultRouteSet.set(enabled);\n}\n', 'nl': 'Set a flag indicating default route is set for the network'}
{'code': 'public void start(){\n  this.dbHistory.start();\n}\n', 'nl': 'Start by acquiring resources needed to persist the database history'}
{'code': 'public void saveAsEPS(String file) throws IOException {\n  java.awt.Color paper=fxToAWTColor(background);\n  java.awt.Color ink=fxToAWTColor(foreground);\n  PostScriptRenderer eps=new PostScriptRenderer(new FileOutputStream(file),zoom,border,paper,ink);\n  eps.render(barcode);\n}\n', 'nl': 'save as PostScript (eps)'}
{'code': 'public void quitServer(String reason){\n  this.sendRawLine("QUIT :" + reason);\n}\n', 'nl': 'Quits from the IRC server with a reason. Providing we are actually connected to an IRC server, the onDisconnect() method will be called as soon as the IRC server disconnects us.'}
{'code': '@Override public void updateFinished(){\n  determineNumberOfClusters();\n}\n', 'nl': 'Singals the end of the updating.'}
{'code': 'public void addFillOutsideLine(FillOutsideLine fill){\n  mFillBelowLine.add(fill);\n}\n', 'nl': 'Sets if the line chart should be filled outside its line. Filling outside with FillOutsideLine.INTEGRAL the line transforms a line chart into an area chart.'}
{'code': 'public void addValue(String key,BigDecimal val,String comment) throws HeaderCardException {\n  addHeaderCard(key,new HeaderCard(key,val,comment));\n}\n', 'nl': 'Add or replace a key with the given bigdecimal value and comment. Note that float values will be promoted to doubles.'}
{'code': 'public static void clearCache(){\n  initCache();\n  m_Cache.clear();\n}\n', 'nl': 'clears the cache for class/classnames queries.'}
{'code': 'private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n', 'nl': 'just make easier to understand'}
{'code': 'public void fillInInvokerStackTrace(){\n  getCause().setStackTrace(Thread.currentThread().getStackTrace());\n}\n', 'nl': 'We were created in a thread that is not related to the remote that called the method. This allows us to see the stack trace of the invoker.'}
{'code': 'public DatagramReader(final byte[] byteArray){\n  byteStream=new ByteArrayInputStream(Arrays.copyOf(byteArray,byteArray.length));\n  currentByte=0;\n  currentBitIndex=-1;\n}\n', 'nl': 'Creates a new reader for an array of bytes.'}
{'code': 'public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  String subSignature=method.getSubSignature();\n{\n    defaultMethod(method,thisVar,returnVar,params);\n    return;\n  }\n}\n', 'nl': 'Implements the abstract method simulateMethod. It distributes the request to the corresponding methods  by signatures.'}
{'code': 'public void applyComponentOrientation(ComponentOrientation o){\n  possiblyFixCursor(o.isLeftToRight());\n  super.applyComponentOrientation(o);\n}\n', 'nl': 'Overridden to ensure that the cursor for this component is appropriate for the orientation.'}
{'code': 'public void moveTo(int x,int y){\n  Rectangle r=getBounds();\n  translate(x - r.x,y - r.y);\n}\n', 'nl': 'Sets bounding box of all elements in group at (x, y)'}
{'code': 'public void focusLost(FocusEvent e){\n  ((FocusListener)a).focusLost(e);\n  ((FocusListener)b).focusLost(e);\n}\n', 'nl': 'Handles the focusLost event by invoking the focusLost methods on listener-a and listener-b.'}
{'code': 'public void addPrefix(String prefix,String uri){\n  namespaces.put(prefix,uri);\n  this.prefix.put(uri,prefix);\n}\n', 'nl': 'Add a namespace prefix and namespace name to context.'}
{'code': 'public void loadLocal(final int local){\n  loadInsn(getLocalType(local),local);\n}\n', 'nl': 'Generates the instruction to load the given local variable on the stack.'}
{'code': 'private void testArrayAndOther(OverloadedMethodsSubset oms){\n  assertEquals(Serializable.class,oms.getCommonSupertypeForUnwrappingHint(int[].class,String.class));\n  assertEquals(Serializable.class,oms.getCommonSupertypeForUnwrappingHint(Object[].class,String.class));\n  assertEquals(Object.class,oms.getCommonSupertypeForUnwrappingHint(int[].class,List.class));\n  assertEquals(Object.class,oms.getCommonSupertypeForUnwrappingHint(Object[].class,List.class));\n  assertEquals(int[].class,oms.getCommonSupertypeForUnwrappingHint(int[].class,int[].class));\n  assertEquals(Object[].class,oms.getCommonSupertypeForUnwrappingHint(Object[].class,Object[].class));\n}\n', 'nl': 'These will be the same with fixed and buggy:'}
{'code': 'public void revert(){\n  orientation=orientation == RIGHT ? LEFT : RIGHT;\n}\n', 'nl': 'Reverts the orientation'}
{'code': 'private void initActions(){\n  getActionMap().put(UndoAction.ID,undo.getUndoAction());\n  getActionMap().put(RedoAction.ID,undo.getRedoAction());\n}\n', 'nl': 'Initializes view specific actions.'}
{'code': 'public LinkActionList(Link link,Layer layer,Projection proj,OMGridGenerator generator) throws IOException, EOFException {\n  this.link=link;\n  linkStatus=readGestureResponses(layer,proj,generator);\n}\n', 'nl': 'Read the gesture section off the link, from the client.'}
{'code': 'public static void registerFactory(String type,AllocationCommand.Factory factory){\n  factories.put(type,factory);\n}\n', 'nl': 'Register a custom index meta data factory. Make sure to call it from a static block.'}
{'code': 'public void removeDivider(int divId) throws Exception {\n  m_fdr.getDocumentTree().removeDivider(divId);\n}\n', 'nl': 'Elimina un clasificador'}
{'code': 'private void replaceTop(JsonScope newTop){\n  stack.set(stack.size() - 1,newTop);\n}\n', 'nl': 'Replace the value on the top of the stack with the given value.'}
{'code': 'public void addSufficientVerifier(int uid){\n  mSufficientVerifierUids.put(uid,true);\n}\n', 'nl': 'Add a verifier which is added to our sufficient list.'}
{'code': 'public void onError(DiagnosticListener<JavaFileObject> callback){\n  errorsDelegate=callback;\n}\n', 'nl': 'Send all errors to callback, replacing any existing callback'}
{'code': 'public GenericMTreeDistanceSearchCandidate(final double mindist,final int nodeID,final DBID routingObjectID){\n  this.mindist=mindist;\n  this.nodeID=nodeID;\n  this.routingObjectID=routingObjectID;\n}\n', 'nl': 'Creates a new heap node with the specified parameters.'}
{'code': 'public void removeServerById(int serverId){\n  servers.remove(serverId);\n}\n', 'nl': 'Remove server with given unique id from list'}
{'code': '@Override public void insertIfAbsent(final K s,final V v){\n  this.arc[getPartition(s)].insertIfAbsent(s,v);\n}\n', 'nl': 'put a value to the cache if there was not an entry before do not return a previous content value'}
{'code': 'private Tokenizer(final CharSequence text){\n  this.text=text;\n  this.matcher=WHITESPACE.matcher(text);\n  skipWhitespace();\n  nextToken();\n}\n', 'nl': 'Construct a tokenizer that parses tokens from the given text.'}
{'code': 'private BucketAdvisor(Bucket bucket,RegionAdvisor regionAdvisor){\n  super(bucket);\n  this.regionAdvisor=regionAdvisor;\n  this.pRegion=this.regionAdvisor.getPartitionedRegion();\n  resetParentAdvisor(bucket.getId());\n}\n', 'nl': 'Constructs a new BucketAdvisor for the Bucket owned by RegionAdvisor.'}
{'code': 'public void Set(final Class cl){\n  OptionInstance=false;\n  PlugInObject=cl;\n  ObjectName=((Class)PlugInObject).getSimpleName();\n  ObjectName=Convert(ObjectName);\n}\n', 'nl': 'Defines the stored object as a class.'}
{'code': 'public void include(DefaultFaceletContext ctx,UIComponent parent,URL url) throws IOException {\n  DefaultFacelet f=(DefaultFacelet)this.factory.getFacelet(ctx.getFacesContext(),url);\n  f.include(ctx,parent);\n}\n', 'nl': 'Grabs a DefaultFacelet from referenced DefaultFaceletFacotry'}
{'code': 'public synchronized void resetReaders(){\n  readers=null;\n}\n', 'nl': 'Resets a to-many relationship, making the next get call to query for a fresh result.'}
{'code': 'private void tryScrollBackToTopWhileLoading(){\n  tryScrollBackToTop();\n}\n', 'nl': 'just make easier to understand'}
{'code': 'public void lostOwnership(Clipboard clipboard,Transferable contents){\n}\n', 'nl': 'Notifies this object that it is no longer the owner of the contents of the clipboard.'}
{'code': 'private void editNote(int noteId){\n  hideSoftKeyboard();\n  Intent intent=new Intent(MainActivity.this,NoteActivity.class);\n  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n  intent.putExtra("id",String.valueOf(noteId));\n  startActivity(intent);\n}\n', 'nl': 'Method used to enter note edition mode'}
{'code': 'public void removeFailListener(){\n  this.failedListener=null;\n}\n', 'nl': 'Unregister fail listener, initialised by Builder#failListener'}
{'code': '@Override public void onUIReset(PtrFrameLayout frame){\n  mScale=1f;\n  mDrawable.stop();\n}\n', 'nl': 'When the content view has reached top and refresh has been completed, view will be reset.'}
{'code': 'public void textureMode(int mode){\n  g.textureMode(mode);\n}\n', 'nl': 'Set texture mode to either to use coordinates based on the IMAGE (more intuitive for new users) or NORMALIZED (better for advanced chaps)'}
{'code': 'public void receiveResultqueryStorageProcessors(com.emc.storageos.vasa.VasaServiceStub.QueryStorageProcessorsResponse result){\n}\n', 'nl': 'auto generated Axis2 call back method for queryStorageProcessors method override this method for handling normal response from queryStorageProcessors operation'}
{'code': 'private void loadServerDetailsActivity(){\n  Preference.putString(context,Constants.PreferenceFlag.IP,null);\n  Intent intent=new Intent(AlreadyRegisteredActivity.this,ServerDetails.class);\n  intent.putExtra(getResources().getString(R.string.intent_extra_regid),regId);\n  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());\n  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n  startActivity(intent);\n  finish();\n}\n', 'nl': 'Load server details activity.'}
{'code': 'public void release(){\n  PathLockFactory.this.release(path,permits);\n}\n', 'nl': 'Release file permit.'}
{'code': 'private void validateComplete(ParameterFile pf){\n  Assert.assertEquals(3,pf.size());\n  Assert.assertEquals("entry1",pf.get(0).getName());\n  Assert.assertEquals(0.0,pf.get(0).getLowerBound(),Settings.EPS);\n  Assert.assertEquals(1.0,pf.get(0).getUpperBound(),Settings.EPS);\n  Assert.assertEquals("entry2",pf.get(1).getName());\n  Assert.assertEquals(100,pf.get(1).getLowerBound(),Settings.EPS);\n  Assert.assertEquals(10000,pf.get(1).getUpperBound(),Settings.EPS);\n  Assert.assertEquals("entry3",pf.get(2).getName());\n  Assert.assertEquals(0.0,pf.get(2).getLowerBound(),Settings.EPS);\n  Assert.assertEquals(1.0,pf.get(2).getUpperBound(),Settings.EPS);\n}\n', 'nl': 'Performs the necessary assertions to validate a successful load of the COMPLETE input.'}
{'code': 'public void parseAtom(ExtensionProfile extProfile,Reader reader) throws IOException, ParseException {\n  SourceHandler handler=new SourceHandler(extProfile);\n  new XmlParser().parse(reader,handler,Namespaces.atom,"source");\n}\n', 'nl': 'Parses XML in the Atom format.'}
{'code': 'public void blend(int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh,int mode){\n  blend(this,sx,sy,sw,sh,dx,dy,dw,dh,mode);\n}\n', 'nl': 'Blends one area of this image to another area.'}
{'code': 'public static void resetTimeComparisonEpsilonMicros(){\n  timeComparisonEpsilon=initializeTimeEpsilon();\n}\n', 'nl': 'Resets comparison value from default or global property'}
{'code': 'public void addNewarray(int atype,int length){\n  addIconst(length);\n  addOpcode(NEWARRAY);\n  add(atype);\n}\n', 'nl': 'Appends NEWARRAY for primitive types.'}
{'code': 'public void store(float value,Offset offset){\n}\n', 'nl': 'Stores the float value in the memory location pointed to by the current instance.'}
{'code': 'public void assertArrayEqual(Object[] expected,Object[] actual){\n  TestUtils.assertArrayEqual(expected,actual);\n}\n', 'nl': 'This method just invokes the test utils method, it is here for convenience'}
{'code': '@Override public void addPages(){\n  page=new NewFileSystemPage(getSelection());\n  addPage(page);\n}\n', 'nl': 'Adding the page to the wizard.'}
{'code': 'public void startUpdate(){\n  myFilesWaitingForRevision.push(ContainerUtil.<Pair<String,String>>newArrayList());\n}\n', 'nl': 'Same UpdateEventHandler instance could be used to update several roots - for instance, when updating whole project that contains multiple working copies => so this method explicitly indicates when update of new root is started (to correctly collect updated files). <p/> Still UPDATE_NONE (which is currently fired by command line and by SVNKit for 1.6 and below working copies - and is just skipped by UpdateEventHandler) or UPDATE_STARTED (which is currently fired by SVNKit for 1.7 working copies) events should be considered for such purposes, especially if further we want to support commands like "svn update <folder1> <folder2>". <p/> TODO: Check if UPDATE_NONE is fired in some other cases by SVNKit. <p/> TODO: Currently for command line UPDATE_NONE event could be fired several times for the same folder - as "svn update" output is TODO: processed line by line, "Updating \'.\'" line (which results in firing UPDATE_NONE) is printed before auth request and then TODO: the command could be repeated with new credentials. This case should also be handled if we want to rely on UPDATE_NONE or TODO: UPDATE_STARTED event in some code paths.'}
{'code': 'public void add(String key,Tool item){\n  add(key,item,-1);\n}\n', 'nl': 'Add an item to the tool bar.'}
{'code': '@Override public void start(){\n  super.start();\n  landscape=setupLandscapeReadIn("data/elevation.txt.gz");\n  drops=new ArrayList<Raindrop>();\n  schedule.scheduleRepeating(new Raincloud());\n}\n', 'nl': 'Starts a new run of the simulation. Refreshes the landscape and schedules the addition of new Raindrops to the system.'}
{'code': 'public void testConstructor5(){\n  Phaser parent=new Phaser();\n  assertSame(parent,new Phaser(parent,0).getParent());\n  assertNull(new Phaser(null,0).getParent());\n}\n', 'nl': 'The parent being input into the parameter should equal the original parent when being returned'}
{'code': 'public static void main(String[] args){\n  doLoop(SillyPeds.class,args);\n  System.exit(0);\n}\n', 'nl': 'Main function, runs the simulation without any visualization.'}
{'code': 'public void testBogusArguments() throws Exception {\n  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);\n  assertTrue(expected.getMessage().contains("Unknown parameters"));\n}\n', 'nl': 'Test that bogus arguments result in exception'}
{'code': 'public static void addMapBehavior(Region mock){\n  Map underlyingMap=new HashMap();\n  when(mock.get(any())).then(null);\n  when(mock.put(any(),any())).then(null);\n}\n', 'nl': 'Add real map behavior to a mock region. Useful for tests where you want to mock region that just behaves like a map.'}
{'code': 'public void drawResultBitmap(Bitmap barcode){\n  resultBitmap=barcode;\n  invalidate();\n}\n', 'nl': 'Draw a bitmap with the result points highlighted instead of the live scanning display.'}
{'code': 'public static void unselectNodes(final ZyGraph graph,final CTag tag){\n  unselectNodes(graph,Sets.newHashSet(tag),true);\n}\n', 'nl': 'Unselects all nodes of a given graph that are tagged with a given tag.'}
{'code': 'public void testEdgeNGramFilter() throws Exception {\n  Reader reader=new StringReader("test");\n  TokenStream stream=whitespaceMockTokenizer(reader);\n  stream=tokenFilterFactory("EdgeNGram").create(stream);\n  assertTokenStreamContents(stream,new String[]{"t"});\n}\n', 'nl': 'Test EdgeNGramFilterFactory'}
{'code': 'public synchronized void reset(){\n  this.oldDataList.clear();\n  this.newDataList.clear();\n  this.lastNewData=null;\n  this.lastOldData=null;\n  isInvoked=false;\n}\n', 'nl': 'Reset listener, clearing all associated state.'}
{'code': 'public void testStopClock(){\n  AbstractThrottle instance=new AbstractThrottleImpl();\n  instance.stopClock();\n}\n', 'nl': 'Test of stopClock method, of class AbstractThrottle.'}
{'code': 'public static void main(String[] args){\n  doMain(args);\n}\n', 'nl': 'Application entry point.'}
{'code': 'public void loading(){\n  mHintView.setVisibility(View.GONE);\n  mProgressBar.setVisibility(View.VISIBLE);\n}\n', 'nl': 'loading status'}
{'code': 'public void insertAddress(LocoNetMessage m){\n  m.setElement(1,getLowBits());\n  m.setElement(2,getHighBits() | getASBit());\n}\n', 'nl': 'Update a LocoNet message to have this address.'}
{'code': 'public final void append(String s){\n  compoundID.append(s);\n}\n', 'nl': 'Append a new segment to the compound name of the operator'}
{'code': '@Override public void eUnset(int featureID){\nswitch (featureID) {\ncase TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER:\n    setDefinedMember((TStructMember)null);\n  return;\n}\nsuper.eUnset(featureID);\n}\n', 'nl': '<!-- begin-user-doc --> <!-- end-user-doc -->'}
{'code': '@Pointcut("within(@javax.persistence.Entity *) || " + "within(@javax.persistence.MappedSuperclass *) || " + "within(@javax.persistence.Embeddable *)") public void jpa(){\n}\n', 'nl': 'Pointcut for jpa entities'}
{'code': 'public MinecraftlyLogger(MinecraftlyCore core,Logger parentLogger) throws MissingResourceException {\n  super("Core " + parentLogger.getName(),parentLogger.getResourceBundleName());\n  this.core=core;\n  this.debug=new File(core.getMinecraftlyDataFolder(),".debugging").exists();\n  setParent(parentLogger);\n  setUseParentHandlers(true);\n}\n', 'nl': "Method to construct a logger for Minecraftly's Core."}
{'code': 'public HarCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {\n  super(testName,testData);\n}\n', 'nl': 'Initializes the test case.'}
{'code': 'public static void main(String args[]){\n  TimeResolution timeResolution=new TimeResolution();\n  timeResolution.measureTimer();\n  timeResolution.measureTimeFunctions(INCREMENT,MAX);\n  timeResolution.measureSleep();\n  timeResolution.measureWait();\n}\n', 'nl': 'Execute the various timer resolution tests.'}
{'code': 'private void initialize(){\n  this.setContentPane(getJPanel());\n  this.pack();\n}\n', 'nl': 'This method initializes this'}
{'code': 'public void translate(float x,float y,float z){\n  Matrix4f tmp=new Matrix4f();\n  tmp.loadTranslate(x,y,z);\n  multiply(tmp);\n}\n', 'nl': 'Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions'}
{'code': 'public void onSaveInstanceState(Bundle outState){\n  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());\n  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());\n}\n', 'nl': 'Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both).'}
{'code': 'public void findAndInit(Iterator<?> it){\n  while (it.hasNext()) {\n    findAndInit(it.next());\n  }\n}\n', 'nl': 'Eventually gets called when the MouseDelegator is added to the BeanContext, and when other objects are added to the BeanContext anytime after that. The MouseDelegator looks for a MapBean to manage MouseEvents for, and MouseModes to use to manage those events. If a MapBean is added to the BeanContext while another already is in use, the second MapBean will take the place of the first.'}
{'code': 'public static void main(final String[] args){\n  DOMTestCase.doMain(hasAttribute01.class,args);\n}\n', 'nl': 'Runs this test from the command line.'}
{'code': 'public void launch(){\n  final Activity parentActivity=ActivityDelegate.getActivityForTabId(mParentId);\n  mLaunchedId=ChromeLauncherActivity.launchDocumentInstance(parentActivity,mIsIncognito,mAsyncParams);\n  mLaunchTimestamp=SystemClock.elapsedRealtime();\n  run();\n}\n', 'nl': 'Starts an Activity to with the stored parameters.'}
{'code': 'public static void showConfirmDialog(Context ctx,String message,DialogInterface.OnClickListener yesListener,DialogInterface.OnClickListener noListener){\n  showConfirmDialog(ctx,message,yesListener,noListener,android.R.string.yes,android.R.string.no);\n}\n', 'nl': 'Creates a confirmation dialog with Yes-No Button. By default the buttons just dismiss the dialog.'}
{'code': 'public Sound(@Nonnull String path) throws NullPointerException {\n  this(FileUtil.findURL(path));\n}\n', 'nl': 'Create a Sound object using the media file at path'}
{'code': 'public void deleteLabel(Serializable projectId,GitlabLabel label) throws IOException {\n  deleteLabel(projectId,label.getName());\n}\n', 'nl': 'Deletes an existing label.'}
{'code': 'public void testParams() throws Exception {\n  ClassicSimilarity sim=getSimilarity("text_overlap",ClassicSimilarity.class);\n  assertEquals(false,sim.getDiscountOverlaps());\n}\n', 'nl': 'Classic w/ explicit params'}
{'code': 'public static void registerRecipes(){\n  registerRecipeClasses();\n  addCraftingRecipes();\n  addBrewingRecipes();\n}\n', 'nl': "Add this mod's recipes."}
{'code': 'public void testIsMultiValued(){\n  SpellCheckedMetadata meta=new SpellCheckedMetadata();\n  assertFalse(meta.isMultiValued("key"));\n  meta.add("key","value1");\n  assertFalse(meta.isMultiValued("key"));\n  meta.add("key","value2");\n  assertTrue(meta.isMultiValued("key"));\n}\n', 'nl': 'Test for <code>isMultiValued()</code> method.'}
{'code': '@Override public void trim(){\n}\n', 'nl': 'Does nothing.'}
{'code': 'public void reset(byte[] data){\n  pos=0;\n  mark=0;\n  buf=data;\n  count=data.length;\n}\n', 'nl': 'Resets this <tt>BytesInputStream</tt> using the given byte[] as new input buffer.'}
{'code': 'public void reset(){\n  windowedBlockStream.reset();\n}\n', 'nl': 'reset the environment to reuse the resource.'}
{'code': 'private void displayInternalServerError(){\n  alertDialog=CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);\n  alertDialog.show();\n}\n', 'nl': 'Displays an internal server error message to the user.'}
{'code': '@Override public void onAdChanged(){\n  notifyDataSetChanged();\n}\n', 'nl': 'Raised when the number of ads have changed. Adapters that implement this class should notify their data views that the dataset has changed.'}
{'code': 'public AgeGreaterThanCondition(final int age){\n  this.age=age;\n}\n', 'nl': 'Creates a new AgeGreaterThanCondition.'}
{'code': 'public void addGroupChatComposingStatus(String chatId,boolean status){\nsynchronized (getImsServiceSessionOperationLock()) {\n    mGroupChatComposingStatusToNotify.put(chatId,status);\n  }\n}\n', 'nl': 'Adds the group chat composing status to the map to enable re-sending upon media session restart'}
{'code': 'public void fireDataStatusEEvent(String AD_Message,String info,boolean isError){\n  m_mTable.fireDataStatusEEvent(AD_Message,info,isError);\n}\n', 'nl': 'Create and fire Data Status Error Event'}
{'code': 'public static void sync(Address address,int size){\n  SysCall.sysCall.sysSyncCache(address,size);\n}\n', 'nl': 'Synchronize a region of memory: force data in dcache to be written out to main memory so that it will be seen by icache when instructions are fetched back.'}
{'code': 'public synchronized void add(double x,double y){\n  add(x,y,0d);\n}\n', 'nl': 'Adds a new value to the series.'}
{'code': 'public static void addMoreComponents(Container cnt,Component[] components,boolean areThereMore){\n  InfiniteScrollAdapter ia=(InfiniteScrollAdapter)cnt.getClientProperty("cn1$infinite");\n  ia.addMoreComponents(components,areThereMore);\n}\n', 'nl': 'Invoke this method to add additional components to the container, if you use  addComponent/removeComponent you will get undefined behavior. This is a convenience method saving the need to keep the InfiniteScrollAdapter as a variable'}