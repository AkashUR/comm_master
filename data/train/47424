23
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='requestTopDownLeftRightResend'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='ip'
10 arguments
11 argument (ThisExpr)
12 type (VoidType)
13 name (SimpleName)
14 identifier='resendTopDownLeftRight'
15 parameters
16 parameter (Parameter)
17 isVarArgs='false'
18 name (SimpleName)
19 identifier='ip'
20 type (ClassOrInterfaceType)
21 name (SimpleName)
22 identifier='ImageProducer'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
0 12
0 13
13 14
0 15
15 16
16 17
16 18
18 19
16 20
20 21
21 22

Responds to a request for a TopDownLeftRight (TDLR) ordered resend of the pixel data from an <code>ImageConsumer</code>. When an <code>ImageConsumer</code> being fed by an instance of this <code>ImageFilter</code> requests a resend of the data in TDLR order, the <code>FilteredImageSource</code> invokes this method of the <code>ImageFilter</code>. <p> An <code>ImageFilter</code> subclass might override this method or not, depending on if and how it can send data in TDLR order. Three possibilities exist: <ul> <li> Do not override this method. This makes the subclass use the default implementation, which is to forward the request to the indicated <code>ImageProducer</code> using this filter as the requesting <code>ImageConsumer</code>. This behavior is appropriate if the filter can determine that it will forward the pixels in TDLR order if its upstream producer object sends them in TDLR order. <li> Override the method to simply send the data. This is appropriate if the filter can handle the request itself &#151; for example, if the generated pixels have been saved in some sort of buffer. <li> Override the method to do nothing. This is appropriate if the filter cannot produce filtered data in TDLR order. </ul>
