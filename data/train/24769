195
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='notNull'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='Validate'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='markerType'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='notNull'
18 scope (NameExpr)
19 name (SimpleName)
20 identifier='Validate'
21 arguments
22 argument (NameExpr)
23 name (SimpleName)
24 identifier='text'
25 statement (ExpressionStmt)
26 expression (VariableDeclarationExpr)
27 variables
28 variable (VariableDeclarator)
29 initializer (ObjectCreationExpr)
30 type (ClassOrInterfaceType)
31 name (SimpleName)
32 identifier='InsnList'
33 name (SimpleName)
34 identifier='ret'
35 type (ClassOrInterfaceType)
36 name (SimpleName)
37 identifier='InsnList'
38 statement (SwitchStmt)
39 selector (NameExpr)
40 name (SimpleName)
41 identifier='markerType'
42 entries
43 entrie (SwitchEntryStmt)
44 label (NameExpr)
45 name (SimpleName)
46 identifier='NONE'
47 statements
48 statement (BreakStmt)
49 entrie (SwitchEntryStmt)
50 label (NameExpr)
51 name (SimpleName)
52 identifier='CONSTANT'
53 statements
54 statement (ExpressionStmt)
55 expression (MethodCallExpr)
56 name (SimpleName)
57 identifier='add'
58 scope (NameExpr)
59 name (SimpleName)
60 identifier='ret'
61 arguments
62 argument (ObjectCreationExpr)
63 type (ClassOrInterfaceType)
64 name (SimpleName)
65 identifier='LdcInsnNode'
66 arguments
67 argument (NameExpr)
68 name (SimpleName)
69 identifier='text'
70 statement (ExpressionStmt)
71 expression (MethodCallExpr)
72 name (SimpleName)
73 identifier='add'
74 scope (NameExpr)
75 name (SimpleName)
76 identifier='ret'
77 arguments
78 argument (ObjectCreationExpr)
79 type (ClassOrInterfaceType)
80 name (SimpleName)
81 identifier='InsnNode'
82 arguments
83 argument (FieldAccessExpr)
84 name (SimpleName)
85 identifier='POP'
86 scope (NameExpr)
87 name (SimpleName)
88 identifier='Opcodes'
89 statement (BreakStmt)
90 entrie (SwitchEntryStmt)
91 label (NameExpr)
92 name (SimpleName)
93 identifier='STDOUT'
94 statements
95 statement (ExpressionStmt)
96 expression (MethodCallExpr)
97 name (SimpleName)
98 identifier='add'
99 scope (NameExpr)
100 name (SimpleName)
101 identifier='ret'
102 arguments
103 argument (ObjectCreationExpr)
104 type (ClassOrInterfaceType)
105 name (SimpleName)
106 identifier='FieldInsnNode'
107 arguments
108 argument (FieldAccessExpr)
109 name (SimpleName)
110 identifier='GETSTATIC'
111 scope (NameExpr)
112 name (SimpleName)
113 identifier='Opcodes'
114 argument (StringLiteralExpr)
115 value='java/lang/System'
116 argument (StringLiteralExpr)
117 value='out'
118 argument (StringLiteralExpr)
119 value='Ljava/io/PrintStream;'
120 statement (ExpressionStmt)
121 expression (MethodCallExpr)
122 name (SimpleName)
123 identifier='add'
124 scope (NameExpr)
125 name (SimpleName)
126 identifier='ret'
127 arguments
128 argument (ObjectCreationExpr)
129 type (ClassOrInterfaceType)
130 name (SimpleName)
131 identifier='LdcInsnNode'
132 arguments
133 argument (NameExpr)
134 name (SimpleName)
135 identifier='text'
136 statement (ExpressionStmt)
137 expression (MethodCallExpr)
138 name (SimpleName)
139 identifier='add'
140 scope (NameExpr)
141 name (SimpleName)
142 identifier='ret'
143 arguments
144 argument (ObjectCreationExpr)
145 type (ClassOrInterfaceType)
146 name (SimpleName)
147 identifier='MethodInsnNode'
148 arguments
149 argument (FieldAccessExpr)
150 name (SimpleName)
151 identifier='INVOKEVIRTUAL'
152 scope (NameExpr)
153 name (SimpleName)
154 identifier='Opcodes'
155 argument (StringLiteralExpr)
156 value='java/io/PrintStream'
157 argument (StringLiteralExpr)
158 value='println'
159 argument (StringLiteralExpr)
160 value='(Ljava/lang/String;)V'
161 argument (BooleanLiteralExpr)
162 value='false'
163 statement (BreakStmt)
164 entrie (SwitchEntryStmt)
165 statements
166 statement (ThrowStmt)
167 expression (ObjectCreationExpr)
168 type (ClassOrInterfaceType)
169 name (SimpleName)
170 identifier='IllegalStateException'
171 statement (ReturnStmt)
172 expression (NameExpr)
173 name (SimpleName)
174 identifier='ret'
175 type (ClassOrInterfaceType)
176 name (SimpleName)
177 identifier='InsnList'
178 name (SimpleName)
179 identifier='debugMarker'
180 parameters
181 parameter (Parameter)
182 isVarArgs='false'
183 name (SimpleName)
184 identifier='markerType'
185 type (ClassOrInterfaceType)
186 name (SimpleName)
187 identifier='MarkerType'
188 parameter (Parameter)
189 isVarArgs='false'
190 name (SimpleName)
191 identifier='text'
192 type (ClassOrInterfaceType)
193 name (SimpleName)
194 identifier='String'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
15 21
21 22
22 23
23 24
2 25
25 26
26 27
27 28
28 29
29 30
30 31
31 32
28 33
33 34
28 35
35 36
36 37
2 38
38 39
39 40
40 41
38 42
42 43
43 44
44 45
45 46
43 47
47 48
42 49
49 50
50 51
51 52
49 53
53 54
54 55
55 56
56 57
55 58
58 59
59 60
55 61
61 62
62 63
63 64
64 65
62 66
66 67
67 68
68 69
53 70
70 71
71 72
72 73
71 74
74 75
75 76
71 77
77 78
78 79
79 80
80 81
78 82
82 83
83 84
84 85
83 86
86 87
87 88
53 89
42 90
90 91
91 92
92 93
90 94
94 95
95 96
96 97
97 98
96 99
99 100
100 101
96 102
102 103
103 104
104 105
105 106
103 107
107 108
108 109
109 110
108 111
111 112
112 113
107 114
114 115
107 116
116 117
107 118
118 119
94 120
120 121
121 122
122 123
121 124
124 125
125 126
121 127
127 128
128 129
129 130
130 131
128 132
132 133
133 134
134 135
94 136
136 137
137 138
138 139
137 140
140 141
141 142
137 143
143 144
144 145
145 146
146 147
144 148
148 149
149 150
150 151
149 152
152 153
153 154
148 155
155 156
148 157
157 158
148 159
159 160
148 161
161 162
94 163
42 164
164 165
165 166
166 167
167 168
168 169
169 170
2 171
171 172
172 173
173 174
0 175
175 176
176 177
0 178
178 179
0 180
180 181
181 182
181 183
183 184
181 185
185 186
186 187
180 188
188 189
188 190
190 191
188 192
192 193
193 194

Generates instructions for generating marker instructions. These marker instructions are meant to be is useful for debugging instrumented code. For example, you can spot a specific portion of instrumented code by looking for specific markers in the assembly output.
