79
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='isTrue'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='Assert'
10 arguments
11 argument (BinaryExpr)
12 operator='EQUALS'
13 left (NameExpr)
14 name (SimpleName)
15 identifier='fToken'
16 right (FieldAccessExpr)
17 name (SimpleName)
18 identifier='TokenWHILE'
19 scope (NameExpr)
20 name (SimpleName)
21 identifier='Symbols'
22 statement (ExpressionStmt)
23 expression (MethodCallExpr)
24 name (SimpleName)
25 identifier='nextToken'
26 statement (SwitchStmt)
27 selector (NameExpr)
28 name (SimpleName)
29 identifier='fToken'
30 entries
31 entrie (SwitchEntryStmt)
32 label (FieldAccessExpr)
33 name (SimpleName)
34 identifier='TokenRBRACE'
35 scope (NameExpr)
36 name (SimpleName)
37 identifier='Symbols'
38 statements
39 statement (ExpressionStmt)
40 expression (MethodCallExpr)
41 name (SimpleName)
42 identifier='skipScope'
43 entrie (SwitchEntryStmt)
44 label (FieldAccessExpr)
45 name (SimpleName)
46 identifier='TokenSEMICOLON'
47 scope (NameExpr)
48 name (SimpleName)
49 identifier='Symbols'
50 statements
51 statement (ExpressionStmt)
52 expression (MethodCallExpr)
53 name (SimpleName)
54 identifier='skipToStatementStart'
55 arguments
56 argument (BooleanLiteralExpr)
57 value='false'
58 argument (BooleanLiteralExpr)
59 value='false'
60 statement (ReturnStmt)
61 expression (BinaryExpr)
62 operator='EQUALS'
63 left (NameExpr)
64 name (SimpleName)
65 identifier='fToken'
66 right (FieldAccessExpr)
67 name (SimpleName)
68 identifier='TokenDO'
69 scope (NameExpr)
70 name (SimpleName)
71 identifier='Symbols'
72 statement (ReturnStmt)
73 expression (BooleanLiteralExpr)
74 value='false'
75 type (PrimitiveType)
76 type='BOOLEAN'
77 name (SimpleName)
78 identifier='hasMatchingDo'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
11 13
13 14
14 15
11 16
16 17
17 18
16 19
19 20
20 21
2 22
22 23
23 24
24 25
2 26
26 27
27 28
28 29
26 30
30 31
31 32
32 33
33 34
32 35
35 36
36 37
31 38
38 39
39 40
40 41
41 42
30 43
43 44
44 45
45 46
44 47
47 48
48 49
43 50
50 51
51 52
52 53
53 54
52 55
55 56
56 57
55 58
58 59
50 60
60 61
61 62
61 63
63 64
64 65
61 66
66 67
67 68
66 69
69 70
70 71
2 72
72 73
73 74
0 75
75 76
0 77
77 78

while(condition); is ambiguous when parsed backwardly, as it is a valid statement by its own, so we have to check whether there is a matching do. A <code>do</code> can either be separated from the while by a block, or by a single statement, which limits our search distance.
