63
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='readAvailableByte'
10 scope (FieldAccessExpr)
11 name (SimpleName)
12 identifier='objectModel'
13 scope (NameExpr)
14 name (SimpleName)
15 identifier='VM'
16 arguments
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='object'
20 name (SimpleName)
21 identifier='value'
22 type (PrimitiveType)
23 type='BYTE'
24 statement (ExpressionStmt)
25 expression (MethodCallExpr)
26 name (SimpleName)
27 identifier='writeAvailableByte'
28 scope (FieldAccessExpr)
29 name (SimpleName)
30 identifier='objectModel'
31 scope (NameExpr)
32 name (SimpleName)
33 identifier='VM'
34 arguments
35 argument (NameExpr)
36 name (SimpleName)
37 identifier='object'
38 argument (CastExpr)
39 expression (EnclosedExpr)
40 inner (BinaryExpr)
41 operator='BINARY_AND'
42 left (NameExpr)
43 name (SimpleName)
44 identifier='value'
45 right (UnaryExpr)
46 operator='BITWISE_COMPLEMENT'
47 expression (NameExpr)
48 name (SimpleName)
49 identifier='UNLOGGED_BIT'
50 type (PrimitiveType)
51 type='BYTE'
52 type (VoidType)
53 name (SimpleName)
54 identifier='markAsLogged'
55 parameters
56 parameter (Parameter)
57 isVarArgs='false'
58 name (SimpleName)
59 identifier='object'
60 type (ClassOrInterfaceType)
61 name (SimpleName)
62 identifier='ObjectReference'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
10 13
13 14
14 15
7 16
16 17
17 18
18 19
6 20
20 21
6 22
22 23
2 24
24 25
25 26
26 27
25 28
28 29
29 30
28 31
31 32
32 33
25 34
34 35
35 36
36 37
34 38
38 39
39 40
40 41
40 42
42 43
43 44
40 45
45 46
45 47
47 48
48 49
38 50
50 51
0 52
0 53
53 54
0 55
55 56
56 57
56 58
58 59
56 60
60 61
61 62

Mark an object as logged.  Since duplicate logging does not raise any correctness issues, we do <i>not</i> worry about synchronization and allow threads to race to log the object, potentially including it twice (unlike reference counting where duplicates would lead to incorrect reference counts).
