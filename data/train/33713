31
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='runWithLock'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='schemaMutationLock'
10 arguments
11 argument (NullLiteralExpr)
12 type (VoidType)
13 name (SimpleName)
14 identifier='dropTables'
15 parameters
16 parameter (Parameter)
17 isVarArgs='false'
18 name (SimpleName)
19 identifier='tablesToDrop'
20 type (ClassOrInterfaceType)
21 name (SimpleName)
22 identifier='Set'
23 typeArguments
24 typeArgument (ClassOrInterfaceType)
25 name (SimpleName)
26 identifier='TableReference'
27 annotations
28 annotation (MarkerAnnotationExpr)
29 name (Name)
30 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
0 12
0 13
13 14
0 15
15 16
16 17
16 18
18 19
16 20
20 21
21 22
20 23
23 24
24 25
25 26
0 27
27 28
28 29
29 30

Main gains here vs. dropTable: - problems excepting, we will basically be serializing a rapid series of schema changes through a single host checked out from the client pool, so reduced chance of schema disagreement issues - client-side in-memory lock to prevent misbehaving callers from shooting themselves in the foot - one less round trip
