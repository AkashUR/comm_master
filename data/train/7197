228
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='ObjectMapper'
11 name (SimpleName)
12 identifier='m'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='ObjectMapper'
16 statement (ExpressionStmt)
17 expression (MethodCallExpr)
18 name (SimpleName)
19 identifier='enableDefaultTyping'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='m'
23 statement (ExpressionStmt)
24 expression (VariableDeclarationExpr)
25 variables
26 variable (VariableDeclarator)
27 initializer (ObjectCreationExpr)
28 type (ClassOrInterfaceType)
29 name (SimpleName)
30 identifier='ListOfNumbers'
31 arguments
32 argument (MethodCallExpr)
33 name (SimpleName)
34 identifier='valueOf'
35 scope (NameExpr)
36 name (SimpleName)
37 identifier='Long'
38 arguments
39 argument (LongLiteralExpr)
40 value='1L'
41 argument (MethodCallExpr)
42 name (SimpleName)
43 identifier='valueOf'
44 scope (NameExpr)
45 name (SimpleName)
46 identifier='Integer'
47 arguments
48 argument (IntegerLiteralExpr)
49 value='2'
50 argument (MethodCallExpr)
51 name (SimpleName)
52 identifier='valueOf'
53 scope (NameExpr)
54 name (SimpleName)
55 identifier='Double'
56 arguments
57 argument (DoubleLiteralExpr)
58 value='3.0'
59 name (SimpleName)
60 identifier='input'
61 type (ClassOrInterfaceType)
62 name (SimpleName)
63 identifier='ListOfNumbers'
64 statement (ExpressionStmt)
65 expression (VariableDeclarationExpr)
66 variables
67 variable (VariableDeclarator)
68 initializer (MethodCallExpr)
69 name (SimpleName)
70 identifier='writeValueAsString'
71 scope (NameExpr)
72 name (SimpleName)
73 identifier='m'
74 arguments
75 argument (NameExpr)
76 name (SimpleName)
77 identifier='input'
78 name (SimpleName)
79 identifier='json'
80 type (ClassOrInterfaceType)
81 name (SimpleName)
82 identifier='String'
83 statement (ExpressionStmt)
84 expression (MethodCallExpr)
85 name (SimpleName)
86 identifier='assertEquals'
87 arguments
88 argument (StringLiteralExpr)
89 value='{\"nums\":[\"java.util.ArrayList\",[[\"java.lang.Long\",1],2,3.0]]}'
90 argument (NameExpr)
91 name (SimpleName)
92 identifier='json'
93 statement (ExpressionStmt)
94 expression (VariableDeclarationExpr)
95 variables
96 variable (VariableDeclarator)
97 initializer (MethodCallExpr)
98 name (SimpleName)
99 identifier='readValue'
100 scope (NameExpr)
101 name (SimpleName)
102 identifier='m'
103 arguments
104 argument (NameExpr)
105 name (SimpleName)
106 identifier='json'
107 argument (ClassExpr)
108 type (ClassOrInterfaceType)
109 name (SimpleName)
110 identifier='ListOfNumbers'
111 name (SimpleName)
112 identifier='output'
113 type (ClassOrInterfaceType)
114 name (SimpleName)
115 identifier='ListOfNumbers'
116 statement (ExpressionStmt)
117 expression (MethodCallExpr)
118 name (SimpleName)
119 identifier='assertNotNull'
120 arguments
121 argument (FieldAccessExpr)
122 name (SimpleName)
123 identifier='nums'
124 scope (NameExpr)
125 name (SimpleName)
126 identifier='output'
127 statement (ExpressionStmt)
128 expression (MethodCallExpr)
129 name (SimpleName)
130 identifier='assertEquals'
131 arguments
132 argument (IntegerLiteralExpr)
133 value='3'
134 argument (MethodCallExpr)
135 name (SimpleName)
136 identifier='size'
137 scope (FieldAccessExpr)
138 name (SimpleName)
139 identifier='nums'
140 scope (NameExpr)
141 name (SimpleName)
142 identifier='output'
143 statement (ExpressionStmt)
144 expression (MethodCallExpr)
145 name (SimpleName)
146 identifier='assertEquals'
147 arguments
148 argument (MethodCallExpr)
149 name (SimpleName)
150 identifier='valueOf'
151 scope (NameExpr)
152 name (SimpleName)
153 identifier='Long'
154 arguments
155 argument (LongLiteralExpr)
156 value='1L'
157 argument (MethodCallExpr)
158 name (SimpleName)
159 identifier='get'
160 scope (FieldAccessExpr)
161 name (SimpleName)
162 identifier='nums'
163 scope (NameExpr)
164 name (SimpleName)
165 identifier='output'
166 arguments
167 argument (IntegerLiteralExpr)
168 value='0'
169 statement (ExpressionStmt)
170 expression (MethodCallExpr)
171 name (SimpleName)
172 identifier='assertEquals'
173 arguments
174 argument (MethodCallExpr)
175 name (SimpleName)
176 identifier='valueOf'
177 scope (NameExpr)
178 name (SimpleName)
179 identifier='Integer'
180 arguments
181 argument (IntegerLiteralExpr)
182 value='2'
183 argument (MethodCallExpr)
184 name (SimpleName)
185 identifier='get'
186 scope (FieldAccessExpr)
187 name (SimpleName)
188 identifier='nums'
189 scope (NameExpr)
190 name (SimpleName)
191 identifier='output'
192 arguments
193 argument (IntegerLiteralExpr)
194 value='1'
195 statement (ExpressionStmt)
196 expression (MethodCallExpr)
197 name (SimpleName)
198 identifier='assertEquals'
199 arguments
200 argument (MethodCallExpr)
201 name (SimpleName)
202 identifier='valueOf'
203 scope (NameExpr)
204 name (SimpleName)
205 identifier='Double'
206 arguments
207 argument (DoubleLiteralExpr)
208 value='3.0'
209 argument (MethodCallExpr)
210 name (SimpleName)
211 identifier='get'
212 scope (FieldAccessExpr)
213 name (SimpleName)
214 identifier='nums'
215 scope (NameExpr)
216 name (SimpleName)
217 identifier='output'
218 arguments
219 argument (IntegerLiteralExpr)
220 value='2'
221 type (VoidType)
222 name (SimpleName)
223 identifier='testListOfNumbers'
224 thrownExceptions
225 thrownException (ClassOrInterfaceType)
226 name (SimpleName)
227 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
17 20
20 21
21 22
2 23
23 24
24 25
25 26
26 27
27 28
28 29
29 30
27 31
31 32
32 33
33 34
32 35
35 36
36 37
32 38
38 39
39 40
31 41
41 42
42 43
41 44
44 45
45 46
41 47
47 48
48 49
31 50
50 51
51 52
50 53
53 54
54 55
50 56
56 57
57 58
26 59
59 60
26 61
61 62
62 63
2 64
64 65
65 66
66 67
67 68
68 69
69 70
68 71
71 72
72 73
68 74
74 75
75 76
76 77
67 78
78 79
67 80
80 81
81 82
2 83
83 84
84 85
85 86
84 87
87 88
88 89
87 90
90 91
91 92
2 93
93 94
94 95
95 96
96 97
97 98
98 99
97 100
100 101
101 102
97 103
103 104
104 105
105 106
103 107
107 108
108 109
109 110
96 111
111 112
96 113
113 114
114 115
2 116
116 117
117 118
118 119
117 120
120 121
121 122
122 123
121 124
124 125
125 126
2 127
127 128
128 129
129 130
128 131
131 132
132 133
131 134
134 135
135 136
134 137
137 138
138 139
137 140
140 141
141 142
2 143
143 144
144 145
145 146
144 147
147 148
148 149
149 150
148 151
151 152
152 153
148 154
154 155
155 156
147 157
157 158
158 159
157 160
160 161
161 162
160 163
163 164
164 165
157 166
166 167
167 168
2 169
169 170
170 171
171 172
170 173
173 174
174 175
175 176
174 177
177 178
178 179
174 180
180 181
181 182
173 183
183 184
184 185
183 186
186 187
187 188
186 189
189 190
190 191
183 192
192 193
193 194
2 195
195 196
196 197
197 198
196 199
199 200
200 201
201 202
200 203
203 204
204 205
200 206
206 207
207 208
199 209
209 210
210 211
209 212
212 213
213 214
212 215
215 216
216 217
209 218
218 219
219 220
0 221
0 222
222 223
0 224
224 225
225 226
226 227

Then bit more heterogenous list; also tests mixing of regular scalar types, and non-typed ones (int and double will never have type info added; other numbers will if necessary)
