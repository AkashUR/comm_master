176
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='put'
7 arguments
8 argument (CastExpr)
9 expression (EnclosedExpr)
10 inner (BinaryExpr)
11 operator='BINARY_AND'
12 left (NameExpr)
13 name (SimpleName)
14 identifier='int64'
15 right (IntegerLiteralExpr)
16 value='0xFF'
17 type (PrimitiveType)
18 type='BYTE'
19 statement (ExpressionStmt)
20 expression (MethodCallExpr)
21 name (SimpleName)
22 identifier='put'
23 arguments
24 argument (CastExpr)
25 expression (EnclosedExpr)
26 inner (BinaryExpr)
27 operator='BINARY_AND'
28 left (EnclosedExpr)
29 inner (BinaryExpr)
30 operator='SIGNED_RIGHT_SHIFT'
31 left (NameExpr)
32 name (SimpleName)
33 identifier='int64'
34 right (IntegerLiteralExpr)
35 value='8'
36 right (IntegerLiteralExpr)
37 value='0xFF'
38 type (PrimitiveType)
39 type='BYTE'
40 statement (ExpressionStmt)
41 expression (MethodCallExpr)
42 name (SimpleName)
43 identifier='put'
44 arguments
45 argument (CastExpr)
46 expression (EnclosedExpr)
47 inner (BinaryExpr)
48 operator='BINARY_AND'
49 left (EnclosedExpr)
50 inner (BinaryExpr)
51 operator='SIGNED_RIGHT_SHIFT'
52 left (NameExpr)
53 name (SimpleName)
54 identifier='int64'
55 right (IntegerLiteralExpr)
56 value='16'
57 right (IntegerLiteralExpr)
58 value='0xFF'
59 type (PrimitiveType)
60 type='BYTE'
61 statement (ExpressionStmt)
62 expression (MethodCallExpr)
63 name (SimpleName)
64 identifier='put'
65 arguments
66 argument (CastExpr)
67 expression (EnclosedExpr)
68 inner (BinaryExpr)
69 operator='BINARY_AND'
70 left (EnclosedExpr)
71 inner (BinaryExpr)
72 operator='SIGNED_RIGHT_SHIFT'
73 left (NameExpr)
74 name (SimpleName)
75 identifier='int64'
76 right (IntegerLiteralExpr)
77 value='24'
78 right (IntegerLiteralExpr)
79 value='0xFF'
80 type (PrimitiveType)
81 type='BYTE'
82 statement (ExpressionStmt)
83 expression (MethodCallExpr)
84 name (SimpleName)
85 identifier='put'
86 arguments
87 argument (CastExpr)
88 expression (EnclosedExpr)
89 inner (BinaryExpr)
90 operator='BINARY_AND'
91 left (EnclosedExpr)
92 inner (BinaryExpr)
93 operator='SIGNED_RIGHT_SHIFT'
94 left (NameExpr)
95 name (SimpleName)
96 identifier='int64'
97 right (IntegerLiteralExpr)
98 value='32'
99 right (IntegerLiteralExpr)
100 value='0xFF'
101 type (PrimitiveType)
102 type='BYTE'
103 statement (ExpressionStmt)
104 expression (MethodCallExpr)
105 name (SimpleName)
106 identifier='put'
107 arguments
108 argument (CastExpr)
109 expression (EnclosedExpr)
110 inner (BinaryExpr)
111 operator='BINARY_AND'
112 left (EnclosedExpr)
113 inner (BinaryExpr)
114 operator='SIGNED_RIGHT_SHIFT'
115 left (NameExpr)
116 name (SimpleName)
117 identifier='int64'
118 right (IntegerLiteralExpr)
119 value='40'
120 right (IntegerLiteralExpr)
121 value='0xFF'
122 type (PrimitiveType)
123 type='BYTE'
124 statement (ExpressionStmt)
125 expression (MethodCallExpr)
126 name (SimpleName)
127 identifier='put'
128 arguments
129 argument (CastExpr)
130 expression (EnclosedExpr)
131 inner (BinaryExpr)
132 operator='BINARY_AND'
133 left (EnclosedExpr)
134 inner (BinaryExpr)
135 operator='SIGNED_RIGHT_SHIFT'
136 left (NameExpr)
137 name (SimpleName)
138 identifier='int64'
139 right (IntegerLiteralExpr)
140 value='48'
141 right (IntegerLiteralExpr)
142 value='0xFF'
143 type (PrimitiveType)
144 type='BYTE'
145 statement (ExpressionStmt)
146 expression (MethodCallExpr)
147 name (SimpleName)
148 identifier='put'
149 arguments
150 argument (CastExpr)
151 expression (EnclosedExpr)
152 inner (BinaryExpr)
153 operator='BINARY_AND'
154 left (EnclosedExpr)
155 inner (BinaryExpr)
156 operator='SIGNED_RIGHT_SHIFT'
157 left (NameExpr)
158 name (SimpleName)
159 identifier='int64'
160 right (IntegerLiteralExpr)
161 value='56'
162 right (IntegerLiteralExpr)
163 value='0xFF'
164 type (PrimitiveType)
165 type='BYTE'
166 type (VoidType)
167 name (SimpleName)
168 identifier='putINT64'
169 parameters
170 parameter (Parameter)
171 isVarArgs='false'
172 name (SimpleName)
173 identifier='int64'
174 type (PrimitiveType)
175 type='LONG'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
10 11
10 12
12 13
13 14
10 15
15 16
8 17
17 18
2 19
19 20
20 21
21 22
20 23
23 24
24 25
25 26
26 27
26 28
28 29
29 30
29 31
31 32
32 33
29 34
34 35
26 36
36 37
24 38
38 39
2 40
40 41
41 42
42 43
41 44
44 45
45 46
46 47
47 48
47 49
49 50
50 51
50 52
52 53
53 54
50 55
55 56
47 57
57 58
45 59
59 60
2 61
61 62
62 63
63 64
62 65
65 66
66 67
67 68
68 69
68 70
70 71
71 72
71 73
73 74
74 75
71 76
76 77
68 78
78 79
66 80
80 81
2 82
82 83
83 84
84 85
83 86
86 87
87 88
88 89
89 90
89 91
91 92
92 93
92 94
94 95
95 96
92 97
97 98
89 99
99 100
87 101
101 102
2 103
103 104
104 105
105 106
104 107
107 108
108 109
109 110
110 111
110 112
112 113
113 114
113 115
115 116
116 117
113 118
118 119
110 120
120 121
108 122
122 123
2 124
124 125
125 126
126 127
125 128
128 129
129 130
130 131
131 132
131 133
133 134
134 135
134 136
136 137
137 138
134 139
139 140
131 141
141 142
129 143
143 144
2 145
145 146
146 147
147 148
146 149
149 150
150 151
151 152
152 153
152 154
154 155
155 156
155 157
157 158
158 159
155 160
160 161
152 162
162 163
150 164
164 165
0 166
0 167
167 168
0 169
169 170
170 171
170 172
172 173
170 174
174 175

Writes a signed little-endian int64 to this ByteBuffer, starting at the current position. Advances the current position by 8.
