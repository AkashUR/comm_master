61
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (AssertStmt)
4 check (BinaryExpr)
5 operator='AND'
6 left (BinaryExpr)
7 operator='NOT_EQUALS'
8 left (NameExpr)
9 name (SimpleName)
10 identifier='annotation'
11 right (NullLiteralExpr)
12 right (BinaryExpr)
13 operator='EQUALS'
14 left (MethodCallExpr)
15 name (SimpleName)
16 identifier='getClassType'
17 scope (MethodCallExpr)
18 name (SimpleName)
19 identifier='getType'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='annotation'
23 right (ClassExpr)
24 type (ClassOrInterfaceType)
25 name (SimpleName)
26 identifier='Double'
27 statement (ExpressionStmt)
28 expression (AssignExpr)
29 operator='ASSIGN'
30 target (NameExpr)
31 name (SimpleName)
32 identifier='mAnnotation'
33 value (NameExpr)
34 name (SimpleName)
35 identifier='annotation'
36 statement (ExpressionStmt)
37 expression (AssignExpr)
38 operator='ASSIGN'
39 target (NameExpr)
40 name (SimpleName)
41 identifier='mDecimalPlaces'
42 value (NameExpr)
43 name (SimpleName)
44 identifier='decimalPlaces'
45 name (SimpleName)
46 identifier='VcfInfoDoubleAnnotator'
47 parameters
48 parameter (Parameter)
49 isVarArgs='false'
50 name (SimpleName)
51 identifier='annotation'
52 type (ClassOrInterfaceType)
53 name (SimpleName)
54 identifier='AbstractDerivedAnnotation'
55 parameter (Parameter)
56 isVarArgs='false'
57 name (SimpleName)
58 identifier='decimalPlaces'
59 type (PrimitiveType)
60 type='INT'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
6 8
8 9
9 10
6 11
4 12
12 13
12 14
14 15
15 16
14 17
17 18
18 19
17 20
20 21
21 22
12 23
23 24
24 25
25 26
2 27
27 28
28 29
28 30
30 31
31 32
28 33
33 34
34 35
2 36
36 37
37 38
37 39
39 40
40 41
37 42
42 43
43 44
0 45
45 46
0 47
47 48
48 49
48 50
50 51
48 52
52 53
53 54
47 55
55 56
55 57
57 58
55 59
59 60

Create an INFO annotation that outputs a double value.
