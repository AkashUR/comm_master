33
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='addJavaScript'
7 scope (MethodCallExpr)
8 name (SimpleName)
9 identifier='getMessageQueue'
10 scope (FieldAccessExpr)
11 name (SimpleName)
12 identifier='bridge'
13 scope (ThisExpr)
14 arguments
15 argument (NameExpr)
16 name (SimpleName)
17 identifier='statement'
18 type (VoidType)
19 name (SimpleName)
20 identifier='sendJavascript'
21 parameters
22 parameter (Parameter)
23 isVarArgs='false'
24 name (SimpleName)
25 identifier='statement'
26 type (ClassOrInterfaceType)
27 name (SimpleName)
28 identifier='String'
29 annotations
30 annotation (MarkerAnnotationExpr)
31 name (Name)
32 identifier='Deprecated'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
11 12
10 13
4 14
14 15
15 16
16 17
0 18
0 19
19 20
0 21
21 22
22 23
22 24
24 25
22 26
26 27
27 28
0 29
29 30
30 31
31 32

Send JavaScript statement back to JavaScript. Deprecated (https://issues.apache.org/jira/browse/CB-6851) Instead of executing snippets of JS, you should use the exec bridge to create a Java->JS communication channel. To do this: 1. Within plugin.xml (to have your JS run before deviceready): <js-module><runs/></js-module> 2. Within your .js (call exec on start-up): require('cordova/channel').onCordovaReady.subscribe(function() { require('cordova/exec')(win, null, 'Plugin', 'method', []); function win(message) { ... process message from java here ... } }); 3. Within your .java: PluginResult dataResult = new PluginResult(PluginResult.Status.OK, CODE); dataResult.setKeepCallback(true); savedCallbackContext.sendPluginResult(dataResult);
