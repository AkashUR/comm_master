97
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExplicitConstructorInvocationStmt)
4 isThis='true'
5 arguments
6 argument (NameExpr)
7 name (SimpleName)
8 identifier='hash'
9 argument (BinaryExpr)
10 operator='DIVIDE'
11 left (NameExpr)
12 name (SimpleName)
13 identifier='bitSetSize'
14 right (CastExpr)
15 expression (NameExpr)
16 name (SimpleName)
17 identifier='expectedNumberOElements'
18 type (PrimitiveType)
19 type='DOUBLE'
20 argument (NameExpr)
21 name (SimpleName)
22 identifier='expectedNumberOElements'
23 argument (CastExpr)
24 expression (MethodCallExpr)
25 name (SimpleName)
26 identifier='round'
27 scope (NameExpr)
28 name (SimpleName)
29 identifier='Math'
30 arguments
31 argument (BinaryExpr)
32 operator='MULTIPLY'
33 left (EnclosedExpr)
34 inner (BinaryExpr)
35 operator='DIVIDE'
36 left (NameExpr)
37 name (SimpleName)
38 identifier='bitSetSize'
39 right (CastExpr)
40 expression (NameExpr)
41 name (SimpleName)
42 identifier='expectedNumberOElements'
43 type (PrimitiveType)
44 type='DOUBLE'
45 right (MethodCallExpr)
46 name (SimpleName)
47 identifier='log'
48 scope (NameExpr)
49 name (SimpleName)
50 identifier='Math'
51 arguments
52 argument (DoubleLiteralExpr)
53 value='2.0'
54 type (PrimitiveType)
55 type='INT'
56 argument (NameExpr)
57 name (SimpleName)
58 identifier='metric'
59 statement (AssertStmt)
60 check (BinaryExpr)
61 operator='EQUALS'
62 left (NameExpr)
63 name (SimpleName)
64 identifier='bitSetSize'
65 right (FieldAccessExpr)
66 name (SimpleName)
67 identifier='bitSetSize'
68 scope (ThisExpr)
69 name (SimpleName)
70 identifier='BloomFilter'
71 parameters
72 parameter (Parameter)
73 isVarArgs='false'
74 name (SimpleName)
75 identifier='hash'
76 type (ClassOrInterfaceType)
77 name (SimpleName)
78 identifier='Hasher'
79 parameter (Parameter)
80 isVarArgs='false'
81 name (SimpleName)
82 identifier='bitSetSize'
83 type (PrimitiveType)
84 type='INT'
85 parameter (Parameter)
86 isVarArgs='false'
87 name (SimpleName)
88 identifier='expectedNumberOElements'
89 type (PrimitiveType)
90 type='INT'
91 parameter (Parameter)
92 isVarArgs='false'
93 name (SimpleName)
94 identifier='metric'
95 type (PrimitiveType)
96 type='INT'
0 1
1 2
2 3
3 4
3 5
5 6
6 7
7 8
5 9
9 10
9 11
11 12
12 13
9 14
14 15
15 16
16 17
14 18
18 19
5 20
20 21
21 22
5 23
23 24
24 25
25 26
24 27
27 28
28 29
24 30
30 31
31 32
31 33
33 34
34 35
34 36
36 37
37 38
34 39
39 40
40 41
41 42
39 43
43 44
31 45
45 46
46 47
45 48
48 49
49 50
45 51
51 52
52 53
23 54
54 55
5 56
56 57
57 58
2 59
59 60
60 61
60 62
62 63
63 64
60 65
65 66
66 67
65 68
0 69
69 70
0 71
71 72
72 73
72 74
74 75
72 76
76 77
77 78
71 79
79 80
79 81
81 82
79 83
83 84
71 85
85 86
85 87
87 88
85 89
89 90
71 91
91 92
91 93
93 94
91 95
95 96

Constructs an empty Bloom filter. The optimal number of hash functions (k) is estimated from the total size of the Bloom and the number of expected elements.
