50
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='getIsolateState'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='isolateId'
14 name (SimpleName)
15 identifier='state'
16 type (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='DManagerIsolateState'
19 statement (ExpressionStmt)
20 expression (AssignExpr)
21 operator='ASSIGN'
22 target (FieldAccessExpr)
23 name (SimpleName)
24 identifier='m_executingPlayerCode'
25 scope (NameExpr)
26 name (SimpleName)
27 identifier='state'
28 value (BooleanLiteralExpr)
29 value='true'
30 statement (ExpressionStmt)
31 expression (AssignExpr)
32 operator='ASSIGN'
33 target (FieldAccessExpr)
34 name (SimpleName)
35 identifier='m_faultEventDuringPlayerCodeExecution'
36 scope (NameExpr)
37 name (SimpleName)
38 identifier='state'
39 value (NullLiteralExpr)
40 type (VoidType)
41 name (SimpleName)
42 identifier='beginPlayerCodeExecution'
43 parameters
44 parameter (Parameter)
45 isVarArgs='false'
46 name (SimpleName)
47 identifier='isolateId'
48 type (PrimitiveType)
49 type='INT'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
12 13
6 14
14 15
6 16
16 17
17 18
2 19
19 20
20 21
20 22
22 23
23 24
22 25
25 26
26 27
20 28
28 29
2 30
30 31
31 32
31 33
33 34
34 35
33 36
36 37
37 38
31 39
0 40
0 41
41 42
0 43
43 44
44 45
44 46
46 47
44 48
48 49

Tell us that we are about to start executing user code in the player, such as a getter, a setter, or a function call. If a FaultEvent comes in while the code is executing, it is not added to the event queue in the normal way -- instead, it is saved, and is returned when endPlayerCodeExecution() is called.
