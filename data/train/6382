37
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (AssertStmt)
4 check (BinaryExpr)
5 operator='NOT_EQUALS'
6 left (NameExpr)
7 name (SimpleName)
8 identifier='obj'
9 right (NullLiteralExpr)
10 statement (ExpressionStmt)
11 expression (AssignExpr)
12 operator='ASSIGN'
13 target (NameExpr)
14 name (SimpleName)
15 identifier='pda'
16 value (MethodCallExpr)
17 name (SimpleName)
18 identifier='peerDeployAware'
19 scope (NameExpr)
20 name (SimpleName)
21 identifier='U'
22 arguments
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='obj'
26 type (VoidType)
27 name (SimpleName)
28 identifier='peerDeployLike'
29 parameters
30 parameter (Parameter)
31 isVarArgs='false'
32 name (SimpleName)
33 identifier='obj'
34 type (ClassOrInterfaceType)
35 name (SimpleName)
36 identifier='Object'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
2 10
10 11
11 12
11 13
13 14
14 15
11 16
16 17
17 18
16 19
19 20
20 21
16 22
22 23
23 24
24 25
0 26
0 27
27 28
0 29
29 30
30 31
30 32
32 33
30 34
34 35
35 36

Sets object that from which peer deployment information will be copied, i.e. this lambda object will be peer deployed using the same class loader as given object. <p> Note that in most cases Ignite attempts to automatically call this method whenever lambda classes like closures and predicates are created that wrap user object (the peer deploy information in such cases will be copied from the user object). <p> In general, if user gets class not found exception during peer loading it is very likely that peer deploy information was lost during wrapping of one object into another.
