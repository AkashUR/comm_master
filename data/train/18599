63
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='matrixMult'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='m1'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='m2'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='ret'
17 argument (IntegerLiteralExpr)
18 value='0'
19 argument (FieldAccessExpr)
20 name (SimpleName)
21 identifier='rlen'
22 scope (NameExpr)
23 name (SimpleName)
24 identifier='m1'
25 argument (NameExpr)
26 name (SimpleName)
27 identifier='examSparsity'
28 type (VoidType)
29 name (SimpleName)
30 identifier='matrixMult'
31 parameters
32 parameter (Parameter)
33 isVarArgs='false'
34 name (SimpleName)
35 identifier='m1'
36 type (ClassOrInterfaceType)
37 name (SimpleName)
38 identifier='MatrixBlock'
39 parameter (Parameter)
40 isVarArgs='false'
41 name (SimpleName)
42 identifier='m2'
43 type (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='MatrixBlock'
46 parameter (Parameter)
47 isVarArgs='false'
48 name (SimpleName)
49 identifier='ret'
50 type (ClassOrInterfaceType)
51 name (SimpleName)
52 identifier='MatrixBlock'
53 parameter (Parameter)
54 isVarArgs='false'
55 name (SimpleName)
56 identifier='examSparsity'
57 type (PrimitiveType)
58 type='BOOLEAN'
59 thrownExceptions
60 thrownException (ClassOrInterfaceType)
61 name (SimpleName)
62 identifier='DMLRuntimeException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
7 14
14 15
15 16
7 17
17 18
7 19
19 20
20 21
19 22
22 23
23 24
7 25
25 26
26 27
0 28
0 29
29 30
0 31
31 32
32 33
32 34
34 35
32 36
36 37
37 38
31 39
39 40
39 41
41 42
39 43
43 44
44 45
31 46
46 47
46 48
48 49
46 50
50 51
51 52
31 53
53 54
53 55
55 56
53 57
57 58
0 59
59 60
60 61
61 62

This method allows one to disabling exam sparsity. This feature is useful if matrixMult is used as an intermediate operation (for example: LibMatrixDNN). It makes sense for LibMatrixDNN because the output is internally consumed by another dense instruction, which makes repeated conversion to sparse wasteful. This should be used in rare cases and if you are unsure, use the method 'matrixMult(MatrixBlock m1, MatrixBlock m2, MatrixBlock ret)' instead.
