48
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='retrieveOrCreatePassThroughBundle'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='requestQueryIntent'
14 name (SimpleName)
15 identifier='passThroughBundle'
16 type (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='Bundle'
19 statement (ExpressionStmt)
20 expression (MethodCallExpr)
21 name (SimpleName)
22 identifier='putAll'
23 scope (NameExpr)
24 name (SimpleName)
25 identifier='passThroughBundle'
26 arguments
27 argument (NameExpr)
28 name (SimpleName)
29 identifier='data'
30 type (VoidType)
31 name (SimpleName)
32 identifier='addPassThroughData'
33 parameters
34 parameter (Parameter)
35 isVarArgs='false'
36 name (SimpleName)
37 identifier='requestQueryIntent'
38 type (ClassOrInterfaceType)
39 name (SimpleName)
40 identifier='Intent'
41 parameter (Parameter)
42 isVarArgs='false'
43 name (SimpleName)
44 identifier='data'
45 type (ClassOrInterfaceType)
46 name (SimpleName)
47 identifier='Bundle'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
12 13
6 14
14 15
6 16
16 17
17 18
2 19
19 20
20 21
21 22
20 23
23 24
24 25
20 26
26 27
27 28
28 29
0 30
0 31
31 32
0 33
33 34
34 35
34 36
36 37
34 38
38 39
39 40
33 41
41 42
41 43
43 44
41 45
45 46
46 47

Specify a bundle of data (probably representing whatever change happened in the condition) which will be included in the QUERY_CONDITION broadcast sent by the host for each event instance of the plugin. The minimal purpose is to enable the plugin to associate a QUERY_CONDITION to the with the REQUEST_QUERY that caused it. Note that for security reasons it is advisable to also store a message ID with the bundle which can be compared to known IDs on receipt. The host cannot validate the source of REQUEST_QUERY intents so fake data may be passed. Replay attacks are also possible. addPassThroughMesssageID() can be used to add an ID if the plugin doesn't wish to add it's own ID to the pass through bundle. Note also that there are several situations where REQUEST_QUERY will not result in a QUERY_CONDITION intent (e.g. event throttling by the host), so plugin-local data indexed with a message ID needs to be timestamped and eventually timed-out. This function can be called multiple times, each time all keys in data will be added to that of previous calls.
