28
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='mark'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='in'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='readlimit'
14 type (VoidType)
15 name (SimpleName)
16 identifier='mark'
17 parameters
18 parameter (Parameter)
19 isVarArgs='false'
20 name (SimpleName)
21 identifier='readlimit'
22 type (PrimitiveType)
23 type='INT'
24 annotations
25 annotation (MarkerAnnotationExpr)
26 name (Name)
27 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
0 14
0 15
15 16
0 17
17 18
18 19
18 20
20 21
18 22
22 23
0 24
24 25
25 26
26 27

Marks the current position in this input stream. A subsequent call to the <code>reset</code> method repositions this stream at the last marked position so that subsequent reads re-read the same bytes. <p> <p> The <code>readlimit</code> arguments tells this input stream to allow that many bytes to be read before the mark position gets invalidated. <p> <p> The general contract of <code>mark</code> is that, if the method <code>markSupported</code> returns <code>true</code>, the stream somehow remembers all the bytes read after the call to <code>mark</code> and stands ready to supply those same bytes again if and whenever the method <code>reset</code> is called.  However, the stream is not required to remember any data at all if more than <code>readlimit</code> bytes are read from the stream before <code>reset</code> is called. <p> <p> Marking a closed stream should not have any effect on the stream. <p> <p> The <code>mark</code> method of <code>InputStream</code> does nothing.
