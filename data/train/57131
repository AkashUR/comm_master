118
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (AssertStmt)
4 check (BinaryExpr)
5 operator='NOT_EQUALS'
6 left (NameExpr)
7 name (SimpleName)
8 identifier='record'
9 right (NullLiteralExpr)
10 statement (ExpressionStmt)
11 expression (AssignExpr)
12 operator='ASSIGN'
13 target (NameExpr)
14 name (SimpleName)
15 identifier='mReadName'
16 value (ObjectCreationExpr)
17 type (ClassOrInterfaceType)
18 name (SimpleName)
19 identifier='String'
20 arguments
21 argument (MethodCallExpr)
22 name (SimpleName)
23 identifier='toCharArray'
24 scope (MethodCallExpr)
25 name (SimpleName)
26 identifier='getReadName'
27 scope (NameExpr)
28 name (SimpleName)
29 identifier='record'
30 statement (ExpressionStmt)
31 expression (AssignExpr)
32 operator='ASSIGN'
33 target (NameExpr)
34 name (SimpleName)
35 identifier='mFlags'
36 value (MethodCallExpr)
37 name (SimpleName)
38 identifier='getFlags'
39 arguments
40 argument (NameExpr)
41 name (SimpleName)
42 identifier='record'
43 statement (ExpressionStmt)
44 expression (AssignExpr)
45 operator='ASSIGN'
46 target (NameExpr)
47 name (SimpleName)
48 identifier='mReadBases'
49 value (MethodCallExpr)
50 name (SimpleName)
51 identifier='getReadBases'
52 scope (NameExpr)
53 name (SimpleName)
54 identifier='record'
55 statement (ExpressionStmt)
56 expression (AssignExpr)
57 operator='ASSIGN'
58 target (NameExpr)
59 name (SimpleName)
60 identifier='mBaseQualities'
61 value (MethodCallExpr)
62 name (SimpleName)
63 identifier='getBaseQualities'
64 scope (NameExpr)
65 name (SimpleName)
66 identifier='record'
67 statement (ExpressionStmt)
68 expression (AssignExpr)
69 operator='ASSIGN'
70 target (NameExpr)
71 name (SimpleName)
72 identifier='mProjectedSplitReadPosition'
73 value (BinaryExpr)
74 operator='MULTIPLY'
75 left (MethodCallExpr)
76 name (SimpleName)
77 identifier='getAlignmentStart'
78 scope (NameExpr)
79 name (SimpleName)
80 identifier='record'
81 right (EnclosedExpr)
82 inner (ConditionalExpr)
83 condition (BinaryExpr)
84 operator='NOT_EQUALS'
85 left (EnclosedExpr)
86 inner (BinaryExpr)
87 operator='BINARY_AND'
88 left (MethodCallExpr)
89 name (SimpleName)
90 identifier='getFlags'
91 scope (NameExpr)
92 name (SimpleName)
93 identifier='record'
94 right (FieldAccessExpr)
95 name (SimpleName)
96 identifier='SAM_MATE_IS_REVERSE'
97 scope (NameExpr)
98 name (SimpleName)
99 identifier='SamBamConstants'
100 right (IntegerLiteralExpr)
101 value='0'
102 elseExpr (UnaryExpr)
103 operator='MINUS'
104 expression (IntegerLiteralExpr)
105 value='1'
106 thenExpr (IntegerLiteralExpr)
107 value='1'
108 name (SimpleName)
109 identifier='SamSequence'
110 parameters
111 parameter (Parameter)
112 isVarArgs='false'
113 name (SimpleName)
114 identifier='record'
115 type (ClassOrInterfaceType)
116 name (SimpleName)
117 identifier='SAMRecord'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
2 10
10 11
11 12
11 13
13 14
14 15
11 16
16 17
17 18
18 19
16 20
20 21
21 22
22 23
21 24
24 25
25 26
24 27
27 28
28 29
2 30
30 31
31 32
31 33
33 34
34 35
31 36
36 37
37 38
36 39
39 40
40 41
41 42
2 43
43 44
44 45
44 46
46 47
47 48
44 49
49 50
50 51
49 52
52 53
53 54
2 55
55 56
56 57
56 58
58 59
59 60
56 61
61 62
62 63
61 64
64 65
65 66
2 67
67 68
68 69
68 70
70 71
71 72
68 73
73 74
73 75
75 76
76 77
75 78
78 79
79 80
73 81
81 82
82 83
83 84
83 85
85 86
86 87
86 88
88 89
89 90
88 91
91 92
92 93
86 94
94 95
95 96
94 97
97 98
98 99
83 100
100 101
82 102
102 103
102 104
104 105
82 106
106 107
0 108
108 109
0 110
110 111
111 112
111 113
113 114
111 115
115 116
116 117

Turn a <code>SAMRecord</code> into a <code>SamSequence</code>.
