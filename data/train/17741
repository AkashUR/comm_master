117
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='EMail'
11 arguments
12 argument (MethodCallExpr)
13 name (SimpleName)
14 identifier='getProperties'
15 scope (NameExpr)
16 name (SimpleName)
17 identifier='System'
18 argument (NameExpr)
19 name (SimpleName)
20 identifier='host'
21 argument (NameExpr)
22 name (SimpleName)
23 identifier='from'
24 argument (NameExpr)
25 name (SimpleName)
26 identifier='to'
27 argument (NullLiteralExpr)
28 argument (NullLiteralExpr)
29 name (SimpleName)
30 identifier='emailTest'
31 type (ClassOrInterfaceType)
32 name (SimpleName)
33 identifier='EMail'
34 statement (ExpressionStmt)
35 expression (MethodCallExpr)
36 name (SimpleName)
37 identifier='addTo'
38 scope (NameExpr)
39 name (SimpleName)
40 identifier='emailTest'
41 arguments
42 argument (NameExpr)
43 name (SimpleName)
44 identifier='to2'
45 statement (ExpressionStmt)
46 expression (MethodCallExpr)
47 name (SimpleName)
48 identifier='addCc'
49 scope (NameExpr)
50 name (SimpleName)
51 identifier='emailTest'
52 arguments
53 argument (NameExpr)
54 name (SimpleName)
55 identifier='to3'
56 statement (ExpressionStmt)
57 expression (MethodCallExpr)
58 name (SimpleName)
59 identifier='setMessageHTML'
60 scope (NameExpr)
61 name (SimpleName)
62 identifier='emailTest'
63 arguments
64 argument (StringLiteralExpr)
65 value='TestAttachmentHTML'
66 argument (StringLiteralExpr)
67 value='Test Attachment HTML Message'
68 statement (ExpressionStmt)
69 expression (MethodCallExpr)
70 name (SimpleName)
71 identifier='addAttachment'
72 scope (NameExpr)
73 name (SimpleName)
74 identifier='emailTest'
75 arguments
76 argument (ObjectCreationExpr)
77 type (ClassOrInterfaceType)
78 name (SimpleName)
79 identifier='File'
80 arguments
81 argument (StringLiteralExpr)
82 value='C:\\Adempiere\\RUN_Adempiere.sh'
83 statement (ExpressionStmt)
84 expression (MethodCallExpr)
85 name (SimpleName)
86 identifier='createAuthenticator'
87 scope (NameExpr)
88 name (SimpleName)
89 identifier='emailTest'
90 arguments
91 argument (NameExpr)
92 name (SimpleName)
93 identifier='usr'
94 argument (NameExpr)
95 name (SimpleName)
96 identifier='pwd'
97 statement (ExpressionStmt)
98 expression (MethodCallExpr)
99 name (SimpleName)
100 identifier='assertEquals'
101 arguments
102 argument (MethodCallExpr)
103 name (SimpleName)
104 identifier='send'
105 scope (NameExpr)
106 name (SimpleName)
107 identifier='emailTest'
108 argument (FieldAccessExpr)
109 name (SimpleName)
110 identifier='SENT_OK'
111 scope (NameExpr)
112 name (SimpleName)
113 identifier='EMail'
114 type (VoidType)
115 name (SimpleName)
116 identifier='testAttachmentHTML'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
13 14
12 15
15 16
16 17
11 18
18 19
19 20
11 21
21 22
22 23
11 24
24 25
25 26
11 27
11 28
6 29
29 30
6 31
31 32
32 33
2 34
34 35
35 36
36 37
35 38
38 39
39 40
35 41
41 42
42 43
43 44
2 45
45 46
46 47
47 48
46 49
49 50
50 51
46 52
52 53
53 54
54 55
2 56
56 57
57 58
58 59
57 60
60 61
61 62
57 63
63 64
64 65
63 66
66 67
2 68
68 69
69 70
70 71
69 72
72 73
73 74
69 75
75 76
76 77
77 78
78 79
76 80
80 81
81 82
2 83
83 84
84 85
85 86
84 87
87 88
88 89
84 90
90 91
91 92
92 93
90 94
94 95
95 96
2 97
97 98
98 99
99 100
98 101
101 102
102 103
103 104
102 105
105 106
106 107
101 108
108 109
109 110
108 111
111 112
112 113
0 114
0 115
115 116

Test sending to internal public void testInternal() { EMail emailTest = new EMail(host, from, from, "TestInternal", "Test Internal Message"); assertEquals(emailTest.send(), EMail.SENT_OK); }	//	testInternal / Test sending to internal authenticated public void testInternalAuthenticate() { EMail emailTest = new EMail(host, from, from, "TestInternalAuthenticate", "Test Internal Authenticate Message"); emailTest.setEMailUser(usr, pwd); assertEquals(emailTest.send(), EMail.SENT_OK); }	//	testInternalAuthenticate / Test sending to external public void testExternal() { EMail emailTest = new EMail(host, from, to, "TestExternal", "Test External Message"); assertNotSame(emailTest.send(), EMail.SENT_OK); }	//	testExternal / Test sending to external authenticated public void testExternalAuthenticate() { EMail emailTest = new EMail(host, from, to, "TestExternalAuthenticate", "Test External Authenticate Message"); emailTest.setEMailUser(usr, pwd); assertEquals(emailTest.send(), EMail.SENT_OK); }	//	testExternalAuthenticate / Test sending HTML public void testHTML() { EMail emailTest = new EMail(host, from, to); emailTest.addCc(to2); emailTest.setMessageHTML("TestHTML", "Test HTML Message"); emailTest.setEMailUser(usr, pwd); assertEquals(emailTest.send(), EMail.SENT_OK); }	//	testHTML / Test sending Attachment public void testAttachment() { EMail emailTest = new EMail(host, from, to, "TestAttachment", "Test Attachment Message"); emailTest.addTo(to2); emailTest.addCc(to3); emailTest.addAttachment(new File("C:\\Adempiere\\RUN_Adempiere.sh")); emailTest.setEMailUser(usr, pwd); assertEquals(emailTest.send(), EMail.SENT_OK); }	//	testAttachmentHTML / Test sending Attachment HTML
