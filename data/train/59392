54
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='saveNonvolatilesBeforeSysCall'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='call'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='ir'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='restoreNonvolatilesAfterSysCall'
18 arguments
19 argument (NameExpr)
20 name (SimpleName)
21 identifier='call'
22 argument (NameExpr)
23 name (SimpleName)
24 identifier='ir'
25 statement (ExpressionStmt)
26 expression (MethodCallExpr)
27 name (SimpleName)
28 identifier='changeOperatorTo'
29 scope (NameExpr)
30 name (SimpleName)
31 identifier='call'
32 arguments
33 argument (NameExpr)
34 name (SimpleName)
35 identifier='IA32_CALL'
36 type (VoidType)
37 name (SimpleName)
38 identifier='saveNonvolatilesAroundSysCall'
39 parameters
40 parameter (Parameter)
41 isVarArgs='false'
42 name (SimpleName)
43 identifier='call'
44 type (ClassOrInterfaceType)
45 name (SimpleName)
46 identifier='Instruction'
47 parameter (Parameter)
48 isVarArgs='false'
49 name (SimpleName)
50 identifier='ir'
51 type (ClassOrInterfaceType)
52 name (SimpleName)
53 identifier='IR'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
20 21
18 22
22 23
23 24
2 25
25 26
26 27
27 28
26 29
29 30
30 31
26 32
32 33
33 34
34 35
0 36
0 37
37 38
0 39
39 40
40 41
40 42
42 43
40 44
44 45
45 46
39 47
47 48
47 49
49 50
47 51
51 52
52 53

Save and restore all nonvolatile registers around a syscall. We do this in case the sys call does not respect our register conventions.<p> We save/restore all nonvolatiles and the PR, whether or not this routine uses them.  This may be a tad inefficient, but if you're making a system call, you probably don't care.<p> Side effect: changes the operator of the call instruction to IA32_CALL.
