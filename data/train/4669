113
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (TryStmt)
4 tryBlock (BlockStmt)
5 statements
6 statement (ExpressionStmt)
7 expression (MethodCallExpr)
8 name (SimpleName)
9 identifier='writeStartObject'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='generator'
13 statement (ExpressionStmt)
14 expression (MethodCallExpr)
15 name (SimpleName)
16 identifier='encode'
17 arguments
18 argument (StringLiteralExpr)
19 value='data'
20 argument (NameExpr)
21 name (SimpleName)
22 identifier='object'
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='generator'
26 argument (ConditionalExpr)
27 condition (BinaryExpr)
28 operator='EQUALS'
29 left (FieldAccessExpr)
30 name (SimpleName)
31 identifier='length'
32 scope (NameExpr)
33 name (SimpleName)
34 identifier='options'
35 right (IntegerLiteralExpr)
36 value='0'
37 elseExpr (MethodCallExpr)
38 name (SimpleName)
39 identifier='copyOf'
40 arguments
41 argument (MethodCallExpr)
42 name (SimpleName)
43 identifier='asList'
44 arguments
45 argument (NameExpr)
46 name (SimpleName)
47 identifier='options'
48 thenExpr (MethodCallExpr)
49 name (SimpleName)
50 identifier='noneOf'
51 arguments
52 argument (ClassExpr)
53 type (ClassOrInterfaceType)
54 name (SimpleName)
55 identifier='Option'
56 statement (ExpressionStmt)
57 expression (MethodCallExpr)
58 name (SimpleName)
59 identifier='writeEnd'
60 scope (NameExpr)
61 name (SimpleName)
62 identifier='generator'
63 resources
64 resource (VariableDeclarationExpr)
65 variables
66 variable (VariableDeclarator)
67 initializer (MethodCallExpr)
68 name (SimpleName)
69 identifier='createGenerator'
70 scope (FieldAccessExpr)
71 name (SimpleName)
72 identifier='Json'
73 scope (FieldAccessExpr)
74 name (SimpleName)
75 identifier='json'
76 scope (NameExpr)
77 name (SimpleName)
78 identifier='javax'
79 arguments
80 argument (NameExpr)
81 name (SimpleName)
82 identifier='writer'
83 name (SimpleName)
84 identifier='generator'
85 type (ClassOrInterfaceType)
86 name (SimpleName)
87 identifier='JsonGenerator'
88 type (VoidType)
89 name (SimpleName)
90 identifier='encode'
91 parameters
92 parameter (Parameter)
93 isVarArgs='false'
94 name (SimpleName)
95 identifier='object'
96 type (ClassOrInterfaceType)
97 name (SimpleName)
98 identifier='Object'
99 parameter (Parameter)
100 isVarArgs='false'
101 name (SimpleName)
102 identifier='writer'
103 type (ClassOrInterfaceType)
104 name (SimpleName)
105 identifier='Writer'
106 parameter (Parameter)
107 isVarArgs='true'
108 name (SimpleName)
109 identifier='options'
110 type (ClassOrInterfaceType)
111 name (SimpleName)
112 identifier='Option'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
5 13
13 14
14 15
15 16
14 17
17 18
18 19
17 20
20 21
21 22
17 23
23 24
24 25
17 26
26 27
27 28
27 29
29 30
30 31
29 32
32 33
33 34
27 35
35 36
26 37
37 38
38 39
37 40
40 41
41 42
42 43
41 44
44 45
45 46
46 47
26 48
48 49
49 50
48 51
51 52
52 53
53 54
54 55
5 56
56 57
57 58
58 59
57 60
60 61
61 62
3 63
63 64
64 65
65 66
66 67
67 68
68 69
67 70
70 71
71 72
70 73
73 74
74 75
73 76
76 77
77 78
67 79
79 80
80 81
81 82
66 83
83 84
66 85
85 86
86 87
0 88
0 89
89 90
0 91
91 92
92 93
92 94
94 95
92 96
96 97
97 98
91 99
99 100
99 101
101 102
99 103
103 104
104 105
91 106
106 107
106 108
108 109
106 110
110 111
111 112

Encodes the given object as JSON while streaming the string in JSON format to the given writer. The encoded object will be available as <code>data</code> property of the JS object in the returned JSON string.
