55
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='quickSort1'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='fromIndex'
11 argument (BinaryExpr)
12 operator='MINUS'
13 left (NameExpr)
14 name (SimpleName)
15 identifier='toIndex'
16 right (NameExpr)
17 name (SimpleName)
18 identifier='fromIndex'
19 argument (NameExpr)
20 name (SimpleName)
21 identifier='c'
22 argument (NameExpr)
23 name (SimpleName)
24 identifier='swapper'
25 type (VoidType)
26 name (SimpleName)
27 identifier='quickSort'
28 parameters
29 parameter (Parameter)
30 isVarArgs='false'
31 name (SimpleName)
32 identifier='fromIndex'
33 type (PrimitiveType)
34 type='INT'
35 parameter (Parameter)
36 isVarArgs='false'
37 name (SimpleName)
38 identifier='toIndex'
39 type (PrimitiveType)
40 type='INT'
41 parameter (Parameter)
42 isVarArgs='false'
43 name (SimpleName)
44 identifier='c'
45 type (ClassOrInterfaceType)
46 name (SimpleName)
47 identifier='IntComparator'
48 parameter (Parameter)
49 isVarArgs='false'
50 name (SimpleName)
51 identifier='swapper'
52 type (ClassOrInterfaceType)
53 name (SimpleName)
54 identifier='Swapper'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
11 13
13 14
14 15
11 16
16 17
17 18
7 19
19 20
20 21
7 22
22 23
23 24
0 25
0 26
26 27
0 28
28 29
29 30
29 31
31 32
29 33
33 34
28 35
35 36
35 37
37 38
35 39
39 40
28 41
41 42
41 43
43 44
41 45
45 46
46 47
28 48
48 49
48 50
50 51
48 52
52 53
53 54

Sorts the specified range of elements according to the order induced by the specified comparator.  All elements in the range must be <i>mutually comparable</i> by the specified comparator (that is, <tt>c.compare(a, b)</tt> must not throw an exception for any indexes <tt>a</tt> and <tt>b</tt> in the range).<p> The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993).  This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance.
