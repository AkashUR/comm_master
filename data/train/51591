54
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='checkDistance'
7 arguments
8 argument (StringLiteralExpr)
9 value='LINESTRING (0 0 0, 10000000 10000000 1 )'
10 argument (StringLiteralExpr)
11 value='LINESTRING (0 0 1, 10000000 10000000 0 )'
12 argument (IntegerLiteralExpr)
13 value='0'
14 argument (DoubleLiteralExpr)
15 value='0.001'
16 statement (ExpressionStmt)
17 expression (MethodCallExpr)
18 name (SimpleName)
19 identifier='checkDistance'
20 arguments
21 argument (StringLiteralExpr)
22 value='LINESTRING (-10000 -10000 0, 10000 10000 1 )'
23 argument (StringLiteralExpr)
24 value='LINESTRING (-10000 -10000 1, 10000 10000 0 )'
25 argument (IntegerLiteralExpr)
26 value='0'
27 statement (ExpressionStmt)
28 expression (MethodCallExpr)
29 name (SimpleName)
30 identifier='checkDistance'
31 arguments
32 argument (StringLiteralExpr)
33 value='LINESTRING (-10000000 -10000000 0, 10000000 10000000 1 )'
34 argument (StringLiteralExpr)
35 value='LINESTRING (-10000000 -10000000 1, 10000000 10000000 0 )'
36 argument (IntegerLiteralExpr)
37 value='0'
38 argument (DoubleLiteralExpr)
39 value='0.02'
40 statement (ExpressionStmt)
41 expression (MethodCallExpr)
42 name (SimpleName)
43 identifier='checkDistance'
44 arguments
45 argument (StringLiteralExpr)
46 value='LINESTRING (20000000 10000000 20, 10000000 20000000 10 )'
47 argument (StringLiteralExpr)
48 value='LINESTRING (10000000 10000000 20, 20000000 20000000 10 )'
49 argument (IntegerLiteralExpr)
50 value='0'
51 type (VoidType)
52 name (SimpleName)
53 identifier='testCrossSegmentsRobust'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
7 12
12 13
7 14
14 15
2 16
16 17
17 18
18 19
17 20
20 21
21 22
20 23
23 24
20 25
25 26
2 27
27 28
28 29
29 30
28 31
31 32
32 33
31 34
34 35
31 36
36 37
31 38
38 39
2 40
40 41
41 42
42 43
41 44
44 45
45 46
44 47
47 48
44 49
49 50
0 51
0 52
52 53

Many of these tests exhibit robustness errors  due to numerical roundoff in the distance algorithm mathematics. This happens when computing nearly-coincident lines  with very large ordinate values
