139
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='println'
7 scope (FieldAccessExpr)
8 name (SimpleName)
9 identifier='out'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='System'
13 arguments
14 argument (BinaryExpr)
15 operator='PLUS'
16 left (BinaryExpr)
17 operator='PLUS'
18 left (BinaryExpr)
19 operator='PLUS'
20 left (StringLiteralExpr)
21 value='Task Update: '
22 right (MethodCallExpr)
23 name (SimpleName)
24 identifier='getValue'
25 scope (MethodCallExpr)
26 name (SimpleName)
27 identifier='getTaskId'
28 scope (NameExpr)
29 name (SimpleName)
30 identifier='status'
31 right (StringLiteralExpr)
32 value=' in state '
33 right (MethodCallExpr)
34 name (SimpleName)
35 identifier='getState'
36 scope (NameExpr)
37 name (SimpleName)
38 identifier='status'
39 statement (SwitchStmt)
40 selector (MethodCallExpr)
41 name (SimpleName)
42 identifier='getState'
43 scope (NameExpr)
44 name (SimpleName)
45 identifier='status'
46 entries
47 entrie (SwitchEntryStmt)
48 label (NameExpr)
49 name (SimpleName)
50 identifier='TASK_FAILED'
51 entrie (SwitchEntryStmt)
52 label (NameExpr)
53 name (SimpleName)
54 identifier='TASK_LOST'
55 entrie (SwitchEntryStmt)
56 label (NameExpr)
57 name (SimpleName)
58 identifier='TASK_FINISHED'
59 statements
60 statement (ExpressionStmt)
61 expression (MethodCallExpr)
62 name (SimpleName)
63 identifier='call'
64 scope (NameExpr)
65 name (SimpleName)
66 identifier='onTaskComplete'
67 arguments
68 argument (MethodCallExpr)
69 name (SimpleName)
70 identifier='getValue'
71 scope (MethodCallExpr)
72 name (SimpleName)
73 identifier='getTaskId'
74 scope (NameExpr)
75 name (SimpleName)
76 identifier='status'
77 statement (ExpressionStmt)
78 expression (MethodCallExpr)
79 name (SimpleName)
80 identifier='call'
81 scope (MethodCallExpr)
82 name (SimpleName)
83 identifier='getTaskUnAssigner'
84 scope (NameExpr)
85 name (SimpleName)
86 identifier='scheduler'
87 arguments
88 argument (MethodCallExpr)
89 name (SimpleName)
90 identifier='getValue'
91 scope (MethodCallExpr)
92 name (SimpleName)
93 identifier='getTaskId'
94 scope (NameExpr)
95 name (SimpleName)
96 identifier='status'
97 argument (MethodCallExpr)
98 name (SimpleName)
99 identifier='get'
100 scope (NameExpr)
101 name (SimpleName)
102 identifier='launchedTasks'
103 arguments
104 argument (MethodCallExpr)
105 name (SimpleName)
106 identifier='getValue'
107 scope (MethodCallExpr)
108 name (SimpleName)
109 identifier='getTaskId'
110 scope (NameExpr)
111 name (SimpleName)
112 identifier='status'
113 statement (BreakStmt)
114 type (VoidType)
115 name (SimpleName)
116 identifier='statusUpdate'
117 parameters
118 parameter (Parameter)
119 isVarArgs='false'
120 name (SimpleName)
121 identifier='driver'
122 type (ClassOrInterfaceType)
123 name (SimpleName)
124 identifier='SchedulerDriver'
125 parameter (Parameter)
126 isVarArgs='false'
127 name (SimpleName)
128 identifier='status'
129 type (ClassOrInterfaceType)
130 name (SimpleName)
131 identifier='TaskStatus'
132 scope (ClassOrInterfaceType)
133 name (SimpleName)
134 identifier='Protos'
135 annotations
136 annotation (MarkerAnnotationExpr)
137 name (Name)
138 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
11 12
4 13
13 14
14 15
14 16
16 17
16 18
18 19
18 20
20 21
18 22
22 23
23 24
22 25
25 26
26 27
25 28
28 29
29 30
16 31
31 32
14 33
33 34
34 35
33 36
36 37
37 38
2 39
39 40
40 41
41 42
40 43
43 44
44 45
39 46
46 47
47 48
48 49
49 50
46 51
51 52
52 53
53 54
46 55
55 56
56 57
57 58
55 59
59 60
60 61
61 62
62 63
61 64
64 65
65 66
61 67
67 68
68 69
69 70
68 71
71 72
72 73
71 74
74 75
75 76
59 77
77 78
78 79
79 80
78 81
81 82
82 83
81 84
84 85
85 86
78 87
87 88
88 89
89 90
88 91
91 92
92 93
91 94
94 95
95 96
87 97
97 98
98 99
97 100
100 101
101 102
97 103
103 104
104 105
105 106
104 107
107 108
108 109
107 110
110 111
111 112
59 113
0 114
0 115
115 116
0 117
117 118
118 119
118 120
120 121
118 122
122 123
123 124
117 125
125 126
125 127
127 128
125 129
129 130
130 131
129 132
132 133
133 134
0 135
135 136
136 137
137 138

Update Fenzo scheduler of task completion if received status indicates a terminal state. There is no need to tell Fenzo scheduler of task started because that is supposed to have been already done before launching the task in Mesos. In a real world framework, this state change would also be persisted with a state machine of choice.
