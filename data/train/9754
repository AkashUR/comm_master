128
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='GraphModel'
11 name (SimpleName)
12 identifier='graph'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='GraphModel'
16 statement (ExpressionStmt)
17 expression (VariableDeclarationExpr)
18 variables
19 variable (VariableDeclarator)
20 initializer (MethodCallExpr)
21 name (SimpleName)
22 identifier='fillGraphModel'
23 arguments
24 argument (NameExpr)
25 name (SimpleName)
26 identifier='graph'
27 name (SimpleName)
28 identifier='nodes'
29 type (ArrayType)
30 origin='TYPE'
31 componentType (ClassOrInterfaceType)
32 name (SimpleName)
33 identifier='GraphNode'
34 statement (ExpressionStmt)
35 expression (VariableDeclarationExpr)
36 variables
37 variable (VariableDeclarator)
38 initializer (MethodCallExpr)
39 name (SimpleName)
40 identifier='createPathExpression'
41 arguments
42 argument (BooleanLiteralExpr)
43 value='false'
44 argument (BooleanLiteralExpr)
45 value='true'
46 argument (BooleanLiteralExpr)
47 value='false'
48 name (SimpleName)
49 identifier='pathExpression'
50 type (ClassOrInterfaceType)
51 name (SimpleName)
52 identifier='PathExpression'
53 statement (ExpressionStmt)
54 expression (VariableDeclarationExpr)
55 variables
56 variable (VariableDeclarator)
57 initializer (MethodCallExpr)
58 name (SimpleName)
59 identifier='nextMatch'
60 scope (NameExpr)
61 name (SimpleName)
62 identifier='pathExpression'
63 arguments
64 argument (NameExpr)
65 name (SimpleName)
66 identifier='graph'
67 argument (MethodCallExpr)
68 name (SimpleName)
69 identifier='buildSingleSet'
70 arguments
71 argument (ArrayAccessExpr)
72 index (IntegerLiteralExpr)
73 value='0'
74 name (NameExpr)
75 name (SimpleName)
76 identifier='nodes'
77 name (SimpleName)
78 identifier='output'
79 type (ClassOrInterfaceType)
80 name (SimpleName)
81 identifier='Collection'
82 typeArguments
83 typeArgument (ClassOrInterfaceType)
84 name (SimpleName)
85 identifier='GraphNode'
86 statement (ExpressionStmt)
87 expression (MethodCallExpr)
88 name (SimpleName)
89 identifier='assertEquals'
90 arguments
91 argument (IntegerLiteralExpr)
92 value='2'
93 argument (MethodCallExpr)
94 name (SimpleName)
95 identifier='size'
96 scope (NameExpr)
97 name (SimpleName)
98 identifier='output'
99 statement (ExpressionStmt)
100 expression (MethodCallExpr)
101 name (SimpleName)
102 identifier='assertGraphContainsElement'
103 arguments
104 argument (NameExpr)
105 name (SimpleName)
106 identifier='output'
107 argument (NameExpr)
108 name (SimpleName)
109 identifier='nodes'
110 argument (IntegerLiteralExpr)
111 value='5'
112 statement (ExpressionStmt)
113 expression (MethodCallExpr)
114 name (SimpleName)
115 identifier='assertGraphContainsElement'
116 arguments
117 argument (NameExpr)
118 name (SimpleName)
119 identifier='output'
120 argument (NameExpr)
121 name (SimpleName)
122 identifier='nodes'
123 argument (IntegerLiteralExpr)
124 value='6'
125 type (VoidType)
126 name (SimpleName)
127 identifier='testPathExpressionNextMatchCumulativeNonRecursive'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
19 20
20 21
21 22
20 23
23 24
24 25
25 26
19 27
27 28
19 29
29 30
29 31
31 32
32 33
2 34
34 35
35 36
36 37
37 38
38 39
39 40
38 41
41 42
42 43
41 44
44 45
41 46
46 47
37 48
48 49
37 50
50 51
51 52
2 53
53 54
54 55
55 56
56 57
57 58
58 59
57 60
60 61
61 62
57 63
63 64
64 65
65 66
63 67
67 68
68 69
67 70
70 71
71 72
72 73
71 74
74 75
75 76
56 77
77 78
56 79
79 80
80 81
79 82
82 83
83 84
84 85
2 86
86 87
87 88
88 89
87 90
90 91
91 92
90 93
93 94
94 95
93 96
96 97
97 98
2 99
99 100
100 101
101 102
100 103
103 104
104 105
105 106
103 107
107 108
108 109
103 110
110 111
2 112
112 113
113 114
114 115
113 116
116 117
117 118
118 119
116 120
120 121
121 122
116 123
123 124
0 125
0 126
126 127

Tests non-recursive and cumulative version of PathExpression.nextMatch(GraphModel, Collection<GraphNode>)
