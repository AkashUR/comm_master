42
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='quickSort1'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='a'
11 argument (IntegerLiteralExpr)
12 value='0'
13 argument (FieldAccessExpr)
14 name (SimpleName)
15 identifier='length'
16 scope (NameExpr)
17 name (SimpleName)
18 identifier='a'
19 argument (NameExpr)
20 name (SimpleName)
21 identifier='c'
22 type (VoidType)
23 name (SimpleName)
24 identifier='quickSort'
25 parameters
26 parameter (Parameter)
27 isVarArgs='false'
28 name (SimpleName)
29 identifier='a'
30 type (ArrayType)
31 origin='TYPE'
32 componentType (ClassOrInterfaceType)
33 name (SimpleName)
34 identifier='Object'
35 parameter (Parameter)
36 isVarArgs='false'
37 name (SimpleName)
38 identifier='c'
39 type (ClassOrInterfaceType)
40 name (SimpleName)
41 identifier='Comparator'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
7 13
13 14
14 15
13 16
16 17
17 18
7 19
19 20
20 21
0 22
0 23
23 24
0 25
25 26
26 27
26 28
28 29
26 30
30 31
30 32
32 33
33 34
25 35
35 36
35 37
37 38
35 39
39 40
40 41

Sorts the specified array according to the order induced by the specified comparator.  All elements in the range must be <i>mutually comparable</i> by the specified comparator (that is, <tt>c.compare(e1, e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the range).<p> The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993).  This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance.
