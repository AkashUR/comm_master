187
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (NameExpr)
7 name (SimpleName)
8 identifier='items'
9 value (BinaryExpr)
10 operator='PLUS'
11 left (BinaryExpr)
12 operator='MINUS'
13 left (NameExpr)
14 name (SimpleName)
15 identifier='max'
16 right (NameExpr)
17 name (SimpleName)
18 identifier='min'
19 right (IntegerLiteralExpr)
20 value='1'
21 statement (ExpressionStmt)
22 expression (AssignExpr)
23 operator='ASSIGN'
24 target (NameExpr)
25 name (SimpleName)
26 identifier='base'
27 value (NameExpr)
28 name (SimpleName)
29 identifier='min'
30 statement (ExpressionStmt)
31 expression (AssignExpr)
32 operator='ASSIGN'
33 target (NameExpr)
34 name (SimpleName)
35 identifier='zipfianconstant'
36 value (NameExpr)
37 name (SimpleName)
38 identifier='_zipfianconstant'
39 statement (ExpressionStmt)
40 expression (AssignExpr)
41 operator='ASSIGN'
42 target (NameExpr)
43 name (SimpleName)
44 identifier='random'
45 value (ObjectCreationExpr)
46 type (ClassOrInterfaceType)
47 name (SimpleName)
48 identifier='Random'
49 statement (ExpressionStmt)
50 expression (AssignExpr)
51 operator='ASSIGN'
52 target (NameExpr)
53 name (SimpleName)
54 identifier='theta'
55 value (NameExpr)
56 name (SimpleName)
57 identifier='zipfianconstant'
58 statement (ExpressionStmt)
59 expression (AssignExpr)
60 operator='ASSIGN'
61 target (NameExpr)
62 name (SimpleName)
63 identifier='zeta2theta'
64 value (MethodCallExpr)
65 name (SimpleName)
66 identifier='zeta'
67 arguments
68 argument (IntegerLiteralExpr)
69 value='2'
70 argument (NameExpr)
71 name (SimpleName)
72 identifier='theta'
73 statement (ExpressionStmt)
74 expression (AssignExpr)
75 operator='ASSIGN'
76 target (NameExpr)
77 name (SimpleName)
78 identifier='alpha'
79 value (BinaryExpr)
80 operator='DIVIDE'
81 left (DoubleLiteralExpr)
82 value='1.0'
83 right (EnclosedExpr)
84 inner (BinaryExpr)
85 operator='MINUS'
86 left (DoubleLiteralExpr)
87 value='1.0'
88 right (NameExpr)
89 name (SimpleName)
90 identifier='theta'
91 statement (ExpressionStmt)
92 expression (AssignExpr)
93 operator='ASSIGN'
94 target (NameExpr)
95 name (SimpleName)
96 identifier='zetan'
97 value (NameExpr)
98 name (SimpleName)
99 identifier='_zetan'
100 statement (ExpressionStmt)
101 expression (AssignExpr)
102 operator='ASSIGN'
103 target (NameExpr)
104 name (SimpleName)
105 identifier='countforzeta'
106 value (NameExpr)
107 name (SimpleName)
108 identifier='items'
109 statement (ExpressionStmt)
110 expression (AssignExpr)
111 operator='ASSIGN'
112 target (NameExpr)
113 name (SimpleName)
114 identifier='eta'
115 value (BinaryExpr)
116 operator='DIVIDE'
117 left (EnclosedExpr)
118 inner (BinaryExpr)
119 operator='MINUS'
120 left (IntegerLiteralExpr)
121 value='1'
122 right (MethodCallExpr)
123 name (SimpleName)
124 identifier='pow'
125 scope (NameExpr)
126 name (SimpleName)
127 identifier='Math'
128 arguments
129 argument (BinaryExpr)
130 operator='DIVIDE'
131 left (DoubleLiteralExpr)
132 value='2.0'
133 right (NameExpr)
134 name (SimpleName)
135 identifier='items'
136 argument (BinaryExpr)
137 operator='MINUS'
138 left (IntegerLiteralExpr)
139 value='1'
140 right (NameExpr)
141 name (SimpleName)
142 identifier='theta'
143 right (EnclosedExpr)
144 inner (BinaryExpr)
145 operator='MINUS'
146 left (IntegerLiteralExpr)
147 value='1'
148 right (BinaryExpr)
149 operator='DIVIDE'
150 left (NameExpr)
151 name (SimpleName)
152 identifier='zeta2theta'
153 right (NameExpr)
154 name (SimpleName)
155 identifier='zetan'
156 statement (ExpressionStmt)
157 expression (MethodCallExpr)
158 name (SimpleName)
159 identifier='nextInt'
160 name (SimpleName)
161 identifier='ZipfianGenerator'
162 parameters
163 parameter (Parameter)
164 isVarArgs='false'
165 name (SimpleName)
166 identifier='min'
167 type (PrimitiveType)
168 type='LONG'
169 parameter (Parameter)
170 isVarArgs='false'
171 name (SimpleName)
172 identifier='max'
173 type (PrimitiveType)
174 type='LONG'
175 parameter (Parameter)
176 isVarArgs='false'
177 name (SimpleName)
178 identifier='_zipfianconstant'
179 type (PrimitiveType)
180 type='DOUBLE'
181 parameter (Parameter)
182 isVarArgs='false'
183 name (SimpleName)
184 identifier='_zetan'
185 type (PrimitiveType)
186 type='DOUBLE'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
9 10
9 11
11 12
11 13
13 14
14 15
11 16
16 17
17 18
9 19
19 20
2 21
21 22
22 23
22 24
24 25
25 26
22 27
27 28
28 29
2 30
30 31
31 32
31 33
33 34
34 35
31 36
36 37
37 38
2 39
39 40
40 41
40 42
42 43
43 44
40 45
45 46
46 47
47 48
2 49
49 50
50 51
50 52
52 53
53 54
50 55
55 56
56 57
2 58
58 59
59 60
59 61
61 62
62 63
59 64
64 65
65 66
64 67
67 68
68 69
67 70
70 71
71 72
2 73
73 74
74 75
74 76
76 77
77 78
74 79
79 80
79 81
81 82
79 83
83 84
84 85
84 86
86 87
84 88
88 89
89 90
2 91
91 92
92 93
92 94
94 95
95 96
92 97
97 98
98 99
2 100
100 101
101 102
101 103
103 104
104 105
101 106
106 107
107 108
2 109
109 110
110 111
110 112
112 113
113 114
110 115
115 116
115 117
117 118
118 119
118 120
120 121
118 122
122 123
123 124
122 125
125 126
126 127
122 128
128 129
129 130
129 131
131 132
129 133
133 134
134 135
128 136
136 137
136 138
138 139
136 140
140 141
141 142
115 143
143 144
144 145
144 146
146 147
144 148
148 149
148 150
150 151
151 152
148 153
153 154
154 155
2 156
156 157
157 158
158 159
0 160
160 161
0 162
162 163
163 164
163 165
165 166
163 167
167 168
162 169
169 170
169 171
171 172
169 173
173 174
162 175
175 176
175 177
177 178
175 179
179 180
162 181
181 182
181 183
183 184
181 185
185 186

Create a zipfian generator for items between min and max (inclusive) for the specified zipfian constant, using the precomputed value of zeta.
