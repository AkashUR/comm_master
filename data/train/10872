47
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='writeJarFromContent'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='className'
11 argument (BinaryExpr)
12 operator='PLUS'
13 left (BinaryExpr)
14 operator='PLUS'
15 left (StringLiteralExpr)
16 value='public class '
17 right (NameExpr)
18 name (SimpleName)
19 identifier='className'
20 right (StringLiteralExpr)
21 value='{}'
22 argument (NameExpr)
23 name (SimpleName)
24 identifier='outputFile'
25 type (VoidType)
26 name (SimpleName)
27 identifier='writeJarFromName'
28 parameters
29 parameter (Parameter)
30 isVarArgs='false'
31 name (SimpleName)
32 identifier='className'
33 type (ClassOrInterfaceType)
34 name (SimpleName)
35 identifier='String'
36 parameter (Parameter)
37 isVarArgs='false'
38 name (SimpleName)
39 identifier='outputFile'
40 type (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='File'
43 thrownExceptions
44 thrownException (ClassOrInterfaceType)
45 name (SimpleName)
46 identifier='IOException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
11 13
13 14
13 15
15 16
13 17
17 18
18 19
11 20
20 21
7 22
22 23
23 24
0 25
0 26
26 27
0 28
28 29
29 30
29 31
31 32
29 33
33 34
34 35
28 36
36 37
36 38
38 39
36 40
40 41
41 42
0 43
43 44
44 45
45 46

Write a JAR with an empty class using the given class name. The className may have a package separated by /. For example: my/package/myclass
