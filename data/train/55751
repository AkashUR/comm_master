157
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (FieldAccessExpr)
7 name (SimpleName)
8 identifier='body'
9 scope (ThisExpr)
10 value (EnclosedExpr)
11 inner (BinaryExpr)
12 operator='REMAINDER'
13 left (NameExpr)
14 name (SimpleName)
15 identifier='code'
16 right (IntegerLiteralExpr)
17 value='100'
18 statement (ExpressionStmt)
19 expression (AssignExpr)
20 operator='ASSIGN'
21 target (FieldAccessExpr)
22 name (SimpleName)
23 identifier='dress'
24 scope (ThisExpr)
25 value (EnclosedExpr)
26 inner (BinaryExpr)
27 operator='REMAINDER'
28 left (BinaryExpr)
29 operator='DIVIDE'
30 left (NameExpr)
31 name (SimpleName)
32 identifier='code'
33 right (IntegerLiteralExpr)
34 value='100'
35 right (IntegerLiteralExpr)
36 value='100'
37 statement (ExpressionStmt)
38 expression (AssignExpr)
39 operator='ASSIGN'
40 target (FieldAccessExpr)
41 name (SimpleName)
42 identifier='head'
43 scope (ThisExpr)
44 value (CastExpr)
45 expression (EnclosedExpr)
46 inner (BinaryExpr)
47 operator='REMAINDER'
48 left (BinaryExpr)
49 operator='DIVIDE'
50 left (NameExpr)
51 name (SimpleName)
52 identifier='code'
53 right (MethodCallExpr)
54 name (SimpleName)
55 identifier='pow'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='Math'
59 arguments
60 argument (IntegerLiteralExpr)
61 value='100'
62 argument (IntegerLiteralExpr)
63 value='2'
64 right (IntegerLiteralExpr)
65 value='100'
66 type (PrimitiveType)
67 type='INT'
68 statement (ExpressionStmt)
69 expression (AssignExpr)
70 operator='ASSIGN'
71 target (FieldAccessExpr)
72 name (SimpleName)
73 identifier='hair'
74 scope (ThisExpr)
75 value (CastExpr)
76 expression (EnclosedExpr)
77 inner (BinaryExpr)
78 operator='REMAINDER'
79 left (BinaryExpr)
80 operator='DIVIDE'
81 left (NameExpr)
82 name (SimpleName)
83 identifier='code'
84 right (MethodCallExpr)
85 name (SimpleName)
86 identifier='pow'
87 scope (NameExpr)
88 name (SimpleName)
89 identifier='Math'
90 arguments
91 argument (IntegerLiteralExpr)
92 value='100'
93 argument (IntegerLiteralExpr)
94 value='3'
95 right (IntegerLiteralExpr)
96 value='100'
97 type (PrimitiveType)
98 type='INT'
99 statement (ExpressionStmt)
100 expression (AssignExpr)
101 operator='ASSIGN'
102 target (FieldAccessExpr)
103 name (SimpleName)
104 identifier='detail'
105 scope (ThisExpr)
106 value (CastExpr)
107 expression (EnclosedExpr)
108 inner (BinaryExpr)
109 operator='REMAINDER'
110 left (BinaryExpr)
111 operator='DIVIDE'
112 left (NameExpr)
113 name (SimpleName)
114 identifier='code'
115 right (MethodCallExpr)
116 name (SimpleName)
117 identifier='pow'
118 scope (NameExpr)
119 name (SimpleName)
120 identifier='Math'
121 arguments
122 argument (IntegerLiteralExpr)
123 value='100'
124 argument (IntegerLiteralExpr)
125 value='4'
126 right (IntegerLiteralExpr)
127 value='100'
128 type (PrimitiveType)
129 type='INT'
130 statement (ExpressionStmt)
131 expression (AssignExpr)
132 operator='ASSIGN'
133 target (FieldAccessExpr)
134 name (SimpleName)
135 identifier='mouth'
136 scope (ThisExpr)
137 value (IntegerLiteralExpr)
138 value='0'
139 statement (ExpressionStmt)
140 expression (AssignExpr)
141 operator='ASSIGN'
142 target (FieldAccessExpr)
143 name (SimpleName)
144 identifier='eyes'
145 scope (ThisExpr)
146 value (IntegerLiteralExpr)
147 value='0'
148 name (SimpleName)
149 identifier='Outfit'
150 parameters
151 parameter (Parameter)
152 isVarArgs='false'
153 name (SimpleName)
154 identifier='code'
155 type (PrimitiveType)
156 type='INT'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
6 9
4 10
10 11
11 12
11 13
13 14
14 15
11 16
16 17
2 18
18 19
19 20
19 21
21 22
22 23
21 24
19 25
25 26
26 27
26 28
28 29
28 30
30 31
31 32
28 33
33 34
26 35
35 36
2 37
37 38
38 39
38 40
40 41
41 42
40 43
38 44
44 45
45 46
46 47
46 48
48 49
48 50
50 51
51 52
48 53
53 54
54 55
53 56
56 57
57 58
53 59
59 60
60 61
59 62
62 63
46 64
64 65
44 66
66 67
2 68
68 69
69 70
69 71
71 72
72 73
71 74
69 75
75 76
76 77
77 78
77 79
79 80
79 81
81 82
82 83
79 84
84 85
85 86
84 87
87 88
88 89
84 90
90 91
91 92
90 93
93 94
77 95
95 96
75 97
97 98
2 99
99 100
100 101
100 102
102 103
103 104
102 105
100 106
106 107
107 108
108 109
108 110
110 111
110 112
112 113
113 114
110 115
115 116
116 117
115 118
118 119
119 120
115 121
121 122
122 123
121 124
124 125
108 126
126 127
106 128
128 129
2 130
130 131
131 132
131 133
133 134
134 135
133 136
131 137
137 138
2 139
139 140
140 141
140 142
142 143
143 144
142 145
140 146
146 147
0 148
148 149
0 150
150 151
151 152
151 153
153 154
151 155
155 156

Creates a new outfit based on a numeric code.
