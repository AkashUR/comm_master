131
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='Phaser'
11 name (SimpleName)
12 identifier='parent'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='Phaser'
16 statement (ExpressionStmt)
17 expression (VariableDeclarationExpr)
18 variables
19 variable (VariableDeclarator)
20 initializer (ObjectCreationExpr)
21 type (ClassOrInterfaceType)
22 name (SimpleName)
23 identifier='Phaser'
24 arguments
25 argument (NameExpr)
26 name (SimpleName)
27 identifier='parent'
28 name (SimpleName)
29 identifier='child'
30 type (ClassOrInterfaceType)
31 name (SimpleName)
32 identifier='Phaser'
33 statement (ExpressionStmt)
34 expression (MethodCallExpr)
35 name (SimpleName)
36 identifier='assertEquals'
37 arguments
38 argument (IntegerLiteralExpr)
39 value='0'
40 argument (MethodCallExpr)
41 name (SimpleName)
42 identifier='register'
43 scope (NameExpr)
44 name (SimpleName)
45 identifier='parent'
46 statement (ExpressionStmt)
47 expression (MethodCallExpr)
48 name (SimpleName)
49 identifier='assertEquals'
50 arguments
51 argument (IntegerLiteralExpr)
52 value='0'
53 argument (MethodCallExpr)
54 name (SimpleName)
55 identifier='register'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='child'
59 statement (ExpressionStmt)
60 expression (MethodCallExpr)
61 name (SimpleName)
62 identifier='assertState'
63 arguments
64 argument (NameExpr)
65 name (SimpleName)
66 identifier='child'
67 argument (IntegerLiteralExpr)
68 value='0'
69 argument (IntegerLiteralExpr)
70 value='1'
71 argument (IntegerLiteralExpr)
72 value='1'
73 statement (ExpressionStmt)
74 expression (MethodCallExpr)
75 name (SimpleName)
76 identifier='assertState'
77 arguments
78 argument (NameExpr)
79 name (SimpleName)
80 identifier='parent'
81 argument (IntegerLiteralExpr)
82 value='0'
83 argument (IntegerLiteralExpr)
84 value='2'
85 argument (IntegerLiteralExpr)
86 value='2'
87 statement (ExpressionStmt)
88 expression (MethodCallExpr)
89 name (SimpleName)
90 identifier='assertEquals'
91 arguments
92 argument (IntegerLiteralExpr)
93 value='0'
94 argument (MethodCallExpr)
95 name (SimpleName)
96 identifier='arriveAndDeregister'
97 scope (NameExpr)
98 name (SimpleName)
99 identifier='child'
100 statement (ExpressionStmt)
101 expression (MethodCallExpr)
102 name (SimpleName)
103 identifier='assertState'
104 arguments
105 argument (NameExpr)
106 name (SimpleName)
107 identifier='child'
108 argument (IntegerLiteralExpr)
109 value='0'
110 argument (IntegerLiteralExpr)
111 value='0'
112 argument (IntegerLiteralExpr)
113 value='0'
114 statement (ExpressionStmt)
115 expression (MethodCallExpr)
116 name (SimpleName)
117 identifier='assertState'
118 arguments
119 argument (NameExpr)
120 name (SimpleName)
121 identifier='parent'
122 argument (IntegerLiteralExpr)
123 value='0'
124 argument (IntegerLiteralExpr)
125 value='1'
126 argument (IntegerLiteralExpr)
127 value='1'
128 type (VoidType)
129 name (SimpleName)
130 identifier='testArriveAndDeregister4'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
19 20
20 21
21 22
22 23
20 24
24 25
25 26
26 27
19 28
28 29
19 30
30 31
31 32
2 33
33 34
34 35
35 36
34 37
37 38
38 39
37 40
40 41
41 42
40 43
43 44
44 45
2 46
46 47
47 48
48 49
47 50
50 51
51 52
50 53
53 54
54 55
53 56
56 57
57 58
2 59
59 60
60 61
61 62
60 63
63 64
64 65
65 66
63 67
67 68
63 69
69 70
63 71
71 72
2 73
73 74
74 75
75 76
74 77
77 78
78 79
79 80
77 81
81 82
77 83
83 84
77 85
85 86
2 87
87 88
88 89
89 90
88 91
91 92
92 93
91 94
94 95
95 96
94 97
97 98
98 99
2 100
100 101
101 102
102 103
101 104
104 105
105 106
106 107
104 108
108 109
104 110
110 111
104 112
112 113
2 114
114 115
115 116
116 117
115 118
118 119
119 120
120 121
118 122
122 123
118 124
124 125
118 126
126 127
0 128
0 129
129 130

arriveAndDeregister deregisters one party from its parent when the number of parties of child is zero after deregistration
