161
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (NameExpr)
7 name (SimpleName)
8 identifier='elems'
9 value (MethodCallExpr)
10 name (SimpleName)
11 identifier='ensureCapacity'
12 scope (NameExpr)
13 name (SimpleName)
14 identifier='ArrayUtils'
15 arguments
16 argument (NameExpr)
17 name (SimpleName)
18 identifier='elems'
19 argument (BinaryExpr)
20 operator='PLUS'
21 left (NameExpr)
22 name (SimpleName)
23 identifier='length'
24 right (IntegerLiteralExpr)
25 value='3'
26 statement (ExpressionStmt)
27 expression (AssignExpr)
28 operator='ASSIGN'
29 target (ArrayAccessExpr)
30 index (NameExpr)
31 name (SimpleName)
32 identifier='length'
33 name (NameExpr)
34 name (SimpleName)
35 identifier='elems'
36 value (CastExpr)
37 expression (EnclosedExpr)
38 inner (BinaryExpr)
39 operator='BINARY_AND'
40 left (EnclosedExpr)
41 inner (BinaryExpr)
42 operator='SIGNED_RIGHT_SHIFT'
43 left (NameExpr)
44 name (SimpleName)
45 identifier='x'
46 right (IntegerLiteralExpr)
47 value='24'
48 right (IntegerLiteralExpr)
49 value='0xFF'
50 type (PrimitiveType)
51 type='BYTE'
52 statement (ExpressionStmt)
53 expression (AssignExpr)
54 operator='ASSIGN'
55 target (ArrayAccessExpr)
56 index (BinaryExpr)
57 operator='PLUS'
58 left (NameExpr)
59 name (SimpleName)
60 identifier='length'
61 right (IntegerLiteralExpr)
62 value='1'
63 name (NameExpr)
64 name (SimpleName)
65 identifier='elems'
66 value (CastExpr)
67 expression (EnclosedExpr)
68 inner (BinaryExpr)
69 operator='BINARY_AND'
70 left (EnclosedExpr)
71 inner (BinaryExpr)
72 operator='SIGNED_RIGHT_SHIFT'
73 left (NameExpr)
74 name (SimpleName)
75 identifier='x'
76 right (IntegerLiteralExpr)
77 value='16'
78 right (IntegerLiteralExpr)
79 value='0xFF'
80 type (PrimitiveType)
81 type='BYTE'
82 statement (ExpressionStmt)
83 expression (AssignExpr)
84 operator='ASSIGN'
85 target (ArrayAccessExpr)
86 index (BinaryExpr)
87 operator='PLUS'
88 left (NameExpr)
89 name (SimpleName)
90 identifier='length'
91 right (IntegerLiteralExpr)
92 value='2'
93 name (NameExpr)
94 name (SimpleName)
95 identifier='elems'
96 value (CastExpr)
97 expression (EnclosedExpr)
98 inner (BinaryExpr)
99 operator='BINARY_AND'
100 left (EnclosedExpr)
101 inner (BinaryExpr)
102 operator='SIGNED_RIGHT_SHIFT'
103 left (NameExpr)
104 name (SimpleName)
105 identifier='x'
106 right (IntegerLiteralExpr)
107 value='8'
108 right (IntegerLiteralExpr)
109 value='0xFF'
110 type (PrimitiveType)
111 type='BYTE'
112 statement (ExpressionStmt)
113 expression (AssignExpr)
114 operator='ASSIGN'
115 target (ArrayAccessExpr)
116 index (BinaryExpr)
117 operator='PLUS'
118 left (NameExpr)
119 name (SimpleName)
120 identifier='length'
121 right (IntegerLiteralExpr)
122 value='3'
123 name (NameExpr)
124 name (SimpleName)
125 identifier='elems'
126 value (CastExpr)
127 expression (EnclosedExpr)
128 inner (BinaryExpr)
129 operator='BINARY_AND'
130 left (EnclosedExpr)
131 inner (NameExpr)
132 name (SimpleName)
133 identifier='x'
134 right (IntegerLiteralExpr)
135 value='0xFF'
136 type (PrimitiveType)
137 type='BYTE'
138 statement (ExpressionStmt)
139 expression (AssignExpr)
140 operator='ASSIGN'
141 target (NameExpr)
142 name (SimpleName)
143 identifier='length'
144 value (BinaryExpr)
145 operator='PLUS'
146 left (NameExpr)
147 name (SimpleName)
148 identifier='length'
149 right (IntegerLiteralExpr)
150 value='4'
151 type (VoidType)
152 name (SimpleName)
153 identifier='appendInt'
154 parameters
155 parameter (Parameter)
156 isVarArgs='false'
157 name (SimpleName)
158 identifier='x'
159 type (PrimitiveType)
160 type='INT'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
9 10
10 11
9 12
12 13
13 14
9 15
15 16
16 17
17 18
15 19
19 20
19 21
21 22
22 23
19 24
24 25
2 26
26 27
27 28
27 29
29 30
30 31
31 32
29 33
33 34
34 35
27 36
36 37
37 38
38 39
38 40
40 41
41 42
41 43
43 44
44 45
41 46
46 47
38 48
48 49
36 50
50 51
2 52
52 53
53 54
53 55
55 56
56 57
56 58
58 59
59 60
56 61
61 62
55 63
63 64
64 65
53 66
66 67
67 68
68 69
68 70
70 71
71 72
71 73
73 74
74 75
71 76
76 77
68 78
78 79
66 80
80 81
2 82
82 83
83 84
83 85
85 86
86 87
86 88
88 89
89 90
86 91
91 92
85 93
93 94
94 95
83 96
96 97
97 98
98 99
98 100
100 101
101 102
101 103
103 104
104 105
101 106
106 107
98 108
108 109
96 110
110 111
2 112
112 113
113 114
113 115
115 116
116 117
116 118
118 119
119 120
116 121
121 122
115 123
123 124
124 125
113 126
126 127
127 128
128 129
128 130
130 131
131 132
132 133
128 134
134 135
126 136
136 137
2 138
138 139
139 140
139 141
141 142
142 143
139 144
144 145
144 146
146 147
147 148
144 149
149 150
0 151
0 152
152 153
0 154
154 155
155 156
155 157
157 158
155 159
159 160

Append an integer as a four byte number.
