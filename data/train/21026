159
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='GregorianCalendar'
11 arguments
12 argument (MethodCallExpr)
13 name (SimpleName)
14 identifier='getTimeZone'
15 scope (NameExpr)
16 name (SimpleName)
17 identifier='TimeZone'
18 arguments
19 argument (StringLiteralExpr)
20 value='GMT'
21 name (SimpleName)
22 identifier='cal'
23 type (ClassOrInterfaceType)
24 name (SimpleName)
25 identifier='Calendar'
26 statement (ExpressionStmt)
27 expression (MethodCallExpr)
28 name (SimpleName)
29 identifier='set'
30 scope (NameExpr)
31 name (SimpleName)
32 identifier='cal'
33 arguments
34 argument (FieldAccessExpr)
35 name (SimpleName)
36 identifier='YEAR'
37 scope (NameExpr)
38 name (SimpleName)
39 identifier='Calendar'
40 argument (IntegerLiteralExpr)
41 value='1972'
42 statement (ExpressionStmt)
43 expression (VariableDeclarationExpr)
44 variables
45 variable (VariableDeclarator)
46 initializer (MethodCallExpr)
47 name (SimpleName)
48 identifier='getTime'
49 scope (MethodCallExpr)
50 name (SimpleName)
51 identifier='getTime'
52 scope (NameExpr)
53 name (SimpleName)
54 identifier='cal'
55 name (SimpleName)
56 identifier='timepoint'
57 type (PrimitiveType)
58 type='LONG'
59 statement (ExpressionStmt)
60 expression (VariableDeclarationExpr)
61 variables
62 variable (VariableDeclarator)
63 initializer (ObjectCreationExpr)
64 type (ClassOrInterfaceType)
65 name (SimpleName)
66 identifier='ObjectMapper'
67 name (SimpleName)
68 identifier='mapper'
69 type (ClassOrInterfaceType)
70 name (SimpleName)
71 identifier='ObjectMapper'
72 statement (ExpressionStmt)
73 expression (VariableDeclarationExpr)
74 variables
75 variable (VariableDeclarator)
76 initializer (MethodCallExpr)
77 name (SimpleName)
78 identifier='readValue'
79 scope (NameExpr)
80 name (SimpleName)
81 identifier='mapper'
82 arguments
83 argument (MethodCallExpr)
84 name (SimpleName)
85 identifier='valueOf'
86 scope (NameExpr)
87 name (SimpleName)
88 identifier='String'
89 arguments
90 argument (NameExpr)
91 name (SimpleName)
92 identifier='timepoint'
93 argument (ClassExpr)
94 type (ClassOrInterfaceType)
95 name (SimpleName)
96 identifier='DateTime'
97 name (SimpleName)
98 identifier='dt'
99 type (ClassOrInterfaceType)
100 name (SimpleName)
101 identifier='DateTime'
102 statement (ExpressionStmt)
103 expression (MethodCallExpr)
104 name (SimpleName)
105 identifier='assertEquals'
106 arguments
107 argument (NameExpr)
108 name (SimpleName)
109 identifier='timepoint'
110 argument (MethodCallExpr)
111 name (SimpleName)
112 identifier='getMillis'
113 scope (NameExpr)
114 name (SimpleName)
115 identifier='dt'
116 statement (ExpressionStmt)
117 expression (AssignExpr)
118 operator='ASSIGN'
119 target (NameExpr)
120 name (SimpleName)
121 identifier='dt'
122 value (MethodCallExpr)
123 name (SimpleName)
124 identifier='readValue'
125 scope (NameExpr)
126 name (SimpleName)
127 identifier='mapper'
128 arguments
129 argument (MethodCallExpr)
130 name (SimpleName)
131 identifier='quote'
132 arguments
133 argument (StringLiteralExpr)
134 value='1972-12-28T12:00:01.000+0000'
135 argument (ClassExpr)
136 type (ClassOrInterfaceType)
137 name (SimpleName)
138 identifier='DateTime'
139 statement (ExpressionStmt)
140 expression (MethodCallExpr)
141 name (SimpleName)
142 identifier='assertEquals'
143 arguments
144 argument (StringLiteralExpr)
145 value='1972-12-28T12:00:01.000Z'
146 argument (MethodCallExpr)
147 name (SimpleName)
148 identifier='toString'
149 scope (NameExpr)
150 name (SimpleName)
151 identifier='dt'
152 type (VoidType)
153 name (SimpleName)
154 identifier='testDeserFromNumber'
155 thrownExceptions
156 thrownException (ClassOrInterfaceType)
157 name (SimpleName)
158 identifier='IOException'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
13 14
12 15
15 16
16 17
12 18
18 19
19 20
6 21
21 22
6 23
23 24
24 25
2 26
26 27
27 28
28 29
27 30
30 31
31 32
27 33
33 34
34 35
35 36
34 37
37 38
38 39
33 40
40 41
2 42
42 43
43 44
44 45
45 46
46 47
47 48
46 49
49 50
50 51
49 52
52 53
53 54
45 55
55 56
45 57
57 58
2 59
59 60
60 61
61 62
62 63
63 64
64 65
65 66
62 67
67 68
62 69
69 70
70 71
2 72
72 73
73 74
74 75
75 76
76 77
77 78
76 79
79 80
80 81
76 82
82 83
83 84
84 85
83 86
86 87
87 88
83 89
89 90
90 91
91 92
82 93
93 94
94 95
95 96
75 97
97 98
75 99
99 100
100 101
2 102
102 103
103 104
104 105
103 106
106 107
107 108
108 109
106 110
110 111
111 112
110 113
113 114
114 115
2 116
116 117
117 118
117 119
119 120
120 121
117 122
122 123
123 124
122 125
125 126
126 127
122 128
128 129
129 130
130 131
129 132
132 133
133 134
128 135
135 136
136 137
137 138
2 139
139 140
140 141
141 142
140 143
143 144
144 145
143 146
146 147
147 148
146 149
149 150
150 151
0 152
0 153
153 154
0 155
155 156
156 157
157 158

Ok, then: should be able to convert from JSON String or Number, with standard deserializer we provide.
