45
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='getStunSocket'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='candidate'
13 arguments
14 argument (NullLiteralExpr)
15 name (SimpleName)
16 identifier='stunSocket'
17 type (ClassOrInterfaceType)
18 name (SimpleName)
19 identifier='IceSocketWrapper'
20 statement (ExpressionStmt)
21 expression (MethodCallExpr)
22 name (SimpleName)
23 identifier='addSocket'
24 scope (MethodCallExpr)
25 name (SimpleName)
26 identifier='getStunStack'
27 scope (NameExpr)
28 name (SimpleName)
29 identifier='candidate'
30 arguments
31 argument (NameExpr)
32 name (SimpleName)
33 identifier='stunSocket'
34 type (VoidType)
35 name (SimpleName)
36 identifier='createAndRegisterStunSocket'
37 parameters
38 parameter (Parameter)
39 isVarArgs='false'
40 name (SimpleName)
41 identifier='candidate'
42 type (ClassOrInterfaceType)
43 name (SimpleName)
44 identifier='HostCandidate'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
7 13
13 14
6 15
15 16
6 17
17 18
18 19
2 20
20 21
21 22
22 23
21 24
24 25
25 26
24 27
27 28
28 29
21 30
30 31
31 32
32 33
0 34
0 35
35 36
0 37
37 38
38 39
38 40
40 41
38 42
42 43
43 44

Since we are most certainly going to use all local host candidates for sending and receiving STUN connectivity checks, and possibly for STUN harvesting too, we might as well create their STUN sockets here and register them with the StunStack. This allows us to avoid conflicts between the STUN harvester and the connectivity checks later on.
