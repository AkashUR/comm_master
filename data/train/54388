119
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='Scanner'
11 arguments
12 argument (FieldAccessExpr)
13 name (SimpleName)
14 identifier='in'
15 scope (NameExpr)
16 name (SimpleName)
17 identifier='System'
18 name (SimpleName)
19 identifier='in'
20 type (ClassOrInterfaceType)
21 name (SimpleName)
22 identifier='Scanner'
23 statement (ExpressionStmt)
24 expression (VariableDeclarationExpr)
25 variables
26 variable (VariableDeclarator)
27 initializer (ObjectCreationExpr)
28 type (ClassOrInterfaceType)
29 name (SimpleName)
30 identifier='ArrayList'
31 name (SimpleName)
32 identifier='strings'
33 type (ClassOrInterfaceType)
34 name (SimpleName)
35 identifier='List'
36 typeArguments
37 typeArgument (ClassOrInterfaceType)
38 name (SimpleName)
39 identifier='String'
40 statement (ExpressionStmt)
41 expression (VariableDeclarationExpr)
42 variables
43 variable (VariableDeclarator)
44 name (SimpleName)
45 identifier='s'
46 type (ClassOrInterfaceType)
47 name (SimpleName)
48 identifier='String'
49 statement (WhileStmt)
50 body (BlockStmt)
51 statements
52 statement (ExpressionStmt)
53 expression (MethodCallExpr)
54 name (SimpleName)
55 identifier='add'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='strings'
59 arguments
60 argument (NameExpr)
61 name (SimpleName)
62 identifier='s'
63 condition (UnaryExpr)
64 operator='LOGICAL_COMPLEMENT'
65 expression (MethodCallExpr)
66 name (SimpleName)
67 identifier='equals'
68 scope (MethodCallExpr)
69 name (SimpleName)
70 identifier='trim'
71 scope (EnclosedExpr)
72 inner (AssignExpr)
73 operator='ASSIGN'
74 target (NameExpr)
75 name (SimpleName)
76 identifier='s'
77 value (MethodCallExpr)
78 name (SimpleName)
79 identifier='nextLine'
80 scope (NameExpr)
81 name (SimpleName)
82 identifier='in'
83 arguments
84 argument (StringLiteralExpr)
85 value=''
86 statement (ExpressionStmt)
87 expression (MethodCallExpr)
88 name (SimpleName)
89 identifier='printAnagramsTogether'
90 arguments
91 argument (MethodCallExpr)
92 name (SimpleName)
93 identifier='toArray'
94 scope (NameExpr)
95 name (SimpleName)
96 identifier='strings'
97 arguments
98 argument (ArrayCreationExpr)
99 elementType (ClassOrInterfaceType)
100 name (SimpleName)
101 identifier='String'
102 levels
103 level (ArrayCreationLevel)
104 dimension (IntegerLiteralExpr)
105 value='0'
106 type (VoidType)
107 name (SimpleName)
108 identifier='main'
109 parameters
110 parameter (Parameter)
111 isVarArgs='false'
112 name (SimpleName)
113 identifier='a'
114 type (ArrayType)
115 origin='NAME'
116 componentType (ClassOrInterfaceType)
117 name (SimpleName)
118 identifier='String'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
13 14
12 15
15 16
16 17
6 18
18 19
6 20
20 21
21 22
2 23
23 24
24 25
25 26
26 27
27 28
28 29
29 30
26 31
31 32
26 33
33 34
34 35
33 36
36 37
37 38
38 39
2 40
40 41
41 42
42 43
43 44
44 45
43 46
46 47
47 48
2 49
49 50
50 51
51 52
52 53
53 54
54 55
53 56
56 57
57 58
53 59
59 60
60 61
61 62
49 63
63 64
63 65
65 66
66 67
65 68
68 69
69 70
68 71
71 72
72 73
72 74
74 75
75 76
72 77
77 78
78 79
77 80
80 81
81 82
65 83
83 84
84 85
2 86
86 87
87 88
88 89
87 90
90 91
91 92
92 93
91 94
94 95
95 96
91 97
97 98
98 99
99 100
100 101
98 102
102 103
103 104
104 105
0 106
0 107
107 108
0 109
109 110
110 111
110 112
112 113
110 114
114 115
114 116
116 117
117 118

Take list of strings from console and print anagrams in groups.
