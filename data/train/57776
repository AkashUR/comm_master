68
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='iterator'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='runningQuery'
13 name (SimpleName)
14 identifier='itr'
15 type (ClassOrInterfaceType)
16 name (SimpleName)
17 identifier='ICloseableIterator'
18 typeArguments
19 typeArgument (ArrayType)
20 origin='TYPE'
21 componentType (ClassOrInterfaceType)
22 name (SimpleName)
23 identifier='IBindingSet'
24 statement (ExpressionStmt)
25 expression (MethodCallExpr)
26 name (SimpleName)
27 identifier='assertSameSolutionsAnyOrder'
28 arguments
29 argument (NameExpr)
30 name (SimpleName)
31 identifier='msg'
32 argument (NameExpr)
33 name (SimpleName)
34 identifier='expected'
35 argument (NameExpr)
36 name (SimpleName)
37 identifier='itr'
38 argument (NameExpr)
39 name (SimpleName)
40 identifier='runningQuery'
41 type (VoidType)
42 name (SimpleName)
43 identifier='assertSameSolutionsAnyOrder'
44 parameters
45 parameter (Parameter)
46 isVarArgs='false'
47 name (SimpleName)
48 identifier='msg'
49 type (ClassOrInterfaceType)
50 name (SimpleName)
51 identifier='String'
52 parameter (Parameter)
53 isVarArgs='false'
54 name (SimpleName)
55 identifier='expected'
56 type (ArrayType)
57 origin='TYPE'
58 componentType (ClassOrInterfaceType)
59 name (SimpleName)
60 identifier='IBindingSet'
61 parameter (Parameter)
62 isVarArgs='false'
63 name (SimpleName)
64 identifier='runningQuery'
65 type (ClassOrInterfaceType)
66 name (SimpleName)
67 identifier='IRunningQuery'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
6 13
13 14
6 15
15 16
16 17
15 18
18 19
19 20
19 21
21 22
22 23
2 24
24 25
25 26
26 27
25 28
28 29
29 30
30 31
28 32
32 33
33 34
28 35
35 36
36 37
28 38
38 39
39 40
0 41
0 42
42 43
0 44
44 45
45 46
45 47
47 48
45 49
49 50
50 51
44 52
52 53
52 54
54 55
52 56
56 57
56 58
58 59
59 60
44 61
61 62
61 63
63 64
61 65
65 66
66 67

Verifies that the iterator visits the specified objects in some arbitrary ordering and that the iterator is exhausted once all expected objects have been visited. The implementation uses a selection without replacement "pattern". <p> Note: If the objects being visited do not correctly implement hashCode() and equals() then this can fail even if the desired objects would be visited. When this happens, fix the implementation classes.
