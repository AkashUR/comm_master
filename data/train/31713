138
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='println'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='out'
10 arguments
11 argument (StringLiteralExpr)
12 value='  @Test'
13 statement (ExpressionStmt)
14 expression (MethodCallExpr)
15 name (SimpleName)
16 identifier='println'
17 scope (NameExpr)
18 name (SimpleName)
19 identifier='out'
20 arguments
21 argument (BinaryExpr)
22 operator='PLUS'
23 left (BinaryExpr)
24 operator='PLUS'
25 left (StringLiteralExpr)
26 value='  public void '
27 right (NameExpr)
28 name (SimpleName)
29 identifier='methodName'
30 right (StringLiteralExpr)
31 value='() throws Throwable {'
32 statement (ExpressionStmt)
33 expression (MethodCallExpr)
34 name (SimpleName)
35 identifier='println'
36 scope (NameExpr)
37 name (SimpleName)
38 identifier='out'
39 statement (ExpressionStmt)
40 expression (MethodCallExpr)
41 name (SimpleName)
42 identifier='println'
43 scope (NameExpr)
44 name (SimpleName)
45 identifier='out'
46 arguments
47 argument (MethodCallExpr)
48 name (SimpleName)
49 identifier='indent'
50 arguments
51 argument (BinaryExpr)
52 operator='PLUS'
53 left (BinaryExpr)
54 operator='PLUS'
55 left (BinaryExpr)
56 operator='PLUS'
57 left (BinaryExpr)
58 operator='PLUS'
59 left (StringLiteralExpr)
60 value='if (debug) { System.out.format(\"%n%s%n\",\"'
61 right (NameExpr)
62 name (SimpleName)
63 identifier='className'
64 right (StringLiteralExpr)
65 value='.'
66 right (NameExpr)
67 name (SimpleName)
68 identifier='methodName'
69 right (StringLiteralExpr)
70 value='\"); }'
71 statement (ExpressionStmt)
72 expression (MethodCallExpr)
73 name (SimpleName)
74 identifier='println'
75 scope (NameExpr)
76 name (SimpleName)
77 identifier='out'
78 statement (ExpressionStmt)
79 expression (MethodCallExpr)
80 name (SimpleName)
81 identifier='println'
82 scope (NameExpr)
83 name (SimpleName)
84 identifier='out'
85 arguments
86 argument (MethodCallExpr)
87 name (SimpleName)
88 identifier='indent'
89 arguments
90 argument (MethodCallExpr)
91 name (SimpleName)
92 identifier='toCodeString'
93 scope (NameExpr)
94 name (SimpleName)
95 identifier='s'
96 statement (ExpressionStmt)
97 expression (MethodCallExpr)
98 name (SimpleName)
99 identifier='println'
100 scope (NameExpr)
101 name (SimpleName)
102 identifier='out'
103 arguments
104 argument (StringLiteralExpr)
105 value='  }'
106 type (VoidType)
107 name (SimpleName)
108 identifier='writeTest'
109 parameters
110 parameter (Parameter)
111 isVarArgs='false'
112 name (SimpleName)
113 identifier='out'
114 type (ClassOrInterfaceType)
115 name (SimpleName)
116 identifier='PrintStream'
117 parameter (Parameter)
118 isVarArgs='false'
119 name (SimpleName)
120 identifier='className'
121 type (ClassOrInterfaceType)
122 name (SimpleName)
123 identifier='String'
124 parameter (Parameter)
125 isVarArgs='false'
126 name (SimpleName)
127 identifier='methodName'
128 type (ClassOrInterfaceType)
129 name (SimpleName)
130 identifier='String'
131 parameter (Parameter)
132 isVarArgs='false'
133 name (SimpleName)
134 identifier='s'
135 type (ClassOrInterfaceType)
136 name (SimpleName)
137 identifier='ExecutableSequence'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
2 13
13 14
14 15
15 16
14 17
17 18
18 19
14 20
20 21
21 22
21 23
23 24
23 25
25 26
23 27
27 28
28 29
21 30
30 31
2 32
32 33
33 34
34 35
33 36
36 37
37 38
2 39
39 40
40 41
41 42
40 43
43 44
44 45
40 46
46 47
47 48
48 49
47 50
50 51
51 52
51 53
53 54
53 55
55 56
55 57
57 58
57 59
59 60
57 61
61 62
62 63
55 64
64 65
53 66
66 67
67 68
51 69
69 70
2 71
71 72
72 73
73 74
72 75
75 76
76 77
2 78
78 79
79 80
80 81
79 82
82 83
83 84
79 85
85 86
86 87
87 88
86 89
89 90
90 91
91 92
90 93
93 94
94 95
2 96
96 97
97 98
98 99
97 100
100 101
101 102
97 103
103 104
104 105
0 106
0 107
107 108
0 109
109 110
110 111
110 112
112 113
110 114
114 115
115 116
109 117
117 118
117 119
119 120
117 121
121 122
122 123
109 124
124 125
124 126
126 127
124 128
128 129
129 130
109 131
131 132
131 133
133 134
131 135
135 136
136 137

Writes a test method to the output stream for the sequence s.
