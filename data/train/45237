145
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='setMethodisPostUrlEncodedData'
7 statement (ExpressionStmt)
8 expression (VariableDeclarationExpr)
9 variables
10 variable (VariableDeclarator)
11 initializer (MethodCallExpr)
12 name (SimpleName)
13 identifier='getConnection'
14 scope (MethodCallExpr)
15 name (SimpleName)
16 identifier='getBigdataSailRemoteRepository'
17 scope (NameExpr)
18 name (SimpleName)
19 identifier='m_repo'
20 name (SimpleName)
21 identifier='conn'
22 type (ClassOrInterfaceType)
23 name (SimpleName)
24 identifier='BigdataSailRemoteRepositoryConnection'
25 statement (ExpressionStmt)
26 expression (MethodCallExpr)
27 name (SimpleName)
28 identifier='execute'
29 scope (MethodCallExpr)
30 name (SimpleName)
31 identifier='prepareUpdate'
32 scope (NameExpr)
33 name (SimpleName)
34 identifier='conn'
35 arguments
36 argument (FieldAccessExpr)
37 name (SimpleName)
38 identifier='SPARQL'
39 scope (NameExpr)
40 name (SimpleName)
41 identifier='QueryLanguage'
42 argument (StringLiteralExpr)
43 value='INSERT { <http://s1> <http://p> \"Test123\" } WHERE { }'
44 statement (ExpressionStmt)
45 expression (MethodCallExpr)
46 name (SimpleName)
47 identifier='checkResults'
48 arguments
49 argument (NameExpr)
50 name (SimpleName)
51 identifier='conn'
52 argument (IntegerLiteralExpr)
53 value='1'
54 statement (ExpressionStmt)
55 expression (MethodCallExpr)
56 name (SimpleName)
57 identifier='execute'
58 scope (MethodCallExpr)
59 name (SimpleName)
60 identifier='prepareUpdate'
61 scope (NameExpr)
62 name (SimpleName)
63 identifier='conn'
64 arguments
65 argument (FieldAccessExpr)
66 name (SimpleName)
67 identifier='SPARQL'
68 scope (NameExpr)
69 name (SimpleName)
70 identifier='QueryLanguage'
71 argument (StringLiteralExpr)
72 value='INSERT { <http://s2> <http://p> \"Test234\"^^xsd:string } WHERE { }'
73 statement (ExpressionStmt)
74 expression (MethodCallExpr)
75 name (SimpleName)
76 identifier='checkResults'
77 arguments
78 argument (NameExpr)
79 name (SimpleName)
80 identifier='conn'
81 argument (IntegerLiteralExpr)
82 value='2'
83 statement (ExpressionStmt)
84 expression (MethodCallExpr)
85 name (SimpleName)
86 identifier='execute'
87 scope (MethodCallExpr)
88 name (SimpleName)
89 identifier='prepareUpdate'
90 scope (NameExpr)
91 name (SimpleName)
92 identifier='conn'
93 arguments
94 argument (FieldAccessExpr)
95 name (SimpleName)
96 identifier='SPARQL'
97 scope (NameExpr)
98 name (SimpleName)
99 identifier='QueryLanguage'
100 argument (StringLiteralExpr)
101 value='INSERT { <http://s3> <http://p> \"Test345\" } WHERE { }'
102 statement (ExpressionStmt)
103 expression (MethodCallExpr)
104 name (SimpleName)
105 identifier='checkResults'
106 arguments
107 argument (NameExpr)
108 name (SimpleName)
109 identifier='conn'
110 argument (IntegerLiteralExpr)
111 value='3'
112 statement (ExpressionStmt)
113 expression (MethodCallExpr)
114 name (SimpleName)
115 identifier='rebuildTextIndex'
116 scope (MethodCallExpr)
117 name (SimpleName)
118 identifier='getRemoteRepositoryManager'
119 scope (NameExpr)
120 name (SimpleName)
121 identifier='m_repo'
122 arguments
123 argument (NameExpr)
124 name (SimpleName)
125 identifier='namespace'
126 argument (BooleanLiteralExpr)
127 value='true'
128 statement (ExpressionStmt)
129 expression (MethodCallExpr)
130 name (SimpleName)
131 identifier='checkResults'
132 arguments
133 argument (NameExpr)
134 name (SimpleName)
135 identifier='conn'
136 argument (IntegerLiteralExpr)
137 value='3'
138 type (VoidType)
139 name (SimpleName)
140 identifier='test_simple'
141 thrownExceptions
142 thrownException (ClassOrInterfaceType)
143 name (SimpleName)
144 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
2 7
7 8
8 9
9 10
10 11
11 12
12 13
11 14
14 15
15 16
14 17
17 18
18 19
10 20
20 21
10 22
22 23
23 24
2 25
25 26
26 27
27 28
26 29
29 30
30 31
29 32
32 33
33 34
29 35
35 36
36 37
37 38
36 39
39 40
40 41
35 42
42 43
2 44
44 45
45 46
46 47
45 48
48 49
49 50
50 51
48 52
52 53
2 54
54 55
55 56
56 57
55 58
58 59
59 60
58 61
61 62
62 63
58 64
64 65
65 66
66 67
65 68
68 69
69 70
64 71
71 72
2 73
73 74
74 75
75 76
74 77
77 78
78 79
79 80
77 81
81 82
2 83
83 84
84 85
85 86
84 87
87 88
88 89
87 90
90 91
91 92
87 93
93 94
94 95
95 96
94 97
97 98
98 99
93 100
100 101
2 102
102 103
103 104
104 105
103 106
106 107
107 108
108 109
106 110
110 111
2 112
112 113
113 114
114 115
113 116
116 117
117 118
116 119
119 120
120 121
113 122
122 123
123 124
124 125
122 126
126 127
2 128
128 129
129 130
130 131
129 132
132 133
133 134
134 135
132 136
136 137
0 138
0 139
139 140
0 141
141 142
142 143
143 144

Execute an ASK query including a SERVICE keyword which gets sent back to this server. The test succeeeds if the query returns true, and fails otherwise
