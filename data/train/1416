26
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='addParameter'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='theRequest'
10 arguments
11 argument (StringLiteralExpr)
12 value='button1'
13 argument (StringLiteralExpr)
14 value='button1'
15 type (VoidType)
16 name (SimpleName)
17 identifier='beginSignleAction'
18 parameters
19 parameter (Parameter)
20 isVarArgs='false'
21 name (SimpleName)
22 identifier='theRequest'
23 type (ClassOrInterfaceType)
24 name (SimpleName)
25 identifier='WebRequest'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
10 13
13 14
0 15
0 16
16 17
0 18
18 19
19 20
19 21
21 22
19 23
23 24
24 25

* PENDING() perhaps reactivate this if the EG wants event loop detection. <p/> <p/> // tests event recursion - infinite loop // ValueChangeEvent will fire back the same event it received.. <p/> public void testValueChangeRecursion() { // for keeping track of events processed limit.. // eventsProcessed = new HashMap(); <p/> UIInput userName = new UIInput(); <p/> // add valueChangeListener to the component <p/> ValueChangeRecursion valueChange = new ValueChangeRecursion(); userName.addValueChangeListener(valueChange); <p/> // add value change event (containing the component) to the queue <p/> userName.queueEvent(new ValueChangeEvent( userName, "foo", "bar")); <p/> PhaseId phaseId = PhaseId.PROCESS_VALIDATIONS; boolean exceptionthrown = false; try { processEvents(getFacesContext(), phaseId); } catch (Throwable e) { System.out.println(e.getMessage()); exceptionthrown = true; } <p/> assertTrue(exceptionthrown); } *
