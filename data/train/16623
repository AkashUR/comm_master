108
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='setAction'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='result'
10 arguments
11 argument (MethodCallExpr)
12 name (SimpleName)
13 identifier='getAction'
14 scope (NameExpr)
15 name (SimpleName)
16 identifier='orig'
17 statement (ExpressionStmt)
18 expression (MethodCallExpr)
19 name (SimpleName)
20 identifier='setType'
21 scope (NameExpr)
22 name (SimpleName)
23 identifier='result'
24 arguments
25 argument (MethodCallExpr)
26 name (SimpleName)
27 identifier='getType'
28 scope (NameExpr)
29 name (SimpleName)
30 identifier='orig'
31 statement (ExpressionStmt)
32 expression (MethodCallExpr)
33 name (SimpleName)
34 identifier='setPackage'
35 scope (NameExpr)
36 name (SimpleName)
37 identifier='result'
38 arguments
39 argument (MethodCallExpr)
40 name (SimpleName)
41 identifier='getPackage'
42 scope (NameExpr)
43 name (SimpleName)
44 identifier='orig'
45 statement (ExpressionStmt)
46 expression (MethodCallExpr)
47 name (SimpleName)
48 identifier='setData'
49 scope (NameExpr)
50 name (SimpleName)
51 identifier='result'
52 arguments
53 argument (MethodCallExpr)
54 name (SimpleName)
55 identifier='getData'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='orig'
59 statement (ExpressionStmt)
60 expression (MethodCallExpr)
61 name (SimpleName)
62 identifier='setData'
63 scope (NameExpr)
64 name (SimpleName)
65 identifier='result'
66 arguments
67 argument (MethodCallExpr)
68 name (SimpleName)
69 identifier='parse'
70 scope (NameExpr)
71 name (SimpleName)
72 identifier='Uri'
73 arguments
74 argument (MethodCallExpr)
75 name (SimpleName)
76 identifier='getType'
77 scope (NameExpr)
78 name (SimpleName)
79 identifier='orig'
80 type (VoidType)
81 name (SimpleName)
82 identifier='translateIntent'
83 parameters
84 parameter (Parameter)
85 isVarArgs='false'
86 name (SimpleName)
87 identifier='orig'
88 type (ClassOrInterfaceType)
89 name (SimpleName)
90 identifier='Intent'
91 parameter (Parameter)
92 isVarArgs='false'
93 name (SimpleName)
94 identifier='result'
95 type (ClassOrInterfaceType)
96 name (SimpleName)
97 identifier='Intent'
98 annotations
99 annotation (SingleMemberAnnotationExpr)
100 memberValue (FieldAccessExpr)
101 name (SimpleName)
102 identifier='BAN'
103 scope (NameExpr)
104 name (SimpleName)
105 identifier='DSC'
106 name (Name)
107 identifier='DSModeled'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
11 14
14 15
15 16
2 17
17 18
18 19
19 20
18 21
21 22
22 23
18 24
24 25
25 26
26 27
25 28
28 29
29 30
2 31
31 32
32 33
33 34
32 35
35 36
36 37
32 38
38 39
39 40
40 41
39 42
42 43
43 44
2 45
45 46
46 47
47 48
46 49
49 50
50 51
46 52
52 53
53 54
54 55
53 56
56 57
57 58
2 59
59 60
60 61
61 62
60 63
63 64
64 65
60 66
66 67
67 68
68 69
67 70
70 71
71 72
67 73
73 74
74 75
75 76
74 77
77 78
78 79
0 80
0 81
81 82
0 83
83 84
84 85
84 86
86 87
84 88
88 89
89 90
83 91
91 92
91 93
93 94
91 95
95 96
96 97
0 98
98 99
99 100
100 101
101 102
100 103
103 104
104 105
99 106
106 107

Use this method to translate one intent to another in a way that is dependent on the values resolved by attribute modeling.  This call is modeled  in the attribute modeling pass as well.
