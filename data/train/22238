32
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='waitForProcessOutput'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='self'
11 argument (CastExpr)
12 expression (NullLiteralExpr)
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='OutputStream'
16 argument (CastExpr)
17 expression (NullLiteralExpr)
18 type (ClassOrInterfaceType)
19 name (SimpleName)
20 identifier='OutputStream'
21 type (VoidType)
22 name (SimpleName)
23 identifier='waitForProcessOutput'
24 parameters
25 parameter (Parameter)
26 isVarArgs='false'
27 name (SimpleName)
28 identifier='self'
29 type (ClassOrInterfaceType)
30 name (SimpleName)
31 identifier='Process'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
11 13
13 14
14 15
7 16
16 17
16 18
18 19
19 20
0 21
0 22
22 23
0 24
24 25
25 26
25 27
27 28
25 29
29 30
30 31

Gets the output and error streams from a process and reads them to keep the process from blocking due to a full output buffer. The stream data is thrown away but blocking due to a full output buffer is avoided. Use this method if you don't care about the standard or error output and just want the process to run silently - use carefully however, because since the stream data is thrown away, it might be difficult to track down when something goes wrong. For this, two Threads are started, but join()ed, so we wait. As implied by the waitFor... name, we also wait until we finish as well. Finally, the output and error streams are closed.
