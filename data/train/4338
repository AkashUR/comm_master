133
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='enableLighting'
7 statement (ExpressionStmt)
8 expression (AssignExpr)
9 operator='ASSIGN'
10 target (NameExpr)
11 name (SimpleName)
12 identifier='lightCount'
13 value (IntegerLiteralExpr)
14 value='0'
15 statement (ExpressionStmt)
16 expression (VariableDeclarationExpr)
17 variables
18 variable (VariableDeclarator)
19 initializer (NameExpr)
20 name (SimpleName)
21 identifier='colorMode'
22 name (SimpleName)
23 identifier='colorModeSaved'
24 type (PrimitiveType)
25 type='INT'
26 statement (ExpressionStmt)
27 expression (AssignExpr)
28 operator='ASSIGN'
29 target (NameExpr)
30 name (SimpleName)
31 identifier='colorMode'
32 value (NameExpr)
33 name (SimpleName)
34 identifier='RGB'
35 statement (ExpressionStmt)
36 expression (MethodCallExpr)
37 name (SimpleName)
38 identifier='lightFalloff'
39 arguments
40 argument (IntegerLiteralExpr)
41 value='1'
42 argument (IntegerLiteralExpr)
43 value='0'
44 argument (IntegerLiteralExpr)
45 value='0'
46 statement (ExpressionStmt)
47 expression (MethodCallExpr)
48 name (SimpleName)
49 identifier='lightSpecular'
50 arguments
51 argument (IntegerLiteralExpr)
52 value='0'
53 argument (IntegerLiteralExpr)
54 value='0'
55 argument (IntegerLiteralExpr)
56 value='0'
57 statement (ExpressionStmt)
58 expression (MethodCallExpr)
59 name (SimpleName)
60 identifier='ambientLight'
61 arguments
62 argument (BinaryExpr)
63 operator='MULTIPLY'
64 left (NameExpr)
65 name (SimpleName)
66 identifier='colorModeX'
67 right (DoubleLiteralExpr)
68 value='0.5f'
69 argument (BinaryExpr)
70 operator='MULTIPLY'
71 left (NameExpr)
72 name (SimpleName)
73 identifier='colorModeY'
74 right (DoubleLiteralExpr)
75 value='0.5f'
76 argument (BinaryExpr)
77 operator='MULTIPLY'
78 left (NameExpr)
79 name (SimpleName)
80 identifier='colorModeZ'
81 right (DoubleLiteralExpr)
82 value='0.5f'
83 statement (ExpressionStmt)
84 expression (MethodCallExpr)
85 name (SimpleName)
86 identifier='directionalLight'
87 arguments
88 argument (BinaryExpr)
89 operator='MULTIPLY'
90 left (NameExpr)
91 name (SimpleName)
92 identifier='colorModeX'
93 right (DoubleLiteralExpr)
94 value='0.5f'
95 argument (BinaryExpr)
96 operator='MULTIPLY'
97 left (NameExpr)
98 name (SimpleName)
99 identifier='colorModeY'
100 right (DoubleLiteralExpr)
101 value='0.5f'
102 argument (BinaryExpr)
103 operator='MULTIPLY'
104 left (NameExpr)
105 name (SimpleName)
106 identifier='colorModeZ'
107 right (DoubleLiteralExpr)
108 value='0.5f'
109 argument (IntegerLiteralExpr)
110 value='0'
111 argument (IntegerLiteralExpr)
112 value='0'
113 argument (UnaryExpr)
114 operator='MINUS'
115 expression (IntegerLiteralExpr)
116 value='1'
117 statement (ExpressionStmt)
118 expression (AssignExpr)
119 operator='ASSIGN'
120 target (NameExpr)
121 name (SimpleName)
122 identifier='colorMode'
123 value (NameExpr)
124 name (SimpleName)
125 identifier='colorModeSaved'
126 type (VoidType)
127 name (SimpleName)
128 identifier='lights'
129 annotations
130 annotation (MarkerAnnotationExpr)
131 name (Name)
132 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
2 7
7 8
8 9
8 10
10 11
11 12
8 13
13 14
2 15
15 16
16 17
17 18
18 19
19 20
20 21
18 22
22 23
18 24
24 25
2 26
26 27
27 28
27 29
29 30
30 31
27 32
32 33
33 34
2 35
35 36
36 37
37 38
36 39
39 40
40 41
39 42
42 43
39 44
44 45
2 46
46 47
47 48
48 49
47 50
50 51
51 52
50 53
53 54
50 55
55 56
2 57
57 58
58 59
59 60
58 61
61 62
62 63
62 64
64 65
65 66
62 67
67 68
61 69
69 70
69 71
71 72
72 73
69 74
74 75
61 76
76 77
76 78
78 79
79 80
76 81
81 82
2 83
83 84
84 85
85 86
84 87
87 88
88 89
88 90
90 91
91 92
88 93
93 94
87 95
95 96
95 97
97 98
98 99
95 100
100 101
87 102
102 103
102 104
104 105
105 106
102 107
107 108
87 109
109 110
87 111
111 112
87 113
113 114
113 115
115 116
2 117
117 118
118 119
118 120
120 121
121 122
118 123
123 124
124 125
0 126
0 127
127 128
0 129
129 130
130 131
131 132

Sets up an ambient and directional light using OpenGL. API taken from PGraphics3D. <PRE> The Lighting Skinny: The way lighting works is complicated enough that it's worth producing a document to describe it. Lighting calculations proceed pretty much exactly as described in the OpenGL red book. Light-affecting material properties: AMBIENT COLOR - multiplies by light's ambient component - for believability this should match diffuse color DIFFUSE COLOR - multiplies by light's diffuse component SPECULAR COLOR - multiplies by light's specular component - usually less colored than diffuse/ambient SHININESS - the concentration of specular effect - this should be set pretty high (20-50) to see really noticeable specularity EMISSIVE COLOR - constant additive color effect Light types: AMBIENT - one color - no specular color - no direction - may have falloff (constant, linear, and quadratic) - may have position (which matters in non-constant falloff case) - multiplies by a material's ambient reflection DIRECTIONAL - has diffuse color - has specular color - has direction - no position - no falloff - multiplies by a material's diffuse and specular reflections POINT - has diffuse color - has specular color - has position - no direction - may have falloff (constant, linear, and quadratic) - multiplies by a material's diffuse and specular reflections SPOT - has diffuse color - has specular color - has position - has direction - has cone angle (set to half the total cone angle) - has concentration value - may have falloff (constant, linear, and quadratic) - multiplies by a material's diffuse and specular reflections Normal modes: All of the primitives (rect, box, sphere, etc.) have their normals set nicely. During beginShape/endShape normals can be set by the user. AUTO-NORMAL - if no normal is set during the shape, we are in auto-normal mode - auto-normal calculates one normal per triangle (face-normal mode) SHAPE-NORMAL - if one normal is set during the shape, it will be used for all vertices VERTEX-NORMAL - if multiple normals are set, each normal applies to subsequent vertices - (except for the first one, which applies to previous and subsequent vertices) Efficiency consequences: There is a major efficiency consequence of position-dependent lighting calculations per vertex. (See below for determining whether lighting is vertex position-dependent.) If there is no position dependency then the only factors that affect the lighting contribution per vertex are its colors and its normal. There is a major efficiency win if 1) lighting is not position dependent 2) we are in AUTO-NORMAL or SHAPE-NORMAL mode because then we can calculate one lighting contribution per shape (SHAPE-NORMAL) or per triangle (AUTO-NORMAL) and simply multiply it into the vertex colors. The converse is our worst-case performance when 1) lighting is position dependent 2) we are in AUTO-NORMAL mode because then we must calculate lighting per-face * per-vertex. Each vertex has a different lighting contribution per face in which it appears. Yuck. Determining vertex position dependency: If any of the following factors are TRUE then lighting is vertex position dependent: 1) Any lights uses non-constant falloff 2) There are any point or spot lights 3) There is a light with specular color AND there is a material with specular color So worth noting is that default lighting (a no-falloff ambient and a directional without specularity) is not position-dependent. We should capitalize. Simon Greenwold, April 2005 </PRE>
