124
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='initEvent'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='typeArg'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='canBubbleArg'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='cancelableArg'
17 statement (ExpressionStmt)
18 expression (AssignExpr)
19 operator='ASSIGN'
20 target (FieldAccessExpr)
21 name (SimpleName)
22 identifier='relatedNode'
23 scope (ThisExpr)
24 value (NameExpr)
25 name (SimpleName)
26 identifier='relatedNodeArg'
27 statement (ExpressionStmt)
28 expression (AssignExpr)
29 operator='ASSIGN'
30 target (FieldAccessExpr)
31 name (SimpleName)
32 identifier='prevValue'
33 scope (ThisExpr)
34 value (NameExpr)
35 name (SimpleName)
36 identifier='prevValueArg'
37 statement (ExpressionStmt)
38 expression (AssignExpr)
39 operator='ASSIGN'
40 target (FieldAccessExpr)
41 name (SimpleName)
42 identifier='newValue'
43 scope (ThisExpr)
44 value (NameExpr)
45 name (SimpleName)
46 identifier='newValueArg'
47 statement (ExpressionStmt)
48 expression (AssignExpr)
49 operator='ASSIGN'
50 target (FieldAccessExpr)
51 name (SimpleName)
52 identifier='attrName'
53 scope (ThisExpr)
54 value (NameExpr)
55 name (SimpleName)
56 identifier='attrNameArg'
57 statement (ExpressionStmt)
58 expression (AssignExpr)
59 operator='ASSIGN'
60 target (FieldAccessExpr)
61 name (SimpleName)
62 identifier='attrChange'
63 scope (ThisExpr)
64 value (NameExpr)
65 name (SimpleName)
66 identifier='attrChangeArg'
67 type (VoidType)
68 name (SimpleName)
69 identifier='initMutationEvent'
70 parameters
71 parameter (Parameter)
72 isVarArgs='false'
73 name (SimpleName)
74 identifier='typeArg'
75 type (ClassOrInterfaceType)
76 name (SimpleName)
77 identifier='String'
78 parameter (Parameter)
79 isVarArgs='false'
80 name (SimpleName)
81 identifier='canBubbleArg'
82 type (PrimitiveType)
83 type='BOOLEAN'
84 parameter (Parameter)
85 isVarArgs='false'
86 name (SimpleName)
87 identifier='cancelableArg'
88 type (PrimitiveType)
89 type='BOOLEAN'
90 parameter (Parameter)
91 isVarArgs='false'
92 name (SimpleName)
93 identifier='relatedNodeArg'
94 type (ClassOrInterfaceType)
95 name (SimpleName)
96 identifier='Node'
97 parameter (Parameter)
98 isVarArgs='false'
99 name (SimpleName)
100 identifier='prevValueArg'
101 type (ClassOrInterfaceType)
102 name (SimpleName)
103 identifier='String'
104 parameter (Parameter)
105 isVarArgs='false'
106 name (SimpleName)
107 identifier='newValueArg'
108 type (ClassOrInterfaceType)
109 name (SimpleName)
110 identifier='String'
111 parameter (Parameter)
112 isVarArgs='false'
113 name (SimpleName)
114 identifier='attrNameArg'
115 type (ClassOrInterfaceType)
116 name (SimpleName)
117 identifier='String'
118 parameter (Parameter)
119 isVarArgs='false'
120 name (SimpleName)
121 identifier='attrChangeArg'
122 type (PrimitiveType)
123 type='SHORT'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
7 14
14 15
15 16
2 17
17 18
18 19
18 20
20 21
21 22
20 23
18 24
24 25
25 26
2 27
27 28
28 29
28 30
30 31
31 32
30 33
28 34
34 35
35 36
2 37
37 38
38 39
38 40
40 41
41 42
40 43
38 44
44 45
45 46
2 47
47 48
48 49
48 50
50 51
51 52
50 53
48 54
54 55
55 56
2 57
57 58
58 59
58 60
60 61
61 62
60 63
58 64
64 65
65 66
0 67
0 68
68 69
0 70
70 71
71 72
71 73
73 74
71 75
75 76
76 77
70 78
78 79
78 80
80 81
78 82
82 83
70 84
84 85
84 86
86 87
84 88
88 89
70 90
90 91
90 92
92 93
90 94
94 95
95 96
70 97
97 98
97 99
99 100
97 101
101 102
102 103
70 104
104 105
104 106
106 107
104 108
108 109
109 110
70 111
111 112
111 113
113 114
111 115
115 116
116 117
70 118
118 119
118 120
120 121
118 122
122 123

DOM: The <code>initMutationEvent</code> method is used to initialize the value of a <code>MutationEvent</code> created through the <code>DocumentEvent</code> interface.  This method may only be called before the <code>MutationEvent</code> has been dispatched via the <code>dispatchEvent</code> method, though it may be called multiple times during that phase if necessary.  If called multiple times, the final invocation takes precedence.
