182
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='put'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='store'
13 arguments
14 argument (StringLiteralExpr)
15 value='A'
16 argument (MethodCallExpr)
17 name (SimpleName)
18 identifier='asList'
19 scope (NameExpr)
20 name (SimpleName)
21 identifier='Arrays'
22 arguments
23 argument (ArrayCreationExpr)
24 elementType (ClassOrInterfaceType)
25 name (SimpleName)
26 identifier='String'
27 initializer (ArrayInitializerExpr)
28 values
29 value (StringLiteralExpr)
30 value='B'
31 value (StringLiteralExpr)
32 value='C'
33 levels
34 level (ArrayCreationLevel)
35 name (SimpleName)
36 identifier='modules1'
37 type (ClassOrInterfaceType)
38 name (SimpleName)
39 identifier='List'
40 statement (ExpressionStmt)
41 expression (VariableDeclarationExpr)
42 variables
43 variable (VariableDeclarator)
44 initializer (MethodCallExpr)
45 name (SimpleName)
46 identifier='put'
47 scope (NameExpr)
48 name (SimpleName)
49 identifier='store'
50 arguments
51 argument (StringLiteralExpr)
52 value='A'
53 argument (MethodCallExpr)
54 name (SimpleName)
55 identifier='asList'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='Arrays'
59 arguments
60 argument (ArrayCreationExpr)
61 elementType (ClassOrInterfaceType)
62 name (SimpleName)
63 identifier='String'
64 initializer (ArrayInitializerExpr)
65 values
66 value (StringLiteralExpr)
67 value='C'
68 value (StringLiteralExpr)
69 value='D'
70 levels
71 level (ArrayCreationLevel)
72 name (SimpleName)
73 identifier='modules2'
74 type (ClassOrInterfaceType)
75 name (SimpleName)
76 identifier='List'
77 statement (ExpressionStmt)
78 expression (VariableDeclarationExpr)
79 variables
80 variable (VariableDeclarator)
81 initializer (MethodCallExpr)
82 name (SimpleName)
83 identifier='getListOfModulesToReparse'
84 scope (NameExpr)
85 name (SimpleName)
86 identifier='store'
87 arguments
88 argument (StringLiteralExpr)
89 value='D'
90 name (SimpleName)
91 identifier='modulesD'
92 type (ClassOrInterfaceType)
93 name (SimpleName)
94 identifier='List'
95 statement (ExpressionStmt)
96 expression (MethodCallExpr)
97 name (SimpleName)
98 identifier='assertNull'
99 arguments
100 argument (NameExpr)
101 name (SimpleName)
102 identifier='modules1'
103 statement (ExpressionStmt)
104 expression (MethodCallExpr)
105 name (SimpleName)
106 identifier='assertNotNull'
107 arguments
108 argument (NameExpr)
109 name (SimpleName)
110 identifier='modules2'
111 statement (ExpressionStmt)
112 expression (MethodCallExpr)
113 name (SimpleName)
114 identifier='assertEquals'
115 arguments
116 argument (IntegerLiteralExpr)
117 value='2'
118 argument (MethodCallExpr)
119 name (SimpleName)
120 identifier='size'
121 scope (NameExpr)
122 name (SimpleName)
123 identifier='modules2'
124 statement (ExpressionStmt)
125 expression (MethodCallExpr)
126 name (SimpleName)
127 identifier='assertTrue'
128 arguments
129 argument (MethodCallExpr)
130 name (SimpleName)
131 identifier='contains'
132 scope (NameExpr)
133 name (SimpleName)
134 identifier='modules2'
135 arguments
136 argument (StringLiteralExpr)
137 value='C'
138 statement (ExpressionStmt)
139 expression (MethodCallExpr)
140 name (SimpleName)
141 identifier='assertTrue'
142 arguments
143 argument (MethodCallExpr)
144 name (SimpleName)
145 identifier='contains'
146 scope (NameExpr)
147 name (SimpleName)
148 identifier='modules2'
149 arguments
150 argument (StringLiteralExpr)
151 value='B'
152 statement (ExpressionStmt)
153 expression (MethodCallExpr)
154 name (SimpleName)
155 identifier='assertEquals'
156 arguments
157 argument (IntegerLiteralExpr)
158 value='1'
159 argument (MethodCallExpr)
160 name (SimpleName)
161 identifier='size'
162 scope (NameExpr)
163 name (SimpleName)
164 identifier='modulesD'
165 statement (ExpressionStmt)
166 expression (MethodCallExpr)
167 name (SimpleName)
168 identifier='assertTrue'
169 arguments
170 argument (MethodCallExpr)
171 name (SimpleName)
172 identifier='contains'
173 scope (NameExpr)
174 name (SimpleName)
175 identifier='modulesD'
176 arguments
177 argument (StringLiteralExpr)
178 value='A'
179 type (VoidType)
180 name (SimpleName)
181 identifier='testStoreTwice'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
7 13
13 14
14 15
13 16
16 17
17 18
16 19
19 20
20 21
16 22
22 23
23 24
24 25
25 26
23 27
27 28
28 29
29 30
28 31
31 32
23 33
33 34
6 35
35 36
6 37
37 38
38 39
2 40
40 41
41 42
42 43
43 44
44 45
45 46
44 47
47 48
48 49
44 50
50 51
51 52
50 53
53 54
54 55
53 56
56 57
57 58
53 59
59 60
60 61
61 62
62 63
60 64
64 65
65 66
66 67
65 68
68 69
60 70
70 71
43 72
72 73
43 74
74 75
75 76
2 77
77 78
78 79
79 80
80 81
81 82
82 83
81 84
84 85
85 86
81 87
87 88
88 89
80 90
90 91
80 92
92 93
93 94
2 95
95 96
96 97
97 98
96 99
99 100
100 101
101 102
2 103
103 104
104 105
105 106
104 107
107 108
108 109
109 110
2 111
111 112
112 113
113 114
112 115
115 116
116 117
115 118
118 119
119 120
118 121
121 122
122 123
2 124
124 125
125 126
126 127
125 128
128 129
129 130
130 131
129 132
132 133
133 134
129 135
135 136
136 137
2 138
138 139
139 140
140 141
139 142
142 143
143 144
144 145
143 146
146 147
147 148
143 149
149 150
150 151
2 152
152 153
153 154
154 155
153 156
156 157
157 158
156 159
159 160
160 161
159 162
162 163
163 164
2 165
165 166
166 167
167 168
166 169
169 170
170 171
171 172
170 173
173 174
174 175
170 176
176 177
177 178
0 179
0 180
180 181

A -> B, C  A -> C, D only the following should remain A -> C, D
