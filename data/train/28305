218
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (FieldAccessExpr)
7 name (SimpleName)
8 identifier='functions'
9 scope (ThisExpr)
10 value (ObjectCreationExpr)
11 type (ClassOrInterfaceType)
12 name (SimpleName)
13 identifier='HashMap'
14 statement (ExpressionStmt)
15 expression (AssignExpr)
16 operator='ASSIGN'
17 target (FieldAccessExpr)
18 name (SimpleName)
19 identifier='categories'
20 scope (ThisExpr)
21 value (MethodCallExpr)
22 name (SimpleName)
23 identifier='create'
24 scope (NameExpr)
25 name (SimpleName)
26 identifier='HashMultimap'
27 statement (ExpressionStmt)
28 expression (VariableDeclarationExpr)
29 variables
30 variable (VariableDeclarator)
31 initializer (MethodCallExpr)
32 name (SimpleName)
33 identifier='getDocument'
34 arguments
35 argument (NameExpr)
36 name (SimpleName)
37 identifier='path'
38 argument (FieldAccessExpr)
39 name (SimpleName)
40 identifier='XSD_PATH'
41 scope (NameExpr)
42 name (SimpleName)
43 identifier='HaskellCatalog'
44 name (SimpleName)
45 identifier='doc'
46 type (ClassOrInterfaceType)
47 name (SimpleName)
48 identifier='Document'
49 statement (ExpressionStmt)
50 expression (VariableDeclarationExpr)
51 variables
52 variable (VariableDeclarator)
53 initializer (MethodCallExpr)
54 name (SimpleName)
55 identifier='getElementsByTagName'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='doc'
59 arguments
60 argument (StringLiteralExpr)
61 value='datatype'
62 name (SimpleName)
63 identifier='dataNodes'
64 type (ClassOrInterfaceType)
65 name (SimpleName)
66 identifier='NodeList'
67 statement (ExpressionStmt)
68 expression (VariableDeclarationExpr)
69 variables
70 variable (VariableDeclarator)
71 initializer (MethodCallExpr)
72 name (SimpleName)
73 identifier='getElementsByTagName'
74 scope (NameExpr)
75 name (SimpleName)
76 identifier='doc'
77 arguments
78 argument (StringLiteralExpr)
79 value='class'
80 name (SimpleName)
81 identifier='classNodes'
82 type (ClassOrInterfaceType)
83 name (SimpleName)
84 identifier='NodeList'
85 statement (ExpressionStmt)
86 expression (VariableDeclarationExpr)
87 variables
88 variable (VariableDeclarator)
89 initializer (MethodCallExpr)
90 name (SimpleName)
91 identifier='getElementsByTagName'
92 scope (NameExpr)
93 name (SimpleName)
94 identifier='doc'
95 arguments
96 argument (StringLiteralExpr)
97 value='function'
98 name (SimpleName)
99 identifier='functionNodes'
100 type (ClassOrInterfaceType)
101 name (SimpleName)
102 identifier='NodeList'
103 statement (ExpressionStmt)
104 expression (AssignExpr)
105 operator='ASSIGN'
106 target (FieldAccessExpr)
107 name (SimpleName)
108 identifier='datatypes'
109 scope (ThisExpr)
110 value (MethodCallExpr)
111 name (SimpleName)
112 identifier='parseDataType'
113 scope (ThisExpr)
114 arguments
115 argument (NameExpr)
116 name (SimpleName)
117 identifier='dataNodes'
118 statement (ExpressionStmt)
119 expression (AssignExpr)
120 operator='ASSIGN'
121 target (FieldAccessExpr)
122 name (SimpleName)
123 identifier='classes'
124 scope (ThisExpr)
125 value (MethodCallExpr)
126 name (SimpleName)
127 identifier='parseClasses'
128 scope (ThisExpr)
129 arguments
130 argument (NameExpr)
131 name (SimpleName)
132 identifier='classNodes'
133 statement (ExpressionStmt)
134 expression (VariableDeclarationExpr)
135 variables
136 variable (VariableDeclarator)
137 initializer (MethodCallExpr)
138 name (SimpleName)
139 identifier='parseFunctions'
140 scope (ThisExpr)
141 arguments
142 argument (NameExpr)
143 name (SimpleName)
144 identifier='functionNodes'
145 argument (FieldAccessExpr)
146 name (SimpleName)
147 identifier='classes'
148 scope (ThisExpr)
149 name (SimpleName)
150 identifier='entries'
151 type (ClassOrInterfaceType)
152 name (SimpleName)
153 identifier='Set'
154 typeArguments
155 typeArgument (ClassOrInterfaceType)
156 name (SimpleName)
157 identifier='CatalogFunction'
158 statement (ForeachStmt)
159 body (BlockStmt)
160 statements
161 statement (ExpressionStmt)
162 expression (MethodCallExpr)
163 name (SimpleName)
164 identifier='put'
165 scope (FieldAccessExpr)
166 name (SimpleName)
167 identifier='functions'
168 scope (ThisExpr)
169 arguments
170 argument (MethodCallExpr)
171 name (SimpleName)
172 identifier='getName'
173 scope (NameExpr)
174 name (SimpleName)
175 identifier='entry'
176 argument (NameExpr)
177 name (SimpleName)
178 identifier='entry'
179 statement (ExpressionStmt)
180 expression (MethodCallExpr)
181 name (SimpleName)
182 identifier='put'
183 scope (FieldAccessExpr)
184 name (SimpleName)
185 identifier='categories'
186 scope (ThisExpr)
187 arguments
188 argument (MethodCallExpr)
189 name (SimpleName)
190 identifier='getCategory'
191 scope (NameExpr)
192 name (SimpleName)
193 identifier='entry'
194 argument (NameExpr)
195 name (SimpleName)
196 identifier='entry'
197 iterable (NameExpr)
198 name (SimpleName)
199 identifier='entries'
200 variable (VariableDeclarationExpr)
201 variables
202 variable (VariableDeclarator)
203 name (SimpleName)
204 identifier='entry'
205 type (ClassOrInterfaceType)
206 name (SimpleName)
207 identifier='CatalogFunction'
208 name (SimpleName)
209 identifier='HaskellCatalog'
210 parameters
211 parameter (Parameter)
212 isVarArgs='false'
213 name (SimpleName)
214 identifier='path'
215 type (ClassOrInterfaceType)
216 name (SimpleName)
217 identifier='String'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
6 9
4 10
10 11
11 12
12 13
2 14
14 15
15 16
15 17
17 18
18 19
17 20
15 21
21 22
22 23
21 24
24 25
25 26
2 27
27 28
28 29
29 30
30 31
31 32
32 33
31 34
34 35
35 36
36 37
34 38
38 39
39 40
38 41
41 42
42 43
30 44
44 45
30 46
46 47
47 48
2 49
49 50
50 51
51 52
52 53
53 54
54 55
53 56
56 57
57 58
53 59
59 60
60 61
52 62
62 63
52 64
64 65
65 66
2 67
67 68
68 69
69 70
70 71
71 72
72 73
71 74
74 75
75 76
71 77
77 78
78 79
70 80
80 81
70 82
82 83
83 84
2 85
85 86
86 87
87 88
88 89
89 90
90 91
89 92
92 93
93 94
89 95
95 96
96 97
88 98
98 99
88 100
100 101
101 102
2 103
103 104
104 105
104 106
106 107
107 108
106 109
104 110
110 111
111 112
110 113
110 114
114 115
115 116
116 117
2 118
118 119
119 120
119 121
121 122
122 123
121 124
119 125
125 126
126 127
125 128
125 129
129 130
130 131
131 132
2 133
133 134
134 135
135 136
136 137
137 138
138 139
137 140
137 141
141 142
142 143
143 144
141 145
145 146
146 147
145 148
136 149
149 150
136 151
151 152
152 153
151 154
154 155
155 156
156 157
2 158
158 159
159 160
160 161
161 162
162 163
163 164
162 165
165 166
166 167
165 168
162 169
169 170
170 171
171 172
170 173
173 174
174 175
169 176
176 177
177 178
160 179
179 180
180 181
181 182
180 183
183 184
184 185
183 186
180 187
187 188
188 189
189 190
188 191
191 192
192 193
187 194
194 195
195 196
158 197
197 198
198 199
158 200
200 201
201 202
202 203
203 204
202 205
205 206
206 207
0 208
208 209
0 210
210 211
211 212
211 213
213 214
211 215
215 216
216 217

Constructs a Haskell catalog using the given file location.
