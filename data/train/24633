53
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='initialize'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='in'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='uncompSize'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='propsByte'
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='dictSize'
20 argument (NullLiteralExpr)
21 name (SimpleName)
22 identifier='LZMAInputStream'
23 parameters
24 parameter (Parameter)
25 isVarArgs='false'
26 name (SimpleName)
27 identifier='in'
28 type (ClassOrInterfaceType)
29 name (SimpleName)
30 identifier='InputStream'
31 parameter (Parameter)
32 isVarArgs='false'
33 name (SimpleName)
34 identifier='uncompSize'
35 type (PrimitiveType)
36 type='LONG'
37 parameter (Parameter)
38 isVarArgs='false'
39 name (SimpleName)
40 identifier='propsByte'
41 type (PrimitiveType)
42 type='BYTE'
43 parameter (Parameter)
44 isVarArgs='false'
45 name (SimpleName)
46 identifier='dictSize'
47 type (PrimitiveType)
48 type='INT'
49 thrownExceptions
50 thrownException (ClassOrInterfaceType)
51 name (SimpleName)
52 identifier='IOException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
7 14
14 15
15 16
7 17
17 18
18 19
7 20
0 21
21 22
0 23
23 24
24 25
24 26
26 27
24 28
28 29
29 30
23 31
31 32
31 33
33 34
31 35
35 36
23 37
37 38
37 39
39 40
37 41
41 42
23 43
43 44
43 45
45 46
43 47
47 48
0 49
49 50
50 51
51 52

Creates a new input stream that decompresses raw LZMA data (no .lzma header) from <code>in</code>. <p> The caller needs to know if the "end of payload marker (EOPM)" alias "end of stream marker (EOS marker)" alias "end marker" present. If the end marker isn't used, the caller must know the exact uncompressed size of the stream. <p> The caller also needs to provide the LZMA properties byte that encodes the number of literal context bits (lc), literal position bits (lp), and position bits (pb). <p> The dictionary size used when compressing is also needed. Specifying a too small dictionary size will prevent decompressing the stream. Specifying a too big dictionary is waste of memory but decompression will work. <p> There is no need to specify a dictionary bigger than the uncompressed size of the data even if a bigger dictionary was used when compressing. If you know the uncompressed size of the data, this might allow saving some memory.
