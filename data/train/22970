68
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='emitLAddrToc'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='asm'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='S0'
14 argument (MethodCallExpr)
15 name (SimpleName)
16 identifier='getOffset'
17 scope (FieldAccessExpr)
18 name (SimpleName)
19 identifier='the_boot_recordField'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='Entrypoints'
23 statement (ExpressionStmt)
24 expression (MethodCallExpr)
25 name (SimpleName)
26 identifier='emitLAddrOffset'
27 scope (NameExpr)
28 name (SimpleName)
29 identifier='asm'
30 arguments
31 argument (NameExpr)
32 name (SimpleName)
33 identifier='S0'
34 argument (NameExpr)
35 name (SimpleName)
36 identifier='S0'
37 argument (MethodCallExpr)
38 name (SimpleName)
39 identifier='getOffset'
40 scope (NameExpr)
41 name (SimpleName)
42 identifier='target'
43 statement (ExpressionStmt)
44 expression (MethodCallExpr)
45 name (SimpleName)
46 identifier='generateSysCall'
47 arguments
48 argument (NameExpr)
49 name (SimpleName)
50 identifier='parametersSize'
51 type (VoidType)
52 name (SimpleName)
53 identifier='generateSysCall'
54 parameters
55 parameter (Parameter)
56 isVarArgs='false'
57 name (SimpleName)
58 identifier='parametersSize'
59 type (PrimitiveType)
60 type='INT'
61 parameter (Parameter)
62 isVarArgs='false'
63 name (SimpleName)
64 identifier='target'
65 type (ClassOrInterfaceType)
66 name (SimpleName)
67 identifier='RVMField'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
10 14
14 15
15 16
14 17
17 18
18 19
17 20
20 21
21 22
2 23
23 24
24 25
25 26
24 27
27 28
28 29
24 30
30 31
31 32
32 33
30 34
34 35
35 36
30 37
37 38
38 39
37 40
40 41
41 42
2 43
43 44
44 45
45 46
44 47
47 48
48 49
49 50
0 51
0 52
52 53
0 54
54 55
55 56
55 57
57 58
55 59
59 60
54 61
61 62
61 63
63 64
61 65
65 66
66 67

Generate call and return sequence to invoke a C function through the boot record field specificed by target. Caller handles parameter passing and expression stack (setting up args, pushing return, adjusting stack height). <pre> Create a linkage area that's compatible with RS6000 "C" calling conventions. Just before the call, the stack looks like this: hi-mem +-------------------------+  . . . . . . . . |          ...            |                  \ +-------------------------+                   | |          ...            |    \              | +-------------------------+     |             | |       (int val0)        |     |  java       |- java +-------------------------+     |-  operand   |   stack |       (int val1)        |     |    stack    |    frame +-------------------------+     |             | |          ...            |     |             | +-------------------------+     |             | |      (int valN-1)       |     |             | +-------------------------+    /              | |          ...            |                   | +-------------------------+                   | |                         | <-- spot for this frame's callee's return address +-------------------------+                   | |          MI             | <-- this frame's method id +-------------------------+                   | |       saved FP          | <-- this frame's caller's frame +-------------------------+  . . . . . . . . / |      saved JTOC         | +-------------------------+  . . . . . . . . . . . . . . | parameterN-1 save area  | +  \                         \ +-------------------------+     |                         | |          ...            | +   |                         | +-------------------------+     |- register save area for | |  parameter1 save area   | +   |    use by callee        | +-------------------------+     |                         | |  parameter0 save area   | +  /                          |  rs6000 +-------------------------+                               |-  linkage +20 |       TOC save area     | +                             |    area +-------------------------+                               | +16 |       (reserved)        | -    + == used by callee      | +-------------------------+      - == ignored by callee   | +12 |       (reserved)        | -                             | +-------------------------+                               | +8 |       LR save area      | +                             | +-------------------------+                               | +4 |       CR save area      | +                             | +-------------------------+                               | FP ->  +0 |       (backlink)        | -                             | +-------------------------+  . . . . . . . . . . . . . . / Notes: 1. parameters are according to host OS calling convention. 2. space is also reserved on the stack for use by callee as parameter save area 3. parameters are pushed on the java operand stack left to right java conventions) but if callee saves them, they will appear in the parameter save area right to left (C conventions)
