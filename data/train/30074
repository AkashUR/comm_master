154
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExplicitConstructorInvocationStmt)
4 isThis='true'
5 arguments
6 argument (NameExpr)
7 name (SimpleName)
8 identifier='numInput'
9 argument (BinaryExpr)
10 operator='PLUS'
11 left (MethodCallExpr)
12 name (SimpleName)
13 identifier='NFASize'
14 scope (NameExpr)
15 name (SimpleName)
16 identifier='regExps'
17 arguments
18 argument (NameExpr)
19 name (SimpleName)
20 identifier='macros'
21 right (BinaryExpr)
22 operator='MULTIPLY'
23 left (IntegerLiteralExpr)
24 value='2'
25 right (MethodCallExpr)
26 name (SimpleName)
27 identifier='number'
28 scope (FieldAccessExpr)
29 name (SimpleName)
30 identifier='states'
31 scope (NameExpr)
32 name (SimpleName)
33 identifier='scanner'
34 statement (ExpressionStmt)
35 expression (AssignExpr)
36 operator='ASSIGN'
37 target (FieldAccessExpr)
38 name (SimpleName)
39 identifier='scanner'
40 scope (ThisExpr)
41 value (NameExpr)
42 name (SimpleName)
43 identifier='scanner'
44 statement (ExpressionStmt)
45 expression (AssignExpr)
46 operator='ASSIGN'
47 target (FieldAccessExpr)
48 name (SimpleName)
49 identifier='regExps'
50 scope (ThisExpr)
51 value (NameExpr)
52 name (SimpleName)
53 identifier='regExps'
54 statement (ExpressionStmt)
55 expression (AssignExpr)
56 operator='ASSIGN'
57 target (FieldAccessExpr)
58 name (SimpleName)
59 identifier='macros'
60 scope (ThisExpr)
61 value (NameExpr)
62 name (SimpleName)
63 identifier='macros'
64 statement (ExpressionStmt)
65 expression (AssignExpr)
66 operator='ASSIGN'
67 target (FieldAccessExpr)
68 name (SimpleName)
69 identifier='classes'
70 scope (ThisExpr)
71 value (NameExpr)
72 name (SimpleName)
73 identifier='classes'
74 statement (ExpressionStmt)
75 expression (AssignExpr)
76 operator='ASSIGN'
77 target (NameExpr)
78 name (SimpleName)
79 identifier='numLexStates'
80 value (MethodCallExpr)
81 name (SimpleName)
82 identifier='number'
83 scope (FieldAccessExpr)
84 name (SimpleName)
85 identifier='states'
86 scope (NameExpr)
87 name (SimpleName)
88 identifier='scanner'
89 statement (ExpressionStmt)
90 expression (VariableDeclarationExpr)
91 variables
92 variable (VariableDeclarator)
93 initializer (MethodCallExpr)
94 name (SimpleName)
95 identifier='numEntryStates'
96 name (SimpleName)
97 identifier='new_num'
98 type (PrimitiveType)
99 type='INT'
100 statement (ExpressionStmt)
101 expression (MethodCallExpr)
102 name (SimpleName)
103 identifier='ensureCapacity'
104 arguments
105 argument (NameExpr)
106 name (SimpleName)
107 identifier='new_num'
108 statement (ExpressionStmt)
109 expression (AssignExpr)
110 operator='ASSIGN'
111 target (NameExpr)
112 name (SimpleName)
113 identifier='numStates'
114 value (NameExpr)
115 name (SimpleName)
116 identifier='new_num'
117 name (SimpleName)
118 identifier='NFA'
119 parameters
120 parameter (Parameter)
121 isVarArgs='false'
122 name (SimpleName)
123 identifier='numInput'
124 type (PrimitiveType)
125 type='INT'
126 parameter (Parameter)
127 isVarArgs='false'
128 name (SimpleName)
129 identifier='scanner'
130 type (ClassOrInterfaceType)
131 name (SimpleName)
132 identifier='LexScan'
133 parameter (Parameter)
134 isVarArgs='false'
135 name (SimpleName)
136 identifier='regExps'
137 type (ClassOrInterfaceType)
138 name (SimpleName)
139 identifier='RegExps'
140 parameter (Parameter)
141 isVarArgs='false'
142 name (SimpleName)
143 identifier='macros'
144 type (ClassOrInterfaceType)
145 name (SimpleName)
146 identifier='Macros'
147 parameter (Parameter)
148 isVarArgs='false'
149 name (SimpleName)
150 identifier='classes'
151 type (ClassOrInterfaceType)
152 name (SimpleName)
153 identifier='CharClasses'
0 1
1 2
2 3
3 4
3 5
5 6
6 7
7 8
5 9
9 10
9 11
11 12
12 13
11 14
14 15
15 16
11 17
17 18
18 19
19 20
9 21
21 22
21 23
23 24
21 25
25 26
26 27
25 28
28 29
29 30
28 31
31 32
32 33
2 34
34 35
35 36
35 37
37 38
38 39
37 40
35 41
41 42
42 43
2 44
44 45
45 46
45 47
47 48
48 49
47 50
45 51
51 52
52 53
2 54
54 55
55 56
55 57
57 58
58 59
57 60
55 61
61 62
62 63
2 64
64 65
65 66
65 67
67 68
68 69
67 70
65 71
71 72
72 73
2 74
74 75
75 76
75 77
77 78
78 79
75 80
80 81
81 82
80 83
83 84
84 85
83 86
86 87
87 88
2 89
89 90
90 91
91 92
92 93
93 94
94 95
92 96
96 97
92 98
98 99
2 100
100 101
101 102
102 103
101 104
104 105
105 106
106 107
2 108
108 109
109 110
109 111
111 112
112 113
109 114
114 115
115 116
0 117
117 118
0 119
119 120
120 121
120 122
122 123
120 124
124 125
119 126
126 127
126 128
128 129
126 130
130 131
131 132
119 133
133 134
133 135
135 136
133 137
137 138
138 139
119 140
140 141
140 142
142 143
140 144
144 145
145 146
119 147
147 148
147 149
149 150
147 151
151 152
152 153

Construct new NFA. Assumes that lookahead cases and numbers are already resolved in RegExps.
