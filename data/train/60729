473
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='TungstenProperties'
11 name (SimpleName)
12 identifier='tp'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='TungstenProperties'
16 statement (ExpressionStmt)
17 expression (MethodCallExpr)
18 name (SimpleName)
19 identifier='setString'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='tp'
23 arguments
24 argument (StringLiteralExpr)
25 value='string'
26 argument (StringLiteralExpr)
27 value='s1'
28 statement (ExpressionStmt)
29 expression (MethodCallExpr)
30 name (SimpleName)
31 identifier='setInt'
32 scope (NameExpr)
33 name (SimpleName)
34 identifier='tp'
35 arguments
36 argument (StringLiteralExpr)
37 value='my_int'
38 argument (UnaryExpr)
39 operator='MINUS'
40 expression (IntegerLiteralExpr)
41 value='2'
42 statement (ExpressionStmt)
43 expression (MethodCallExpr)
44 name (SimpleName)
45 identifier='setInt'
46 scope (NameExpr)
47 name (SimpleName)
48 identifier='tp'
49 arguments
50 argument (StringLiteralExpr)
51 value='MyLong'
52 argument (IntegerLiteralExpr)
53 value='25'
54 statement (ExpressionStmt)
55 expression (MethodCallExpr)
56 name (SimpleName)
57 identifier='setString'
58 scope (NameExpr)
59 name (SimpleName)
60 identifier='tp'
61 arguments
62 argument (StringLiteralExpr)
63 value='My_float'
64 argument (StringLiteralExpr)
65 value='1.0'
66 statement (ExpressionStmt)
67 expression (MethodCallExpr)
68 name (SimpleName)
69 identifier='setString'
70 scope (NameExpr)
71 name (SimpleName)
72 identifier='tp'
73 arguments
74 argument (StringLiteralExpr)
75 value='myDouble'
76 argument (StringLiteralExpr)
77 value='-1.0'
78 statement (ExpressionStmt)
79 expression (MethodCallExpr)
80 name (SimpleName)
81 identifier='setBoolean'
82 scope (NameExpr)
83 name (SimpleName)
84 identifier='tp'
85 arguments
86 argument (StringLiteralExpr)
87 value='My_Boolean'
88 argument (BooleanLiteralExpr)
89 value='true'
90 statement (ExpressionStmt)
91 expression (MethodCallExpr)
92 name (SimpleName)
93 identifier='setString'
94 scope (NameExpr)
95 name (SimpleName)
96 identifier='tp'
97 arguments
98 argument (StringLiteralExpr)
99 value='myChar'
100 argument (StringLiteralExpr)
101 value='a'
102 statement (ExpressionStmt)
103 expression (VariableDeclarationExpr)
104 variables
105 variable (VariableDeclarator)
106 initializer (ObjectCreationExpr)
107 type (ClassOrInterfaceType)
108 name (SimpleName)
109 identifier='Date'
110 name (SimpleName)
111 identifier='now'
112 type (ClassOrInterfaceType)
113 name (SimpleName)
114 identifier='Date'
115 statement (ExpressionStmt)
116 expression (MethodCallExpr)
117 name (SimpleName)
118 identifier='setDate'
119 scope (NameExpr)
120 name (SimpleName)
121 identifier='tp'
122 arguments
123 argument (StringLiteralExpr)
124 value='my_Date'
125 argument (NameExpr)
126 name (SimpleName)
127 identifier='now'
128 statement (ExpressionStmt)
129 expression (VariableDeclarationExpr)
130 variables
131 variable (VariableDeclarator)
132 initializer (ObjectCreationExpr)
133 type (ClassOrInterfaceType)
134 name (SimpleName)
135 identifier='BigDecimal'
136 arguments
137 argument (StringLiteralExpr)
138 value='1e+500'
139 name (SimpleName)
140 identifier='bd'
141 type (ClassOrInterfaceType)
142 name (SimpleName)
143 identifier='BigDecimal'
144 statement (ExpressionStmt)
145 expression (MethodCallExpr)
146 name (SimpleName)
147 identifier='setObject'
148 scope (NameExpr)
149 name (SimpleName)
150 identifier='tp'
151 arguments
152 argument (StringLiteralExpr)
153 value='myBigDecimal'
154 argument (NameExpr)
155 name (SimpleName)
156 identifier='bd'
157 statement (ExpressionStmt)
158 expression (VariableDeclarationExpr)
159 variables
160 variable (VariableDeclarator)
161 initializer (FieldAccessExpr)
162 name (SimpleName)
163 identifier='THREE'
164 scope (FieldAccessExpr)
165 name (SimpleName)
166 identifier='SampleEnum'
167 scope (NameExpr)
168 name (SimpleName)
169 identifier='SampleObject'
170 name (SimpleName)
171 identifier='e'
172 type (ClassOrInterfaceType)
173 name (SimpleName)
174 identifier='SampleEnum'
175 scope (ClassOrInterfaceType)
176 name (SimpleName)
177 identifier='SampleObject'
178 statement (ExpressionStmt)
179 expression (MethodCallExpr)
180 name (SimpleName)
181 identifier='setObject'
182 scope (NameExpr)
183 name (SimpleName)
184 identifier='tp'
185 arguments
186 argument (StringLiteralExpr)
187 value='myEnum'
188 argument (NameExpr)
189 name (SimpleName)
190 identifier='e'
191 statement (ExpressionStmt)
192 expression (VariableDeclarationExpr)
193 variables
194 variable (VariableDeclarator)
195 initializer (MethodCallExpr)
196 name (SimpleName)
197 identifier='asList'
198 scope (NameExpr)
199 name (SimpleName)
200 identifier='Arrays'
201 arguments
202 argument (StringLiteralExpr)
203 value='strle1'
204 argument (StringLiteralExpr)
205 value='strle2'
206 argument (StringLiteralExpr)
207 value='strle3'
208 name (SimpleName)
209 identifier='strl'
210 type (ClassOrInterfaceType)
211 name (SimpleName)
212 identifier='List'
213 typeArguments
214 typeArgument (ClassOrInterfaceType)
215 name (SimpleName)
216 identifier='String'
217 statement (ExpressionStmt)
218 expression (MethodCallExpr)
219 name (SimpleName)
220 identifier='setStringList'
221 scope (NameExpr)
222 name (SimpleName)
223 identifier='tp'
224 arguments
225 argument (StringLiteralExpr)
226 value='myStringList'
227 argument (NameExpr)
228 name (SimpleName)
229 identifier='strl'
230 statement (ExpressionStmt)
231 expression (VariableDeclarationExpr)
232 variables
233 variable (VariableDeclarator)
234 initializer (ObjectCreationExpr)
235 type (ClassOrInterfaceType)
236 name (SimpleName)
237 identifier='SampleObject'
238 name (SimpleName)
239 identifier='so'
240 type (ClassOrInterfaceType)
241 name (SimpleName)
242 identifier='SampleObject'
243 statement (ExpressionStmt)
244 expression (MethodCallExpr)
245 name (SimpleName)
246 identifier='applyProperties'
247 scope (NameExpr)
248 name (SimpleName)
249 identifier='tp'
250 arguments
251 argument (NameExpr)
252 name (SimpleName)
253 identifier='so'
254 statement (ExpressionStmt)
255 expression (MethodCallExpr)
256 name (SimpleName)
257 identifier='assertEquals'
258 scope (NameExpr)
259 name (SimpleName)
260 identifier='Assert'
261 arguments
262 argument (StringLiteralExpr)
263 value='String value'
264 argument (StringLiteralExpr)
265 value='s1'
266 argument (MethodCallExpr)
267 name (SimpleName)
268 identifier='getString'
269 scope (NameExpr)
270 name (SimpleName)
271 identifier='so'
272 statement (ExpressionStmt)
273 expression (MethodCallExpr)
274 name (SimpleName)
275 identifier='assertEquals'
276 scope (NameExpr)
277 name (SimpleName)
278 identifier='Assert'
279 arguments
280 argument (StringLiteralExpr)
281 value='Int value'
282 argument (UnaryExpr)
283 operator='MINUS'
284 expression (IntegerLiteralExpr)
285 value='2'
286 argument (MethodCallExpr)
287 name (SimpleName)
288 identifier='getMyInt'
289 scope (NameExpr)
290 name (SimpleName)
291 identifier='so'
292 statement (ExpressionStmt)
293 expression (MethodCallExpr)
294 name (SimpleName)
295 identifier='assertEquals'
296 scope (NameExpr)
297 name (SimpleName)
298 identifier='Assert'
299 arguments
300 argument (StringLiteralExpr)
301 value='Long value'
302 argument (IntegerLiteralExpr)
303 value='25'
304 argument (MethodCallExpr)
305 name (SimpleName)
306 identifier='getMyLong'
307 scope (NameExpr)
308 name (SimpleName)
309 identifier='so'
310 statement (ExpressionStmt)
311 expression (MethodCallExpr)
312 name (SimpleName)
313 identifier='assertTrue'
314 scope (NameExpr)
315 name (SimpleName)
316 identifier='Assert'
317 arguments
318 argument (StringLiteralExpr)
319 value='Float value'
320 argument (EnclosedExpr)
321 inner (BinaryExpr)
322 operator='EQUALS'
323 left (DoubleLiteralExpr)
324 value='1.0'
325 right (MethodCallExpr)
326 name (SimpleName)
327 identifier='getMyFloat'
328 scope (NameExpr)
329 name (SimpleName)
330 identifier='so'
331 statement (ExpressionStmt)
332 expression (MethodCallExpr)
333 name (SimpleName)
334 identifier='assertTrue'
335 scope (NameExpr)
336 name (SimpleName)
337 identifier='Assert'
338 arguments
339 argument (StringLiteralExpr)
340 value='Double value'
341 argument (EnclosedExpr)
342 inner (BinaryExpr)
343 operator='EQUALS'
344 left (UnaryExpr)
345 operator='MINUS'
346 expression (DoubleLiteralExpr)
347 value='1.0'
348 right (MethodCallExpr)
349 name (SimpleName)
350 identifier='getMyDouble'
351 scope (NameExpr)
352 name (SimpleName)
353 identifier='so'
354 statement (ExpressionStmt)
355 expression (MethodCallExpr)
356 name (SimpleName)
357 identifier='assertEquals'
358 scope (NameExpr)
359 name (SimpleName)
360 identifier='Assert'
361 arguments
362 argument (StringLiteralExpr)
363 value='Boolean value'
364 argument (BooleanLiteralExpr)
365 value='true'
366 argument (MethodCallExpr)
367 name (SimpleName)
368 identifier='isMyBoolean'
369 scope (NameExpr)
370 name (SimpleName)
371 identifier='so'
372 statement (ExpressionStmt)
373 expression (MethodCallExpr)
374 name (SimpleName)
375 identifier='assertEquals'
376 scope (NameExpr)
377 name (SimpleName)
378 identifier='Assert'
379 arguments
380 argument (StringLiteralExpr)
381 value='Char value'
382 argument (CharLiteralExpr)
383 value='a'
384 argument (MethodCallExpr)
385 name (SimpleName)
386 identifier='getMyChar'
387 scope (NameExpr)
388 name (SimpleName)
389 identifier='so'
390 statement (ExpressionStmt)
391 expression (MethodCallExpr)
392 name (SimpleName)
393 identifier='assertEquals'
394 scope (NameExpr)
395 name (SimpleName)
396 identifier='Assert'
397 arguments
398 argument (StringLiteralExpr)
399 value='Date value'
400 argument (NameExpr)
401 name (SimpleName)
402 identifier='now'
403 argument (MethodCallExpr)
404 name (SimpleName)
405 identifier='getMyDate'
406 scope (NameExpr)
407 name (SimpleName)
408 identifier='so'
409 statement (ExpressionStmt)
410 expression (MethodCallExpr)
411 name (SimpleName)
412 identifier='assertEquals'
413 scope (NameExpr)
414 name (SimpleName)
415 identifier='Assert'
416 arguments
417 argument (StringLiteralExpr)
418 value='BigDecimal value'
419 argument (NameExpr)
420 name (SimpleName)
421 identifier='bd'
422 argument (MethodCallExpr)
423 name (SimpleName)
424 identifier='getMyBigDecimal'
425 scope (NameExpr)
426 name (SimpleName)
427 identifier='so'
428 statement (ExpressionStmt)
429 expression (MethodCallExpr)
430 name (SimpleName)
431 identifier='assertEquals'
432 scope (NameExpr)
433 name (SimpleName)
434 identifier='Assert'
435 arguments
436 argument (StringLiteralExpr)
437 value='Enum value'
438 argument (NameExpr)
439 name (SimpleName)
440 identifier='e'
441 argument (MethodCallExpr)
442 name (SimpleName)
443 identifier='getMyEnum'
444 scope (NameExpr)
445 name (SimpleName)
446 identifier='so'
447 statement (ExpressionStmt)
448 expression (MethodCallExpr)
449 name (SimpleName)
450 identifier='assertEquals'
451 scope (NameExpr)
452 name (SimpleName)
453 identifier='Assert'
454 arguments
455 argument (StringLiteralExpr)
456 value='String list value'
457 argument (NameExpr)
458 name (SimpleName)
459 identifier='strl'
460 argument (MethodCallExpr)
461 name (SimpleName)
462 identifier='getMyStringList'
463 scope (NameExpr)
464 name (SimpleName)
465 identifier='so'
466 type (VoidType)
467 name (SimpleName)
468 identifier='testPropertyApplication'
469 thrownExceptions
470 thrownException (ClassOrInterfaceType)
471 name (SimpleName)
472 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
17 20
20 21
21 22
17 23
23 24
24 25
23 26
26 27
2 28
28 29
29 30
30 31
29 32
32 33
33 34
29 35
35 36
36 37
35 38
38 39
38 40
40 41
2 42
42 43
43 44
44 45
43 46
46 47
47 48
43 49
49 50
50 51
49 52
52 53
2 54
54 55
55 56
56 57
55 58
58 59
59 60
55 61
61 62
62 63
61 64
64 65
2 66
66 67
67 68
68 69
67 70
70 71
71 72
67 73
73 74
74 75
73 76
76 77
2 78
78 79
79 80
80 81
79 82
82 83
83 84
79 85
85 86
86 87
85 88
88 89
2 90
90 91
91 92
92 93
91 94
94 95
95 96
91 97
97 98
98 99
97 100
100 101
2 102
102 103
103 104
104 105
105 106
106 107
107 108
108 109
105 110
110 111
105 112
112 113
113 114
2 115
115 116
116 117
117 118
116 119
119 120
120 121
116 122
122 123
123 124
122 125
125 126
126 127
2 128
128 129
129 130
130 131
131 132
132 133
133 134
134 135
132 136
136 137
137 138
131 139
139 140
131 141
141 142
142 143
2 144
144 145
145 146
146 147
145 148
148 149
149 150
145 151
151 152
152 153
151 154
154 155
155 156
2 157
157 158
158 159
159 160
160 161
161 162
162 163
161 164
164 165
165 166
164 167
167 168
168 169
160 170
170 171
160 172
172 173
173 174
172 175
175 176
176 177
2 178
178 179
179 180
180 181
179 182
182 183
183 184
179 185
185 186
186 187
185 188
188 189
189 190
2 191
191 192
192 193
193 194
194 195
195 196
196 197
195 198
198 199
199 200
195 201
201 202
202 203
201 204
204 205
201 206
206 207
194 208
208 209
194 210
210 211
211 212
210 213
213 214
214 215
215 216
2 217
217 218
218 219
219 220
218 221
221 222
222 223
218 224
224 225
225 226
224 227
227 228
228 229
2 230
230 231
231 232
232 233
233 234
234 235
235 236
236 237
233 238
238 239
233 240
240 241
241 242
2 243
243 244
244 245
245 246
244 247
247 248
248 249
244 250
250 251
251 252
252 253
2 254
254 255
255 256
256 257
255 258
258 259
259 260
255 261
261 262
262 263
261 264
264 265
261 266
266 267
267 268
266 269
269 270
270 271
2 272
272 273
273 274
274 275
273 276
276 277
277 278
273 279
279 280
280 281
279 282
282 283
282 284
284 285
279 286
286 287
287 288
286 289
289 290
290 291
2 292
292 293
293 294
294 295
293 296
296 297
297 298
293 299
299 300
300 301
299 302
302 303
299 304
304 305
305 306
304 307
307 308
308 309
2 310
310 311
311 312
312 313
311 314
314 315
315 316
311 317
317 318
318 319
317 320
320 321
321 322
321 323
323 324
321 325
325 326
326 327
325 328
328 329
329 330
2 331
331 332
332 333
333 334
332 335
335 336
336 337
332 338
338 339
339 340
338 341
341 342
342 343
342 344
344 345
344 346
346 347
342 348
348 349
349 350
348 351
351 352
352 353
2 354
354 355
355 356
356 357
355 358
358 359
359 360
355 361
361 362
362 363
361 364
364 365
361 366
366 367
367 368
366 369
369 370
370 371
2 372
372 373
373 374
374 375
373 376
376 377
377 378
373 379
379 380
380 381
379 382
382 383
379 384
384 385
385 386
384 387
387 388
388 389
2 390
390 391
391 392
392 393
391 394
394 395
395 396
391 397
397 398
398 399
397 400
400 401
401 402
397 403
403 404
404 405
403 406
406 407
407 408
2 409
409 410
410 411
411 412
410 413
413 414
414 415
410 416
416 417
417 418
416 419
419 420
420 421
416 422
422 423
423 424
422 425
425 426
426 427
2 428
428 429
429 430
430 431
429 432
432 433
433 434
429 435
435 436
436 437
435 438
438 439
439 440
435 441
441 442
442 443
441 444
444 445
445 446
2 447
447 448
448 449
449 450
448 451
451 452
452 453
448 454
454 455
455 456
454 457
457 458
458 459
454 460
460 461
461 462
460 463
463 464
464 465
0 466
0 467
467 468
0 469
469 470
470 471
471 472

Test that property application works correctly by assigning values to a test instance and ensuring all values are correctly set.
