187
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (NameExpr)
7 name (SimpleName)
8 identifier='attribute'
9 value (CastExpr)
10 expression (EnclosedExpr)
11 inner (BinaryExpr)
12 operator='BINARY_AND'
13 left (MethodCallExpr)
14 name (SimpleName)
15 identifier='getM_attr'
16 scope (NameExpr)
17 name (SimpleName)
18 identifier='moduleInfo'
19 right (IntegerLiteralExpr)
20 value='0xFFFF'
21 type (PrimitiveType)
22 type='SHORT'
23 statement (ExpressionStmt)
24 expression (AssignExpr)
25 operator='ASSIGN'
26 target (ArrayAccessExpr)
27 index (IntegerLiteralExpr)
28 value='0'
29 name (NameExpr)
30 name (SimpleName)
31 identifier='version'
32 value (CastExpr)
33 expression (EnclosedExpr)
34 inner (BinaryExpr)
35 operator='BINARY_AND'
36 left (MethodCallExpr)
37 name (SimpleName)
38 identifier='getM_version'
39 scope (NameExpr)
40 name (SimpleName)
41 identifier='moduleInfo'
42 right (IntegerLiteralExpr)
43 value='0xFF'
44 type (PrimitiveType)
45 type='BYTE'
46 statement (ExpressionStmt)
47 expression (AssignExpr)
48 operator='ASSIGN'
49 target (ArrayAccessExpr)
50 index (IntegerLiteralExpr)
51 value='1'
52 name (NameExpr)
53 name (SimpleName)
54 identifier='version'
55 value (CastExpr)
56 expression (EnclosedExpr)
57 inner (BinaryExpr)
58 operator='BINARY_AND'
59 left (EnclosedExpr)
60 inner (BinaryExpr)
61 operator='SIGNED_RIGHT_SHIFT'
62 left (MethodCallExpr)
63 name (SimpleName)
64 identifier='getM_version'
65 scope (NameExpr)
66 name (SimpleName)
67 identifier='moduleInfo'
68 right (IntegerLiteralExpr)
69 value='8'
70 right (IntegerLiteralExpr)
71 value='0xFF'
72 type (PrimitiveType)
73 type='BYTE'
74 statement (ExpressionStmt)
75 expression (AssignExpr)
76 operator='ASSIGN'
77 target (NameExpr)
78 name (SimpleName)
79 identifier='modname'
80 value (MethodCallExpr)
81 name (SimpleName)
82 identifier='getM_namez'
83 scope (NameExpr)
84 name (SimpleName)
85 identifier='moduleInfo'
86 statement (ExpressionStmt)
87 expression (AssignExpr)
88 operator='ASSIGN'
89 target (NameExpr)
90 name (SimpleName)
91 identifier='gp_value'
92 value (CastExpr)
93 expression (EnclosedExpr)
94 inner (BinaryExpr)
95 operator='BINARY_AND'
96 left (MethodCallExpr)
97 name (SimpleName)
98 identifier='getM_gp'
99 scope (NameExpr)
100 name (SimpleName)
101 identifier='moduleInfo'
102 right (LongLiteralExpr)
103 value='0xFFFFFFFFL'
104 type (PrimitiveType)
105 type='INT'
106 statement (ExpressionStmt)
107 expression (AssignExpr)
108 operator='ASSIGN'
109 target (NameExpr)
110 name (SimpleName)
111 identifier='ent_top'
112 value (CastExpr)
113 expression (MethodCallExpr)
114 name (SimpleName)
115 identifier='getM_exports'
116 scope (NameExpr)
117 name (SimpleName)
118 identifier='moduleInfo'
119 type (PrimitiveType)
120 type='INT'
121 statement (ExpressionStmt)
122 expression (AssignExpr)
123 operator='ASSIGN'
124 target (NameExpr)
125 name (SimpleName)
126 identifier='ent_size'
127 value (BinaryExpr)
128 operator='MINUS'
129 left (CastExpr)
130 expression (MethodCallExpr)
131 name (SimpleName)
132 identifier='getM_exp_end'
133 scope (NameExpr)
134 name (SimpleName)
135 identifier='moduleInfo'
136 type (PrimitiveType)
137 type='INT'
138 right (NameExpr)
139 name (SimpleName)
140 identifier='ent_top'
141 statement (ExpressionStmt)
142 expression (AssignExpr)
143 operator='ASSIGN'
144 target (NameExpr)
145 name (SimpleName)
146 identifier='stub_top'
147 value (CastExpr)
148 expression (MethodCallExpr)
149 name (SimpleName)
150 identifier='getM_imports'
151 scope (NameExpr)
152 name (SimpleName)
153 identifier='moduleInfo'
154 type (PrimitiveType)
155 type='INT'
156 statement (ExpressionStmt)
157 expression (AssignExpr)
158 operator='ASSIGN'
159 target (NameExpr)
160 name (SimpleName)
161 identifier='stub_size'
162 value (BinaryExpr)
163 operator='MINUS'
164 left (CastExpr)
165 expression (MethodCallExpr)
166 name (SimpleName)
167 identifier='getM_imp_end'
168 scope (NameExpr)
169 name (SimpleName)
170 identifier='moduleInfo'
171 type (PrimitiveType)
172 type='INT'
173 right (NameExpr)
174 name (SimpleName)
175 identifier='stub_top'
176 type (VoidType)
177 name (SimpleName)
178 identifier='copy'
179 parameters
180 parameter (Parameter)
181 isVarArgs='false'
182 name (SimpleName)
183 identifier='moduleInfo'
184 type (ClassOrInterfaceType)
185 name (SimpleName)
186 identifier='PSPModuleInfo'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
9 10
10 11
11 12
11 13
13 14
14 15
13 16
16 17
17 18
11 19
19 20
9 21
21 22
2 23
23 24
24 25
24 26
26 27
27 28
26 29
29 30
30 31
24 32
32 33
33 34
34 35
34 36
36 37
37 38
36 39
39 40
40 41
34 42
42 43
32 44
44 45
2 46
46 47
47 48
47 49
49 50
50 51
49 52
52 53
53 54
47 55
55 56
56 57
57 58
57 59
59 60
60 61
60 62
62 63
63 64
62 65
65 66
66 67
60 68
68 69
57 70
70 71
55 72
72 73
2 74
74 75
75 76
75 77
77 78
78 79
75 80
80 81
81 82
80 83
83 84
84 85
2 86
86 87
87 88
87 89
89 90
90 91
87 92
92 93
93 94
94 95
94 96
96 97
97 98
96 99
99 100
100 101
94 102
102 103
92 104
104 105
2 106
106 107
107 108
107 109
109 110
110 111
107 112
112 113
113 114
114 115
113 116
116 117
117 118
112 119
119 120
2 121
121 122
122 123
122 124
124 125
125 126
122 127
127 128
127 129
129 130
130 131
131 132
130 133
133 134
134 135
129 136
136 137
127 138
138 139
139 140
2 141
141 142
142 143
142 144
144 145
145 146
142 147
147 148
148 149
149 150
148 151
151 152
152 153
147 154
154 155
2 156
156 157
157 158
157 159
159 160
160 161
157 162
162 163
162 164
164 165
165 166
166 167
165 168
168 169
169 170
164 171
171 172
162 173
173 174
174 175
0 176
0 177
177 178
0 179
179 180
180 181
180 182
182 183
180 184
184 185
185 186

initialise ourself from a PSPModuleInfo object. PSPModuleInfo object comes from the loader/ELF.
