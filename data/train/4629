24
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='applyPattern'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='pattern'
11 argument (BooleanLiteralExpr)
12 value='true'
13 type (VoidType)
14 name (SimpleName)
15 identifier='applyLocalizedPattern'
16 parameters
17 parameter (Parameter)
18 isVarArgs='false'
19 name (SimpleName)
20 identifier='pattern'
21 type (ClassOrInterfaceType)
22 name (SimpleName)
23 identifier='String'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
0 13
0 14
14 15
0 16
16 17
17 18
17 19
19 20
17 21
21 22
22 23

Apply the given pattern to this Format object.  The pattern is assumed to be in a localized notation. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. <p> There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon <P>Example <code>"#,#00.0#"</code> &rarr; 1,234.56 <P>This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. <p>Example: <code>"#,#00.0#;(#,#00.0#)"</code> for negatives in parentheses. <p>In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern.
