56
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (CastExpr)
8 expression (NameExpr)
9 name (SimpleName)
10 identifier='tessellator'
11 type (ClassOrInterfaceType)
12 name (SimpleName)
13 identifier='GLUtessellatorImpl'
14 name (SimpleName)
15 identifier='tess'
16 type (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='GLUtessellatorImpl'
19 statement (ExpressionStmt)
20 expression (MethodCallExpr)
21 name (SimpleName)
22 identifier='gluTessProperty'
23 scope (NameExpr)
24 name (SimpleName)
25 identifier='tess'
26 arguments
27 argument (NameExpr)
28 name (SimpleName)
29 identifier='which'
30 argument (NameExpr)
31 name (SimpleName)
32 identifier='value'
33 type (VoidType)
34 name (SimpleName)
35 identifier='gluTessProperty'
36 parameters
37 parameter (Parameter)
38 isVarArgs='false'
39 name (SimpleName)
40 identifier='tessellator'
41 type (ClassOrInterfaceType)
42 name (SimpleName)
43 identifier='GLUtessellator'
44 parameter (Parameter)
45 isVarArgs='false'
46 name (SimpleName)
47 identifier='which'
48 type (PrimitiveType)
49 type='INT'
50 parameter (Parameter)
51 isVarArgs='false'
52 name (SimpleName)
53 identifier='value'
54 type (PrimitiveType)
55 type='DOUBLE'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
6 14
14 15
6 16
16 17
17 18
2 19
19 20
20 21
21 22
20 23
23 24
24 25
20 26
26 27
27 28
28 29
26 30
30 31
31 32
0 33
0 34
34 35
0 36
36 37
37 38
37 39
39 40
37 41
41 42
42 43
36 44
44 45
44 46
46 47
44 48
48 49
36 50
50 51
50 52
52 53
50 54
54 55

<b>gluTessProperty</b> is used to control properites stored in a tessellation object.  These properties affect the way that the polygons are interpreted and rendered.  The legal value for <i>which</i> are as follows:<P> <b>GLU_TESS_WINDING_RULE</b> <UL> Determines which parts of the polygon are on the "interior". <em>value</em> may be set to one of <BR><b>GLU_TESS_WINDING_ODD</b>, <BR><b>GLU_TESS_WINDING_NONZERO</b>, <BR><b>GLU_TESS_WINDING_POSITIVE</b>, or <BR><b>GLU_TESS_WINDING_NEGATIVE</b>, or <BR><b>GLU_TESS_WINDING_ABS_GEQ_TWO</b>.<P> To understand how the winding rule works, consider that the input contours partition the plane into regions.  The winding rule determines which of these regions are inside the polygon.<P> For a single contour C, the winding number of a point x is simply the signed number of revolutions we make around x as we travel once around C (where CCW is positive).  When there are several contours, the individual winding numbers are summed.  This procedure associates a signed integer value with each point x in the plane.  Note that the winding number is the same for all points in a single region.<P> The winding rule classifies a region as "inside" if its winding number belongs to the chosen category (odd, nonzero, positive, negative, or absolute value of at least two).  The previous GLU tessellator (prior to GLU 1.2) used the "odd" rule.  The "nonzero" rule is another common way to define the interior.  The other three rules are useful for polygon CSG operations. </UL> <BR><b>GLU_TESS_BOUNDARY_ONLY</b> <UL> Is a boolean value ("value" should be set to GL_TRUE or GL_FALSE). When set to GL_TRUE, a set of closed contours separating the polygon interior and exterior are returned instead of a tessellation.  Exterior contours are oriented CCW with respect to the normal; interior contours are oriented CW. The <b>GLU_TESS_BEGIN</b> and <b>GLU_TESS_BEGIN_DATA</b> callbacks use the type GL_LINE_LOOP for each contour. </UL> <BR><b>GLU_TESS_TOLERANCE</b> <UL> Specifies a tolerance for merging features to reduce the size of the output. For example, two vertices that are very close to each other might be replaced by a single vertex.  The tolerance is multiplied by the largest coordinate magnitude of any input vertex; this specifies the maximum distance that any feature can move as the result of a single merge operation.  If a single feature takes part in several merge operations, the toal distance moved could be larger.<P> Feature merging is completely optional; the tolerance is only a hint. The implementation is free to merge in some cases and not in others, or to never merge features at all.  The initial tolerance is 0.<P> The current implementation merges vertices only if they are exactly coincident, regardless of the current tolerance.  A vertex is spliced into an edge only if the implementation is unable to distinguish which side of the edge the vertex lies on.  Two edges are merged only when both endpoints are identical. </UL>
