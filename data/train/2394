250
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (NullLiteralExpr)
8 name (SimpleName)
9 identifier='s'
10 type (ClassOrInterfaceType)
11 name (SimpleName)
12 identifier='String'
13 statement (SwitchStmt)
14 selector (NameExpr)
15 name (SimpleName)
16 identifier='typeCode'
17 entries
18 entrie (SwitchEntryStmt)
19 label (NameExpr)
20 name (SimpleName)
21 identifier='TC_NULL'
22 statements
23 statement (ExpressionStmt)
24 expression (AssignExpr)
25 operator='ASSIGN'
26 target (NameExpr)
27 name (SimpleName)
28 identifier='s'
29 value (StringLiteralExpr)
30 value='null'
31 statement (BreakStmt)
32 entrie (SwitchEntryStmt)
33 label (NameExpr)
34 name (SimpleName)
35 identifier='TC_VOID'
36 statements
37 statement (ExpressionStmt)
38 expression (AssignExpr)
39 operator='ASSIGN'
40 target (NameExpr)
41 name (SimpleName)
42 identifier='s'
43 value (StringLiteralExpr)
44 value='void'
45 statement (BreakStmt)
46 entrie (SwitchEntryStmt)
47 label (NameExpr)
48 name (SimpleName)
49 identifier='TC_BOOLEAN'
50 statements
51 statement (ExpressionStmt)
52 expression (AssignExpr)
53 operator='ASSIGN'
54 target (NameExpr)
55 name (SimpleName)
56 identifier='s'
57 value (StringLiteralExpr)
58 value='boolean'
59 statement (BreakStmt)
60 entrie (SwitchEntryStmt)
61 label (NameExpr)
62 name (SimpleName)
63 identifier='TC_BYTE'
64 statements
65 statement (ExpressionStmt)
66 expression (AssignExpr)
67 operator='ASSIGN'
68 target (NameExpr)
69 name (SimpleName)
70 identifier='s'
71 value (StringLiteralExpr)
72 value='byte'
73 statement (BreakStmt)
74 entrie (SwitchEntryStmt)
75 label (NameExpr)
76 name (SimpleName)
77 identifier='TC_CHAR'
78 statements
79 statement (ExpressionStmt)
80 expression (AssignExpr)
81 operator='ASSIGN'
82 target (NameExpr)
83 name (SimpleName)
84 identifier='s'
85 value (StringLiteralExpr)
86 value='char'
87 statement (BreakStmt)
88 entrie (SwitchEntryStmt)
89 label (NameExpr)
90 name (SimpleName)
91 identifier='TC_SHORT'
92 statements
93 statement (ExpressionStmt)
94 expression (AssignExpr)
95 operator='ASSIGN'
96 target (NameExpr)
97 name (SimpleName)
98 identifier='s'
99 value (StringLiteralExpr)
100 value='short'
101 statement (BreakStmt)
102 entrie (SwitchEntryStmt)
103 label (NameExpr)
104 name (SimpleName)
105 identifier='TC_INT'
106 statements
107 statement (ExpressionStmt)
108 expression (AssignExpr)
109 operator='ASSIGN'
110 target (NameExpr)
111 name (SimpleName)
112 identifier='s'
113 value (StringLiteralExpr)
114 value='int'
115 statement (BreakStmt)
116 entrie (SwitchEntryStmt)
117 label (NameExpr)
118 name (SimpleName)
119 identifier='TC_LONG'
120 statements
121 statement (ExpressionStmt)
122 expression (AssignExpr)
123 operator='ASSIGN'
124 target (NameExpr)
125 name (SimpleName)
126 identifier='s'
127 value (StringLiteralExpr)
128 value='long'
129 statement (BreakStmt)
130 entrie (SwitchEntryStmt)
131 label (NameExpr)
132 name (SimpleName)
133 identifier='TC_FLOAT'
134 statements
135 statement (ExpressionStmt)
136 expression (AssignExpr)
137 operator='ASSIGN'
138 target (NameExpr)
139 name (SimpleName)
140 identifier='s'
141 value (StringLiteralExpr)
142 value='float'
143 statement (BreakStmt)
144 entrie (SwitchEntryStmt)
145 label (NameExpr)
146 name (SimpleName)
147 identifier='TC_DOUBLE'
148 statements
149 statement (ExpressionStmt)
150 expression (AssignExpr)
151 operator='ASSIGN'
152 target (NameExpr)
153 name (SimpleName)
154 identifier='s'
155 value (StringLiteralExpr)
156 value='double'
157 statement (BreakStmt)
158 entrie (SwitchEntryStmt)
159 label (NameExpr)
160 name (SimpleName)
161 identifier='TC_ERROR'
162 statements
163 statement (ExpressionStmt)
164 expression (AssignExpr)
165 operator='ASSIGN'
166 target (NameExpr)
167 name (SimpleName)
168 identifier='s'
169 value (StringLiteralExpr)
170 value='<error>'
171 statement (IfStmt)
172 condition (BinaryExpr)
173 operator='EQUALS'
174 left (ThisExpr)
175 right (NameExpr)
176 name (SimpleName)
177 identifier='tPackage'
178 thenStmt (ExpressionStmt)
179 expression (AssignExpr)
180 operator='ASSIGN'
181 target (NameExpr)
182 name (SimpleName)
183 identifier='s'
184 value (StringLiteralExpr)
185 value='<package>'
186 statement (BreakStmt)
187 entrie (SwitchEntryStmt)
188 statements
189 statement (ExpressionStmt)
190 expression (AssignExpr)
191 operator='ASSIGN'
192 target (NameExpr)
193 name (SimpleName)
194 identifier='s'
195 value (StringLiteralExpr)
196 value='unknown'
197 statement (ReturnStmt)
198 expression (ConditionalExpr)
199 condition (EnclosedExpr)
200 inner (BinaryExpr)
201 operator='GREATER'
202 left (MethodCallExpr)
203 name (SimpleName)
204 identifier='length'
205 scope (NameExpr)
206 name (SimpleName)
207 identifier='id'
208 right (IntegerLiteralExpr)
209 value='0'
210 elseExpr (NameExpr)
211 name (SimpleName)
212 identifier='s'
213 thenExpr (BinaryExpr)
214 operator='PLUS'
215 left (BinaryExpr)
216 operator='PLUS'
217 left (NameExpr)
218 name (SimpleName)
219 identifier='s'
220 right (StringLiteralExpr)
221 value=' '
222 right (NameExpr)
223 name (SimpleName)
224 identifier='id'
225 type (ClassOrInterfaceType)
226 name (SimpleName)
227 identifier='String'
228 name (SimpleName)
229 identifier='typeString'
230 parameters
231 parameter (Parameter)
232 isVarArgs='false'
233 name (SimpleName)
234 identifier='id'
235 type (ClassOrInterfaceType)
236 name (SimpleName)
237 identifier='String'
238 parameter (Parameter)
239 isVarArgs='false'
240 name (SimpleName)
241 identifier='abbrev'
242 type (PrimitiveType)
243 type='BOOLEAN'
244 parameter (Parameter)
245 isVarArgs='false'
246 name (SimpleName)
247 identifier='ret'
248 type (PrimitiveType)
249 type='BOOLEAN'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
6 8
8 9
6 10
10 11
11 12
2 13
13 14
14 15
15 16
13 17
17 18
18 19
19 20
20 21
18 22
22 23
23 24
24 25
24 26
26 27
27 28
24 29
29 30
22 31
17 32
32 33
33 34
34 35
32 36
36 37
37 38
38 39
38 40
40 41
41 42
38 43
43 44
36 45
17 46
46 47
47 48
48 49
46 50
50 51
51 52
52 53
52 54
54 55
55 56
52 57
57 58
50 59
17 60
60 61
61 62
62 63
60 64
64 65
65 66
66 67
66 68
68 69
69 70
66 71
71 72
64 73
17 74
74 75
75 76
76 77
74 78
78 79
79 80
80 81
80 82
82 83
83 84
80 85
85 86
78 87
17 88
88 89
89 90
90 91
88 92
92 93
93 94
94 95
94 96
96 97
97 98
94 99
99 100
92 101
17 102
102 103
103 104
104 105
102 106
106 107
107 108
108 109
108 110
110 111
111 112
108 113
113 114
106 115
17 116
116 117
117 118
118 119
116 120
120 121
121 122
122 123
122 124
124 125
125 126
122 127
127 128
120 129
17 130
130 131
131 132
132 133
130 134
134 135
135 136
136 137
136 138
138 139
139 140
136 141
141 142
134 143
17 144
144 145
145 146
146 147
144 148
148 149
149 150
150 151
150 152
152 153
153 154
150 155
155 156
148 157
17 158
158 159
159 160
160 161
158 162
162 163
163 164
164 165
164 166
166 167
167 168
164 169
169 170
162 171
171 172
172 173
172 174
172 175
175 176
176 177
171 178
178 179
179 180
179 181
181 182
182 183
179 184
184 185
162 186
17 187
187 188
188 189
189 190
190 191
190 192
192 193
193 194
190 195
195 196
2 197
197 198
198 199
199 200
200 201
200 202
202 203
203 204
202 205
205 206
206 207
200 208
208 209
198 210
210 211
211 212
198 213
213 214
213 215
215 216
215 217
217 218
218 219
215 220
220 221
213 222
222 223
223 224
0 225
225 226
226 227
0 228
228 229
0 230
230 231
231 232
231 233
233 234
231 235
235 236
236 237
230 238
238 239
238 240
240 241
238 242
242 243
230 244
244 245
244 246
246 247
244 248
248 249

Convert a Type to a string, if abbrev is true class names are not fully qualified, if ret is true the return type is included.
