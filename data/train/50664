64
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='rangeCheck'
7 arguments
8 argument (FieldAccessExpr)
9 name (SimpleName)
10 identifier='length'
11 scope (NameExpr)
12 name (SimpleName)
13 identifier='a'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='fromIndex'
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='toIndex'
20 statement (ExpressionStmt)
21 expression (MethodCallExpr)
22 name (SimpleName)
23 identifier='quickSort1'
24 arguments
25 argument (NameExpr)
26 name (SimpleName)
27 identifier='a'
28 argument (NameExpr)
29 name (SimpleName)
30 identifier='fromIndex'
31 argument (BinaryExpr)
32 operator='MINUS'
33 left (NameExpr)
34 name (SimpleName)
35 identifier='toIndex'
36 right (NameExpr)
37 name (SimpleName)
38 identifier='fromIndex'
39 type (VoidType)
40 name (SimpleName)
41 identifier='quickSort'
42 parameters
43 parameter (Parameter)
44 isVarArgs='false'
45 name (SimpleName)
46 identifier='a'
47 type (ArrayType)
48 origin='TYPE'
49 componentType (ClassOrInterfaceType)
50 name (SimpleName)
51 identifier='Object'
52 parameter (Parameter)
53 isVarArgs='false'
54 name (SimpleName)
55 identifier='fromIndex'
56 type (PrimitiveType)
57 type='INT'
58 parameter (Parameter)
59 isVarArgs='false'
60 name (SimpleName)
61 identifier='toIndex'
62 type (PrimitiveType)
63 type='INT'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
8 11
11 12
12 13
7 14
14 15
15 16
7 17
17 18
18 19
2 20
20 21
21 22
22 23
21 24
24 25
25 26
26 27
24 28
28 29
29 30
24 31
31 32
31 33
33 34
34 35
31 36
36 37
37 38
0 39
0 40
40 41
0 42
42 43
43 44
43 45
45 46
43 47
47 48
47 49
49 50
50 51
42 52
52 53
52 54
54 55
52 56
56 57
42 58
58 59
58 60
60 61
58 62
62 63

Sorts the specified range of the receiver into ascending order, according to the <i>natural ordering</i> of its elements.  All elements in this range must implement the <tt>Comparable</tt> interface.  Furthermore, all elements in this range must be <i>mutually comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the array).<p>
