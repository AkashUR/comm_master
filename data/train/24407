144
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (AssertStmt)
4 check (BinaryExpr)
5 operator='AND'
6 left (MethodCallExpr)
7 name (SimpleName)
8 identifier='isInteger'
9 scope (EnclosedExpr)
10 inner (CastExpr)
11 expression (MethodCallExpr)
12 name (SimpleName)
13 identifier='getPlatformKind'
14 scope (NameExpr)
15 name (SimpleName)
16 identifier='left'
17 type (ClassOrInterfaceType)
18 name (SimpleName)
19 identifier='AArch64Kind'
20 right (BinaryExpr)
21 operator='EQUALS'
22 left (MethodCallExpr)
23 name (SimpleName)
24 identifier='getPlatformKind'
25 scope (NameExpr)
26 name (SimpleName)
27 identifier='left'
28 right (MethodCallExpr)
29 name (SimpleName)
30 identifier='getPlatformKind'
31 scope (NameExpr)
32 name (SimpleName)
33 identifier='right'
34 statement (ExpressionStmt)
35 expression (MethodCallExpr)
36 name (SimpleName)
37 identifier='emitBinary'
38 scope (EnclosedExpr)
39 inner (CastExpr)
40 expression (MethodCallExpr)
41 name (SimpleName)
42 identifier='getArithmetic'
43 type (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='AArch64ArithmeticLIRGenerator'
46 arguments
47 argument (MethodCallExpr)
48 name (SimpleName)
49 identifier='combine'
50 scope (NameExpr)
51 name (SimpleName)
52 identifier='LIRKind'
53 arguments
54 argument (NameExpr)
55 name (SimpleName)
56 identifier='left'
57 argument (NameExpr)
58 name (SimpleName)
59 identifier='right'
60 argument (FieldAccessExpr)
61 name (SimpleName)
62 identifier='ANDS'
63 scope (NameExpr)
64 name (SimpleName)
65 identifier='AArch64ArithmeticOp'
66 argument (BooleanLiteralExpr)
67 value='true'
68 argument (NameExpr)
69 name (SimpleName)
70 identifier='left'
71 argument (NameExpr)
72 name (SimpleName)
73 identifier='right'
74 statement (ExpressionStmt)
75 expression (MethodCallExpr)
76 name (SimpleName)
77 identifier='append'
78 arguments
79 argument (ObjectCreationExpr)
80 type (ClassOrInterfaceType)
81 name (SimpleName)
82 identifier='BranchOp'
83 scope (ClassOrInterfaceType)
84 name (SimpleName)
85 identifier='AArch64ControlFlow'
86 arguments
87 argument (FieldAccessExpr)
88 name (SimpleName)
89 identifier='EQ'
90 scope (NameExpr)
91 name (SimpleName)
92 identifier='ConditionFlag'
93 argument (NameExpr)
94 name (SimpleName)
95 identifier='trueDestination'
96 argument (NameExpr)
97 name (SimpleName)
98 identifier='falseDestination'
99 argument (NameExpr)
100 name (SimpleName)
101 identifier='trueSuccessorProbability'
102 type (VoidType)
103 name (SimpleName)
104 identifier='emitIntegerTestBranch'
105 parameters
106 parameter (Parameter)
107 isVarArgs='false'
108 name (SimpleName)
109 identifier='left'
110 type (ClassOrInterfaceType)
111 name (SimpleName)
112 identifier='Value'
113 parameter (Parameter)
114 isVarArgs='false'
115 name (SimpleName)
116 identifier='right'
117 type (ClassOrInterfaceType)
118 name (SimpleName)
119 identifier='Value'
120 parameter (Parameter)
121 isVarArgs='false'
122 name (SimpleName)
123 identifier='trueDestination'
124 type (ClassOrInterfaceType)
125 name (SimpleName)
126 identifier='LabelRef'
127 parameter (Parameter)
128 isVarArgs='false'
129 name (SimpleName)
130 identifier='falseDestination'
131 type (ClassOrInterfaceType)
132 name (SimpleName)
133 identifier='LabelRef'
134 parameter (Parameter)
135 isVarArgs='false'
136 name (SimpleName)
137 identifier='trueSuccessorProbability'
138 type (PrimitiveType)
139 type='DOUBLE'
140 annotations
141 annotation (MarkerAnnotationExpr)
142 name (Name)
143 identifier='Override'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
6 9
9 10
10 11
11 12
12 13
11 14
14 15
15 16
10 17
17 18
18 19
4 20
20 21
20 22
22 23
23 24
22 25
25 26
26 27
20 28
28 29
29 30
28 31
31 32
32 33
2 34
34 35
35 36
36 37
35 38
38 39
39 40
40 41
41 42
39 43
43 44
44 45
35 46
46 47
47 48
48 49
47 50
50 51
51 52
47 53
53 54
54 55
55 56
53 57
57 58
58 59
46 60
60 61
61 62
60 63
63 64
64 65
46 66
66 67
46 68
68 69
69 70
46 71
71 72
72 73
2 74
74 75
75 76
76 77
75 78
78 79
79 80
80 81
81 82
80 83
83 84
84 85
79 86
86 87
87 88
88 89
87 90
90 91
91 92
86 93
93 94
94 95
86 96
96 97
97 98
86 99
99 100
100 101
0 102
0 103
103 104
0 105
105 106
106 107
106 108
108 109
106 110
110 111
111 112
105 113
113 114
113 115
115 116
113 117
117 118
118 119
105 120
120 121
120 122
122 123
120 124
124 125
125 126
105 127
127 128
127 129
129 130
127 131
131 132
132 133
105 134
134 135
134 136
136 137
134 138
138 139
0 140
140 141
141 142
142 143

Branches to label if (left & right) == 0. If negated is true branchse on non-zero instead.
