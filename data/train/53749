187
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (CastExpr)
8 expression (EnclosedExpr)
9 inner (BinaryExpr)
10 operator='BINARY_AND'
11 left (IntegerLiteralExpr)
12 value='0xFF'
13 right (MethodCallExpr)
14 name (SimpleName)
15 identifier='getResidual'
16 arguments
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='msg'
20 type (PrimitiveType)
21 type='INT'
22 name (SimpleName)
23 identifier='residual'
24 type (PrimitiveType)
25 type='INT'
26 statement (SwitchStmt)
27 selector (NameExpr)
28 name (SimpleName)
29 identifier='residual'
30 entries
31 entrie (SwitchEntryStmt)
32 label (IntegerLiteralExpr)
33 value='1'
34 entrie (SwitchEntryStmt)
35 label (IntegerLiteralExpr)
36 value='136'
37 statements
38 statement (ExpressionStmt)
39 expression (MethodCallExpr)
40 name (SimpleName)
41 identifier='flip'
42 scope (NameExpr)
43 name (SimpleName)
44 identifier='msg'
45 arguments
46 argument (IntegerLiteralExpr)
47 value='67'
48 statement (BreakStmt)
49 entrie (SwitchEntryStmt)
50 label (IntegerLiteralExpr)
51 value='3'
52 entrie (SwitchEntryStmt)
53 label (IntegerLiteralExpr)
54 value='138'
55 statements
56 statement (ExpressionStmt)
57 expression (MethodCallExpr)
58 name (SimpleName)
59 identifier='flip'
60 scope (NameExpr)
61 name (SimpleName)
62 identifier='msg'
63 arguments
64 argument (IntegerLiteralExpr)
65 value='66'
66 statement (ExpressionStmt)
67 expression (MethodCallExpr)
68 name (SimpleName)
69 identifier='flip'
70 scope (NameExpr)
71 name (SimpleName)
72 identifier='msg'
73 arguments
74 argument (IntegerLiteralExpr)
75 value='67'
76 statement (BreakStmt)
77 entrie (SwitchEntryStmt)
78 label (IntegerLiteralExpr)
79 value='2'
80 entrie (SwitchEntryStmt)
81 label (IntegerLiteralExpr)
82 value='139'
83 statements
84 statement (ExpressionStmt)
85 expression (MethodCallExpr)
86 name (SimpleName)
87 identifier='flip'
88 scope (NameExpr)
89 name (SimpleName)
90 identifier='msg'
91 arguments
92 argument (IntegerLiteralExpr)
93 value='66'
94 statement (BreakStmt)
95 entrie (SwitchEntryStmt)
96 label (IntegerLiteralExpr)
97 value='140'
98 statements
99 statement (ExpressionStmt)
100 expression (MethodCallExpr)
101 name (SimpleName)
102 identifier='flip'
103 scope (NameExpr)
104 name (SimpleName)
105 identifier='msg'
106 arguments
107 argument (IntegerLiteralExpr)
108 value='65'
109 statement (ExpressionStmt)
110 expression (MethodCallExpr)
111 name (SimpleName)
112 identifier='flip'
113 scope (NameExpr)
114 name (SimpleName)
115 identifier='msg'
116 arguments
117 argument (IntegerLiteralExpr)
118 value='67'
119 statement (BreakStmt)
120 entrie (SwitchEntryStmt)
121 label (IntegerLiteralExpr)
122 value='153'
123 statements
124 statement (ExpressionStmt)
125 expression (MethodCallExpr)
126 name (SimpleName)
127 identifier='flip'
128 scope (NameExpr)
129 name (SimpleName)
130 identifier='msg'
131 arguments
132 argument (IntegerLiteralExpr)
133 value='67'
134 statement (BreakStmt)
135 entrie (SwitchEntryStmt)
136 label (IntegerLiteralExpr)
137 value='142'
138 statements
139 statement (ExpressionStmt)
140 expression (MethodCallExpr)
141 name (SimpleName)
142 identifier='flip'
143 scope (NameExpr)
144 name (SimpleName)
145 identifier='msg'
146 arguments
147 argument (IntegerLiteralExpr)
148 value='65'
149 statement (ExpressionStmt)
150 expression (MethodCallExpr)
151 name (SimpleName)
152 identifier='flip'
153 scope (NameExpr)
154 name (SimpleName)
155 identifier='msg'
156 arguments
157 argument (IntegerLiteralExpr)
158 value='66'
159 statement (ExpressionStmt)
160 expression (MethodCallExpr)
161 name (SimpleName)
162 identifier='flip'
163 scope (NameExpr)
164 name (SimpleName)
165 identifier='msg'
166 arguments
167 argument (IntegerLiteralExpr)
168 value='67'
169 statement (BreakStmt)
170 statement (ReturnStmt)
171 expression (NameExpr)
172 name (SimpleName)
173 identifier='msg'
174 type (ClassOrInterfaceType)
175 name (SimpleName)
176 identifier='BinaryMessage'
177 name (SimpleName)
178 identifier='correct'
179 parameters
180 parameter (Parameter)
181 isVarArgs='false'
182 name (SimpleName)
183 identifier='msg'
184 type (ClassOrInterfaceType)
185 name (SimpleName)
186 identifier='BinaryMessage'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
9 11
11 12
9 13
13 14
14 15
13 16
16 17
17 18
18 19
7 20
20 21
6 22
22 23
6 24
24 25
2 26
26 27
27 28
28 29
26 30
30 31
31 32
32 33
30 34
34 35
35 36
34 37
37 38
38 39
39 40
40 41
39 42
42 43
43 44
39 45
45 46
46 47
37 48
30 49
49 50
50 51
30 52
52 53
53 54
52 55
55 56
56 57
57 58
58 59
57 60
60 61
61 62
57 63
63 64
64 65
55 66
66 67
67 68
68 69
67 70
70 71
71 72
67 73
73 74
74 75
55 76
30 77
77 78
78 79
30 80
80 81
81 82
80 83
83 84
84 85
85 86
86 87
85 88
88 89
89 90
85 91
91 92
92 93
83 94
30 95
95 96
96 97
95 98
98 99
99 100
100 101
101 102
100 103
103 104
104 105
100 106
106 107
107 108
98 109
109 110
110 111
111 112
110 113
113 114
114 115
110 116
116 117
117 118
98 119
30 120
120 121
121 122
120 123
123 124
124 125
125 126
126 127
125 128
128 129
129 130
125 131
131 132
132 133
123 134
30 135
135 136
136 137
135 138
138 139
139 140
140 141
141 142
140 143
143 144
144 145
140 146
146 147
147 148
138 149
149 150
150 151
151 152
150 153
153 154
154 155
150 156
156 157
157 158
138 159
159 160
160 161
161 162
160 163
163 164
164 165
160 166
166 167
167 168
138 169
2 170
170 171
171 172
172 173
0 174
174 175
175 176
0 177
177 178
0 179
179 180
180 181
180 182
182 183
180 184
184 185
185 186

Initial take on error correction.  The majority of the errors detected are in the final 2 bits, owing to the forward looking soft bit detection used in the decoder.  For right now, correct any messages where the  residual indicates that the final 1 or 2 bits are bad.
