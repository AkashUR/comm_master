50
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='assertParsed'
7 arguments
8 argument (LongLiteralExpr)
9 value='9223372036854775807L'
10 argument (StringLiteralExpr)
11 value='9223372036854775807'
12 statement (ExpressionStmt)
13 expression (MethodCallExpr)
14 name (SimpleName)
15 identifier='assertParsed'
16 arguments
17 argument (LongLiteralExpr)
18 value='9223372036854775806L'
19 argument (StringLiteralExpr)
20 value='9223372036854775806'
21 statement (ExpressionStmt)
22 expression (MethodCallExpr)
23 name (SimpleName)
24 identifier='assertParsed'
25 arguments
26 argument (UnaryExpr)
27 operator='MINUS'
28 expression (LongLiteralExpr)
29 value='9223372036854775808L'
30 argument (StringLiteralExpr)
31 value='-9223372036854775808'
32 statement (ExpressionStmt)
33 expression (MethodCallExpr)
34 name (SimpleName)
35 identifier='assertParsed'
36 arguments
37 argument (UnaryExpr)
38 operator='MINUS'
39 expression (LongLiteralExpr)
40 value='9223372036854775807L'
41 argument (StringLiteralExpr)
42 value='-9223372036854775807'
43 type (VoidType)
44 name (SimpleName)
45 identifier='testParsingNumbersThatAreBestRepresentedAsLongs'
46 thrownExceptions
47 thrownException (ClassOrInterfaceType)
48 name (SimpleName)
49 identifier='JSONException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
2 12
12 13
13 14
14 15
13 16
16 17
17 18
16 19
19 20
2 21
21 22
22 23
23 24
22 25
25 26
26 27
26 28
28 29
25 30
30 31
2 32
32 33
33 34
34 35
33 36
36 37
37 38
37 39
39 40
36 41
41 42
0 43
0 44
44 45
0 46
46 47
47 48
48 49

Unfortunately the original implementation attempts to figure out what Java number type best suits an input value.
