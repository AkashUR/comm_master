161
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='ObjectMapper'
11 name (SimpleName)
12 identifier='m'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='ObjectMapper'
16 statement (ExpressionStmt)
17 expression (VariableDeclarationExpr)
18 variables
19 variable (VariableDeclarator)
20 initializer (BinaryExpr)
21 operator='PLUS'
22 left (BinaryExpr)
23 operator='PLUS'
24 left (StringLiteralExpr)
25 value='[\"'
26 right (MethodCallExpr)
27 name (SimpleName)
28 identifier='getName'
29 scope (ClassExpr)
30 type (ClassOrInterfaceType)
31 name (SimpleName)
32 identifier='TypedListAsProp'
33 right (StringLiteralExpr)
34 value='\",[true, false]]'
35 name (SimpleName)
36 identifier='JSON'
37 type (ClassOrInterfaceType)
38 name (SimpleName)
39 identifier='String'
40 statement (ExpressionStmt)
41 expression (VariableDeclarationExpr)
42 variables
43 variable (VariableDeclarator)
44 initializer (MethodCallExpr)
45 name (SimpleName)
46 identifier='constructCollectionType'
47 scope (MethodCallExpr)
48 name (SimpleName)
49 identifier='defaultInstance'
50 scope (NameExpr)
51 name (SimpleName)
52 identifier='TypeFactory'
53 arguments
54 argument (ClassExpr)
55 type (ClassOrInterfaceType)
56 name (SimpleName)
57 identifier='TypedListAsProp'
58 argument (ClassExpr)
59 type (ClassOrInterfaceType)
60 name (SimpleName)
61 identifier='Boolean'
62 name (SimpleName)
63 identifier='type'
64 type (ClassOrInterfaceType)
65 name (SimpleName)
66 identifier='JavaType'
67 statement (ExpressionStmt)
68 expression (VariableDeclarationExpr)
69 variables
70 variable (VariableDeclarator)
71 initializer (MethodCallExpr)
72 name (SimpleName)
73 identifier='readValue'
74 scope (NameExpr)
75 name (SimpleName)
76 identifier='m'
77 arguments
78 argument (NameExpr)
79 name (SimpleName)
80 identifier='JSON'
81 argument (NameExpr)
82 name (SimpleName)
83 identifier='type'
84 name (SimpleName)
85 identifier='result'
86 type (ClassOrInterfaceType)
87 name (SimpleName)
88 identifier='TypedListAsProp'
89 typeArguments
90 typeArgument (ClassOrInterfaceType)
91 name (SimpleName)
92 identifier='Object'
93 statement (ExpressionStmt)
94 expression (MethodCallExpr)
95 name (SimpleName)
96 identifier='assertNotNull'
97 arguments
98 argument (NameExpr)
99 name (SimpleName)
100 identifier='result'
101 statement (ExpressionStmt)
102 expression (MethodCallExpr)
103 name (SimpleName)
104 identifier='assertEquals'
105 arguments
106 argument (IntegerLiteralExpr)
107 value='2'
108 argument (MethodCallExpr)
109 name (SimpleName)
110 identifier='size'
111 scope (NameExpr)
112 name (SimpleName)
113 identifier='result'
114 statement (ExpressionStmt)
115 expression (MethodCallExpr)
116 name (SimpleName)
117 identifier='assertEquals'
118 arguments
119 argument (FieldAccessExpr)
120 name (SimpleName)
121 identifier='TRUE'
122 scope (NameExpr)
123 name (SimpleName)
124 identifier='Boolean'
125 argument (MethodCallExpr)
126 name (SimpleName)
127 identifier='get'
128 scope (NameExpr)
129 name (SimpleName)
130 identifier='result'
131 arguments
132 argument (IntegerLiteralExpr)
133 value='0'
134 statement (ExpressionStmt)
135 expression (MethodCallExpr)
136 name (SimpleName)
137 identifier='assertEquals'
138 arguments
139 argument (FieldAccessExpr)
140 name (SimpleName)
141 identifier='FALSE'
142 scope (NameExpr)
143 name (SimpleName)
144 identifier='Boolean'
145 argument (MethodCallExpr)
146 name (SimpleName)
147 identifier='get'
148 scope (NameExpr)
149 name (SimpleName)
150 identifier='result'
151 arguments
152 argument (IntegerLiteralExpr)
153 value='1'
154 type (VoidType)
155 name (SimpleName)
156 identifier='testBooleanListAsProp'
157 thrownExceptions
158 thrownException (ClassOrInterfaceType)
159 name (SimpleName)
160 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
19 20
20 21
20 22
22 23
22 24
24 25
22 26
26 27
27 28
26 29
29 30
30 31
31 32
20 33
33 34
19 35
35 36
19 37
37 38
38 39
2 40
40 41
41 42
42 43
43 44
44 45
45 46
44 47
47 48
48 49
47 50
50 51
51 52
44 53
53 54
54 55
55 56
56 57
53 58
58 59
59 60
60 61
43 62
62 63
43 64
64 65
65 66
2 67
67 68
68 69
69 70
70 71
71 72
72 73
71 74
74 75
75 76
71 77
77 78
78 79
79 80
77 81
81 82
82 83
70 84
84 85
70 86
86 87
87 88
86 89
89 90
90 91
91 92
2 93
93 94
94 95
95 96
94 97
97 98
98 99
99 100
2 101
101 102
102 103
103 104
102 105
105 106
106 107
105 108
108 109
109 110
108 111
111 112
112 113
2 114
114 115
115 116
116 117
115 118
118 119
119 120
120 121
119 122
122 123
123 124
118 125
125 126
126 127
125 128
128 129
129 130
125 131
131 132
132 133
2 134
134 135
135 136
136 137
135 138
138 139
139 140
140 141
139 142
142 143
143 144
138 145
145 146
146 147
145 148
148 149
149 150
145 151
151 152
152 153
0 154
0 155
155 156
0 157
157 158
158 159
159 160

Similar to above, but this time let's request adding type info as property. That would not work (since there's no JSON Object to add property in), so it will basically be same as using WRAPPER_ARRAY
