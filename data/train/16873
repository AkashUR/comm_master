213
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 name (SimpleName)
8 identifier='rightLiteral'
9 type (ClassOrInterfaceType)
10 name (SimpleName)
11 identifier='RexLiteral'
12 statement (SwitchStmt)
13 selector (MethodCallExpr)
14 name (SimpleName)
15 identifier='getKind'
16 scope (NameExpr)
17 name (SimpleName)
18 identifier='right'
19 entries
20 entrie (SwitchEntryStmt)
21 label (NameExpr)
22 name (SimpleName)
23 identifier='CAST'
24 statements
25 statement (ExpressionStmt)
26 expression (AssignExpr)
27 operator='ASSIGN'
28 target (NameExpr)
29 name (SimpleName)
30 identifier='rightLiteral'
31 value (CastExpr)
32 expression (MethodCallExpr)
33 name (SimpleName)
34 identifier='get'
35 scope (MethodCallExpr)
36 name (SimpleName)
37 identifier='getOperands'
38 scope (EnclosedExpr)
39 inner (CastExpr)
40 expression (NameExpr)
41 name (SimpleName)
42 identifier='right'
43 type (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='RexCall'
46 arguments
47 argument (IntegerLiteralExpr)
48 value='0'
49 type (ClassOrInterfaceType)
50 name (SimpleName)
51 identifier='RexLiteral'
52 statement (BreakStmt)
53 entrie (SwitchEntryStmt)
54 label (NameExpr)
55 name (SimpleName)
56 identifier='LITERAL'
57 statements
58 statement (ExpressionStmt)
59 expression (AssignExpr)
60 operator='ASSIGN'
61 target (NameExpr)
62 name (SimpleName)
63 identifier='rightLiteral'
64 value (CastExpr)
65 expression (NameExpr)
66 name (SimpleName)
67 identifier='right'
68 type (ClassOrInterfaceType)
69 name (SimpleName)
70 identifier='RexLiteral'
71 statement (BreakStmt)
72 entrie (SwitchEntryStmt)
73 statements
74 statement (ReturnStmt)
75 expression (BooleanLiteralExpr)
76 value='false'
77 statement (SwitchStmt)
78 selector (MethodCallExpr)
79 name (SimpleName)
80 identifier='getKind'
81 scope (NameExpr)
82 name (SimpleName)
83 identifier='left'
84 entries
85 entrie (SwitchEntryStmt)
86 label (NameExpr)
87 name (SimpleName)
88 identifier='INPUT_REF'
89 statements
90 statement (ExpressionStmt)
91 expression (VariableDeclarationExpr)
92 variables
93 variable (VariableDeclarator)
94 initializer (CastExpr)
95 expression (NameExpr)
96 name (SimpleName)
97 identifier='left'
98 type (ClassOrInterfaceType)
99 name (SimpleName)
100 identifier='RexInputRef'
101 name (SimpleName)
102 identifier='left1'
103 type (ClassOrInterfaceType)
104 name (SimpleName)
105 identifier='RexInputRef'
106 statement (ExpressionStmt)
107 expression (VariableDeclarationExpr)
108 variables
109 variable (VariableDeclarator)
110 initializer (MethodCallExpr)
111 name (SimpleName)
112 identifier='get'
113 scope (NameExpr)
114 name (SimpleName)
115 identifier='fieldNames'
116 arguments
117 argument (MethodCallExpr)
118 name (SimpleName)
119 identifier='getIndex'
120 scope (NameExpr)
121 name (SimpleName)
122 identifier='left1'
123 name (SimpleName)
124 identifier='name'
125 type (ClassOrInterfaceType)
126 name (SimpleName)
127 identifier='String'
128 statement (ExpressionStmt)
129 expression (MethodCallExpr)
130 name (SimpleName)
131 identifier='translateOp2'
132 arguments
133 argument (NameExpr)
134 name (SimpleName)
135 identifier='op'
136 argument (NameExpr)
137 name (SimpleName)
138 identifier='name'
139 argument (NameExpr)
140 name (SimpleName)
141 identifier='rightLiteral'
142 statement (ReturnStmt)
143 expression (BooleanLiteralExpr)
144 value='true'
145 entrie (SwitchEntryStmt)
146 label (NameExpr)
147 name (SimpleName)
148 identifier='CAST'
149 statements
150 statement (ReturnStmt)
151 expression (MethodCallExpr)
152 name (SimpleName)
153 identifier='translateBinary2'
154 arguments
155 argument (NameExpr)
156 name (SimpleName)
157 identifier='op'
158 argument (MethodCallExpr)
159 name (SimpleName)
160 identifier='get'
161 scope (FieldAccessExpr)
162 name (SimpleName)
163 identifier='operands'
164 scope (EnclosedExpr)
165 inner (CastExpr)
166 expression (NameExpr)
167 name (SimpleName)
168 identifier='left'
169 type (ClassOrInterfaceType)
170 name (SimpleName)
171 identifier='RexCall'
172 arguments
173 argument (IntegerLiteralExpr)
174 value='0'
175 argument (NameExpr)
176 name (SimpleName)
177 identifier='right'
178 entrie (SwitchEntryStmt)
179 label (NameExpr)
180 name (SimpleName)
181 identifier='OTHER_FUNCTION'
182 entrie (SwitchEntryStmt)
183 statements
184 statement (ReturnStmt)
185 expression (BooleanLiteralExpr)
186 value='false'
187 type (PrimitiveType)
188 type='BOOLEAN'
189 name (SimpleName)
190 identifier='translateBinary2'
191 parameters
192 parameter (Parameter)
193 isVarArgs='false'
194 name (SimpleName)
195 identifier='op'
196 type (ClassOrInterfaceType)
197 name (SimpleName)
198 identifier='String'
199 parameter (Parameter)
200 isVarArgs='false'
201 name (SimpleName)
202 identifier='left'
203 type (ClassOrInterfaceType)
204 name (SimpleName)
205 identifier='RexNode'
206 parameter (Parameter)
207 isVarArgs='false'
208 name (SimpleName)
209 identifier='right'
210 type (ClassOrInterfaceType)
211 name (SimpleName)
212 identifier='RexNode'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
6 9
9 10
10 11
2 12
12 13
13 14
14 15
13 16
16 17
17 18
12 19
19 20
20 21
21 22
22 23
20 24
24 25
25 26
26 27
26 28
28 29
29 30
26 31
31 32
32 33
33 34
32 35
35 36
36 37
35 38
38 39
39 40
40 41
41 42
39 43
43 44
44 45
32 46
46 47
47 48
31 49
49 50
50 51
24 52
19 53
53 54
54 55
55 56
53 57
57 58
58 59
59 60
59 61
61 62
62 63
59 64
64 65
65 66
66 67
64 68
68 69
69 70
57 71
19 72
72 73
73 74
74 75
75 76
2 77
77 78
78 79
79 80
78 81
81 82
82 83
77 84
84 85
85 86
86 87
87 88
85 89
89 90
90 91
91 92
92 93
93 94
94 95
95 96
96 97
94 98
98 99
99 100
93 101
101 102
93 103
103 104
104 105
89 106
106 107
107 108
108 109
109 110
110 111
111 112
110 113
113 114
114 115
110 116
116 117
117 118
118 119
117 120
120 121
121 122
109 123
123 124
109 125
125 126
126 127
89 128
128 129
129 130
130 131
129 132
132 133
133 134
134 135
132 136
136 137
137 138
132 139
139 140
140 141
89 142
142 143
143 144
84 145
145 146
146 147
147 148
145 149
149 150
150 151
151 152
152 153
151 154
154 155
155 156
156 157
154 158
158 159
159 160
158 161
161 162
162 163
161 164
164 165
165 166
166 167
167 168
165 169
169 170
170 171
158 172
172 173
173 174
154 175
175 176
176 177
84 178
178 179
179 180
180 181
84 182
182 183
183 184
184 185
185 186
0 187
187 188
0 189
189 190
0 191
191 192
192 193
192 194
194 195
192 196
196 197
197 198
191 199
199 200
199 201
201 202
199 203
203 204
204 205
191 206
206 207
206 208
208 209
206 210
210 211
211 212

Translates a call to a binary operator. Returns whether successful.
