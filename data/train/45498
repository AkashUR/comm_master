150
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (NameExpr)
7 name (SimpleName)
8 identifier='DIMENSION'
9 value (NameExpr)
10 name (SimpleName)
11 identifier='dimension'
12 statement (ExpressionStmt)
13 expression (AssignExpr)
14 operator='ASSIGN'
15 target (NameExpr)
16 name (SimpleName)
17 identifier='INDEX_TYPE'
18 value (NameExpr)
19 name (SimpleName)
20 identifier='indexType'
21 statement (ExpressionStmt)
22 expression (AssignExpr)
23 operator='ASSIGN'
24 target (NameExpr)
25 name (SimpleName)
26 identifier='INDEX_TYPE_OFFSET'
27 value (ConditionalExpr)
28 condition (EnclosedExpr)
29 inner (BinaryExpr)
30 operator='EQUALS'
31 left (NameExpr)
32 name (SimpleName)
33 identifier='INDEX_TYPE'
34 right (FieldAccessExpr)
35 name (SimpleName)
36 identifier='ANGULAR'
37 scope (NameExpr)
38 name (SimpleName)
39 identifier='IndexType'
40 elseExpr (IntegerLiteralExpr)
41 value='8'
42 thenExpr (IntegerLiteralExpr)
43 value='4'
44 statement (ExpressionStmt)
45 expression (AssignExpr)
46 operator='ASSIGN'
47 target (NameExpr)
48 name (SimpleName)
49 identifier='K_NODE_HEADER_STYLE'
50 value (ConditionalExpr)
51 condition (EnclosedExpr)
52 inner (BinaryExpr)
53 operator='EQUALS'
54 left (NameExpr)
55 name (SimpleName)
56 identifier='INDEX_TYPE'
57 right (FieldAccessExpr)
58 name (SimpleName)
59 identifier='ANGULAR'
60 scope (NameExpr)
61 name (SimpleName)
62 identifier='IndexType'
63 elseExpr (IntegerLiteralExpr)
64 value='16'
65 thenExpr (IntegerLiteralExpr)
66 value='12'
67 statement (ExpressionStmt)
68 expression (AssignExpr)
69 operator='ASSIGN'
70 target (FieldAccessExpr)
71 name (SimpleName)
72 identifier='MIN_LEAF_SIZE'
73 scope (ThisExpr)
74 value (BinaryExpr)
75 operator='PLUS'
76 left (NameExpr)
77 name (SimpleName)
78 identifier='DIMENSION'
79 right (IntegerLiteralExpr)
80 value='2'
81 statement (ExpressionStmt)
82 expression (AssignExpr)
83 operator='ASSIGN'
84 target (FieldAccessExpr)
85 name (SimpleName)
86 identifier='NODE_SIZE'
87 scope (ThisExpr)
88 value (BinaryExpr)
89 operator='PLUS'
90 left (NameExpr)
91 name (SimpleName)
92 identifier='K_NODE_HEADER_STYLE'
93 right (BinaryExpr)
94 operator='MULTIPLY'
95 left (NameExpr)
96 name (SimpleName)
97 identifier='FLOAT_SIZE'
98 right (NameExpr)
99 name (SimpleName)
100 identifier='DIMENSION'
101 statement (ExpressionStmt)
102 expression (AssignExpr)
103 operator='ASSIGN'
104 target (NameExpr)
105 name (SimpleName)
106 identifier='roots'
107 value (ObjectCreationExpr)
108 type (ClassOrInterfaceType)
109 name (SimpleName)
110 identifier='ArrayList'
111 typeArguments
112 typeArgument (ClassOrInterfaceType)
113 name (SimpleName)
114 identifier='Integer'
115 statement (ExpressionStmt)
116 expression (MethodCallExpr)
117 name (SimpleName)
118 identifier='load'
119 arguments
120 argument (NameExpr)
121 name (SimpleName)
122 identifier='filename'
123 name (SimpleName)
124 identifier='ANNIndex'
125 parameters
126 parameter (Parameter)
127 isVarArgs='false'
128 name (SimpleName)
129 identifier='dimension'
130 type (PrimitiveType)
131 type='INT'
132 parameter (Parameter)
133 isVarArgs='false'
134 name (SimpleName)
135 identifier='filename'
136 type (ClassOrInterfaceType)
137 name (SimpleName)
138 identifier='String'
139 parameter (Parameter)
140 isVarArgs='false'
141 name (SimpleName)
142 identifier='indexType'
143 type (ClassOrInterfaceType)
144 name (SimpleName)
145 identifier='IndexType'
146 thrownExceptions
147 thrownException (ClassOrInterfaceType)
148 name (SimpleName)
149 identifier='IOException'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
9 10
10 11
2 12
12 13
13 14
13 15
15 16
16 17
13 18
18 19
19 20
2 21
21 22
22 23
22 24
24 25
25 26
22 27
27 28
28 29
29 30
29 31
31 32
32 33
29 34
34 35
35 36
34 37
37 38
38 39
27 40
40 41
27 42
42 43
2 44
44 45
45 46
45 47
47 48
48 49
45 50
50 51
51 52
52 53
52 54
54 55
55 56
52 57
57 58
58 59
57 60
60 61
61 62
50 63
63 64
50 65
65 66
2 67
67 68
68 69
68 70
70 71
71 72
70 73
68 74
74 75
74 76
76 77
77 78
74 79
79 80
2 81
81 82
82 83
82 84
84 85
85 86
84 87
82 88
88 89
88 90
90 91
91 92
88 93
93 94
93 95
95 96
96 97
93 98
98 99
99 100
2 101
101 102
102 103
102 104
104 105
105 106
102 107
107 108
108 109
109 110
108 111
111 112
112 113
113 114
2 115
115 116
116 117
117 118
116 119
119 120
120 121
121 122
0 123
123 124
0 125
125 126
126 127
126 128
128 129
126 130
130 131
125 132
132 133
132 134
134 135
132 136
136 137
137 138
125 139
139 140
139 141
141 142
139 143
143 144
144 145
0 146
146 147
147 148
148 149

Construct and load an Annoy index of a specific type (euclidean / angular).
