59
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='emitLWZ'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='asm'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='reg'
14 argument (BinaryExpr)
15 operator='MINUS'
16 left (BinaryExpr)
17 operator='PLUS'
18 left (NameExpr)
19 name (SimpleName)
20 identifier='spTopOffset'
21 right (NameExpr)
22 name (SimpleName)
23 identifier='BYTES_IN_STACKSLOT'
24 right (NameExpr)
25 name (SimpleName)
26 identifier='BYTES_IN_INT'
27 argument (NameExpr)
28 name (SimpleName)
29 identifier='FP'
30 statement (ExpressionStmt)
31 expression (MethodCallExpr)
32 name (SimpleName)
33 identifier='emitEXTSB'
34 scope (NameExpr)
35 name (SimpleName)
36 identifier='asm'
37 arguments
38 argument (NameExpr)
39 name (SimpleName)
40 identifier='reg'
41 argument (NameExpr)
42 name (SimpleName)
43 identifier='reg'
44 statement (ExpressionStmt)
45 expression (MethodCallExpr)
46 name (SimpleName)
47 identifier='discardSlot'
48 type (VoidType)
49 name (SimpleName)
50 identifier='popByteAsInt'
51 parameters
52 parameter (Parameter)
53 isVarArgs='false'
54 name (SimpleName)
55 identifier='reg'
56 type (ClassOrInterfaceType)
57 name (SimpleName)
58 identifier='GPR'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
10 14
14 15
14 16
16 17
16 18
18 19
19 20
16 21
21 22
22 23
14 24
24 25
25 26
10 27
27 28
28 29
2 30
30 31
31 32
32 33
31 34
34 35
35 36
31 37
37 38
38 39
39 40
37 41
41 42
42 43
2 44
44 45
45 46
46 47
0 48
0 49
49 50
0 51
51 52
52 53
52 54
54 55
52 56
56 57
57 58

Emit the code to pop a byte value from the expression stack into the register 'reg' as an int.
