70
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (FieldAccessExpr)
8 name (SimpleName)
9 identifier='length'
10 scope (FieldAccessExpr)
11 name (SimpleName)
12 identifier='word'
13 scope (NameExpr)
14 name (SimpleName)
15 identifier='bv'
16 name (SimpleName)
17 identifier='len'
18 type (PrimitiveType)
19 type='INT'
20 statement (ExpressionStmt)
21 expression (AssignExpr)
22 operator='ASSIGN'
23 target (FieldAccessExpr)
24 name (SimpleName)
25 identifier='word'
26 scope (ThisExpr)
27 value (ArrayCreationExpr)
28 elementType (PrimitiveType)
29 type='LONG'
30 levels
31 level (ArrayCreationLevel)
32 dimension (NameExpr)
33 name (SimpleName)
34 identifier='len'
35 statement (ExpressionStmt)
36 expression (MethodCallExpr)
37 name (SimpleName)
38 identifier='arraycopy'
39 scope (NameExpr)
40 name (SimpleName)
41 identifier='System'
42 arguments
43 argument (FieldAccessExpr)
44 name (SimpleName)
45 identifier='word'
46 scope (NameExpr)
47 name (SimpleName)
48 identifier='bv'
49 argument (IntegerLiteralExpr)
50 value='0'
51 argument (FieldAccessExpr)
52 name (SimpleName)
53 identifier='word'
54 scope (ThisExpr)
55 argument (IntegerLiteralExpr)
56 value='0'
57 argument (NameExpr)
58 name (SimpleName)
59 identifier='len'
60 name (SimpleName)
61 identifier='BitVector'
62 parameters
63 parameter (Parameter)
64 isVarArgs='false'
65 name (SimpleName)
66 identifier='bv'
67 type (ClassOrInterfaceType)
68 name (SimpleName)
69 identifier='BitVector'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
10 13
13 14
14 15
6 16
16 17
6 18
18 19
2 20
20 21
21 22
21 23
23 24
24 25
23 26
21 27
27 28
28 29
27 30
30 31
31 32
32 33
33 34
2 35
35 36
36 37
37 38
36 39
39 40
40 41
36 42
42 43
43 44
44 45
43 46
46 47
47 48
42 49
49 50
42 51
51 52
52 53
51 54
42 55
55 56
42 57
57 58
58 59
0 60
60 61
0 62
62 63
63 64
63 65
65 66
63 67
67 68
68 69

Initialize this bit vector to be a copy of <code>bv</code>.
