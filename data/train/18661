71
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='preMessageArrived'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='msg'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='which'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='reset'
18 scope (NameExpr)
19 name (SimpleName)
20 identifier='msg'
21 statement (ExpressionStmt)
22 expression (MethodCallExpr)
23 name (SimpleName)
24 identifier='messageArrived'
25 scope (NameExpr)
26 name (SimpleName)
27 identifier='m_manager'
28 arguments
29 argument (NameExpr)
30 name (SimpleName)
31 identifier='msg'
32 argument (NameExpr)
33 name (SimpleName)
34 identifier='which'
35 statement (ExpressionStmt)
36 expression (MethodCallExpr)
37 name (SimpleName)
38 identifier='reset'
39 scope (NameExpr)
40 name (SimpleName)
41 identifier='msg'
42 statement (ExpressionStmt)
43 expression (MethodCallExpr)
44 name (SimpleName)
45 identifier='postMessageArrived'
46 arguments
47 argument (NameExpr)
48 name (SimpleName)
49 identifier='msg'
50 argument (NameExpr)
51 name (SimpleName)
52 identifier='which'
53 type (VoidType)
54 name (SimpleName)
55 identifier='messageArrived'
56 parameters
57 parameter (Parameter)
58 isVarArgs='false'
59 name (SimpleName)
60 identifier='msg'
61 type (ClassOrInterfaceType)
62 name (SimpleName)
63 identifier='DMessage'
64 parameter (Parameter)
65 isVarArgs='false'
66 name (SimpleName)
67 identifier='which'
68 type (ClassOrInterfaceType)
69 name (SimpleName)
70 identifier='DProtocol'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
2 21
21 22
22 23
23 24
22 25
25 26
26 27
22 28
28 29
29 30
30 31
28 32
32 33
33 34
2 35
35 36
36 37
37 38
36 39
39 40
40 41
2 42
42 43
43 44
44 45
43 46
46 47
47 48
48 49
46 50
50 51
51 52
0 53
0 54
54 55
0 56
56 57
57 58
57 59
59 60
57 61
61 62
62 63
56 64
64 65
64 66
66 67
64 68
68 69
69 70

This is the core routine for decoding incoming messages and deciding what should be done with them.  We have registered ourself with DProtocol to be notified when any incoming messages have been received. It is important to note that we should not rely on the contents of the message since it may be reused after we exit this method.
