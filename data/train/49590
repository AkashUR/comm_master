95
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ArrayAccessExpr)
8 index (IntegerLiteralExpr)
9 value='0'
10 name (NameExpr)
11 name (SimpleName)
12 identifier='l'
13 name (SimpleName)
14 identifier='img'
15 type (ClassOrInterfaceType)
16 name (SimpleName)
17 identifier='FloatArray2D'
18 statement (ExpressionStmt)
19 expression (AssignExpr)
20 operator='ASSIGN'
21 target (NameExpr)
22 name (SimpleName)
23 identifier='l'
24 value (ArrayCreationExpr)
25 elementType (ClassOrInterfaceType)
26 name (SimpleName)
27 identifier='FloatArray2D'
28 levels
29 level (ArrayCreationLevel)
30 dimension (IntegerLiteralExpr)
31 value='2'
32 statement (ExpressionStmt)
33 expression (AssignExpr)
34 operator='ASSIGN'
35 target (ArrayAccessExpr)
36 index (IntegerLiteralExpr)
37 value='0'
38 name (NameExpr)
39 name (SimpleName)
40 identifier='l'
41 value (NameExpr)
42 name (SimpleName)
43 identifier='img'
44 statement (ExpressionStmt)
45 expression (AssignExpr)
46 operator='ASSIGN'
47 target (ArrayAccessExpr)
48 index (IntegerLiteralExpr)
49 value='1'
50 name (NameExpr)
51 name (SimpleName)
52 identifier='l'
53 value (MethodCallExpr)
54 name (SimpleName)
55 identifier='convolveSeparable'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='Filter'
59 arguments
60 argument (ArrayAccessExpr)
61 index (IntegerLiteralExpr)
62 value='0'
63 name (NameExpr)
64 name (SimpleName)
65 identifier='l'
66 argument (ArrayAccessExpr)
67 index (NameExpr)
68 name (SimpleName)
69 identifier='STEPS'
70 name (NameExpr)
71 name (SimpleName)
72 identifier='KERNEL_DIFF'
73 argument (ArrayAccessExpr)
74 index (NameExpr)
75 name (SimpleName)
76 identifier='STEPS'
77 name (NameExpr)
78 name (SimpleName)
79 identifier='KERNEL_DIFF'
80 statement (ExpressionStmt)
81 expression (AssignExpr)
82 operator='ASSIGN'
83 target (NameExpr)
84 name (SimpleName)
85 identifier='state'
86 value (FieldAccessExpr)
87 name (SimpleName)
88 identifier='STUB'
89 scope (NameExpr)
90 name (SimpleName)
91 identifier='State'
92 type (VoidType)
93 name (SimpleName)
94 identifier='buildStub'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
6 13
13 14
6 15
15 16
16 17
2 18
18 19
19 20
19 21
21 22
22 23
19 24
24 25
25 26
26 27
24 28
28 29
29 30
30 31
2 32
32 33
33 34
33 35
35 36
36 37
35 38
38 39
39 40
33 41
41 42
42 43
2 44
44 45
45 46
45 47
47 48
48 49
47 50
50 51
51 52
45 53
53 54
54 55
53 56
56 57
57 58
53 59
59 60
60 61
61 62
60 63
63 64
64 65
59 66
66 67
67 68
68 69
66 70
70 71
71 72
59 73
73 74
74 75
75 76
73 77
77 78
78 79
2 80
80 81
81 82
81 83
83 84
84 85
81 86
86 87
87 88
86 89
89 90
90 91
0 92
0 93
93 94

build only the gaussian image with 2 * INITIAL_SIGMA <p/> Use this method for the partial creation of an octaved scale space without creating each scale octave.  Like proposed by Lowe \citep{Lowe04}, you can use this image to build the next scale octave. Taking every second pixel of this image, you get a gaussian  image with INITIAL_SIGMA of the half image size.
