130
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='ObjectMapper'
11 name (SimpleName)
12 identifier='m'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='ObjectMapper'
16 statement (ExpressionStmt)
17 expression (MethodCallExpr)
18 name (SimpleName)
19 identifier='enableDefaultTyping'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='m'
23 arguments
24 argument (FieldAccessExpr)
25 name (SimpleName)
26 identifier='OBJECT_AND_NON_CONCRETE'
27 scope (FieldAccessExpr)
28 name (SimpleName)
29 identifier='DefaultTyping'
30 scope (NameExpr)
31 name (SimpleName)
32 identifier='ObjectMapper'
33 statement (ExpressionStmt)
34 expression (VariableDeclarationExpr)
35 variables
36 variable (VariableDeclarator)
37 initializer (ObjectCreationExpr)
38 type (ClassOrInterfaceType)
39 name (SimpleName)
40 identifier='StringBean'
41 arguments
42 argument (StringLiteralExpr)
43 value='x'
44 name (SimpleName)
45 identifier='bean'
46 type (ClassOrInterfaceType)
47 name (SimpleName)
48 identifier='StringBean'
49 statement (ExpressionStmt)
50 expression (MethodCallExpr)
51 name (SimpleName)
52 identifier='assertEquals'
53 arguments
54 argument (StringLiteralExpr)
55 value='{\"name\":\"x\"}'
56 argument (MethodCallExpr)
57 name (SimpleName)
58 identifier='writeValueAsString'
59 scope (NameExpr)
60 name (SimpleName)
61 identifier='m'
62 arguments
63 argument (NameExpr)
64 name (SimpleName)
65 identifier='bean'
66 statement (ExpressionStmt)
67 expression (AssignExpr)
68 operator='ASSIGN'
69 target (NameExpr)
70 name (SimpleName)
71 identifier='m'
72 value (ObjectCreationExpr)
73 type (ClassOrInterfaceType)
74 name (SimpleName)
75 identifier='ObjectMapper'
76 statement (ExpressionStmt)
77 expression (MethodCallExpr)
78 name (SimpleName)
79 identifier='enableDefaultTyping'
80 scope (NameExpr)
81 name (SimpleName)
82 identifier='m'
83 arguments
84 argument (FieldAccessExpr)
85 name (SimpleName)
86 identifier='NON_FINAL'
87 scope (FieldAccessExpr)
88 name (SimpleName)
89 identifier='DefaultTyping'
90 scope (NameExpr)
91 name (SimpleName)
92 identifier='ObjectMapper'
93 statement (ExpressionStmt)
94 expression (MethodCallExpr)
95 name (SimpleName)
96 identifier='assertEquals'
97 arguments
98 argument (BinaryExpr)
99 operator='PLUS'
100 left (BinaryExpr)
101 operator='PLUS'
102 left (StringLiteralExpr)
103 value='[\"'
104 right (MethodCallExpr)
105 name (SimpleName)
106 identifier='getName'
107 scope (ClassExpr)
108 type (ClassOrInterfaceType)
109 name (SimpleName)
110 identifier='StringBean'
111 right (StringLiteralExpr)
112 value='\",{\"name\":\"x\"}]'
113 argument (MethodCallExpr)
114 name (SimpleName)
115 identifier='writeValueAsString'
116 scope (NameExpr)
117 name (SimpleName)
118 identifier='m'
119 arguments
120 argument (NameExpr)
121 name (SimpleName)
122 identifier='bean'
123 type (VoidType)
124 name (SimpleName)
125 identifier='testNonFinalBean'
126 thrownExceptions
127 thrownException (ClassOrInterfaceType)
128 name (SimpleName)
129 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
17 20
20 21
21 22
17 23
23 24
24 25
25 26
24 27
27 28
28 29
27 30
30 31
31 32
2 33
33 34
34 35
35 36
36 37
37 38
38 39
39 40
37 41
41 42
42 43
36 44
44 45
36 46
46 47
47 48
2 49
49 50
50 51
51 52
50 53
53 54
54 55
53 56
56 57
57 58
56 59
59 60
60 61
56 62
62 63
63 64
64 65
2 66
66 67
67 68
67 69
69 70
70 71
67 72
72 73
73 74
74 75
2 76
76 77
77 78
78 79
77 80
80 81
81 82
77 83
83 84
84 85
85 86
84 87
87 88
88 89
87 90
90 91
91 92
2 93
93 94
94 95
95 96
94 97
97 98
98 99
98 100
100 101
100 102
102 103
100 104
104 105
105 106
104 107
107 108
108 109
109 110
98 111
111 112
97 113
113 114
114 115
113 116
116 117
117 118
113 119
119 120
120 121
121 122
0 123
0 124
124 125
0 126
126 127
127 128
128 129

Unit test to verify that type information is included for all non-final types, if default typing suitably configured
