82
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='info'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='logger'
10 arguments
11 argument (StringLiteralExpr)
12 value='> fixedDelayJob'
13 statement (ExpressionStmt)
14 expression (MethodCallExpr)
15 name (SimpleName)
16 identifier='increment'
17 scope (NameExpr)
18 name (SimpleName)
19 identifier='counterService'
20 arguments
21 argument (StringLiteralExpr)
22 value='method.invoked.greetingBatchBean.fixedDelayJob'
23 statement (ExpressionStmt)
24 expression (VariableDeclarationExpr)
25 variables
26 variable (VariableDeclarator)
27 initializer (MethodCallExpr)
28 name (SimpleName)
29 identifier='findAll'
30 scope (NameExpr)
31 name (SimpleName)
32 identifier='greetingService'
33 name (SimpleName)
34 identifier='greetings'
35 type (ClassOrInterfaceType)
36 name (SimpleName)
37 identifier='Collection'
38 typeArguments
39 typeArgument (ClassOrInterfaceType)
40 name (SimpleName)
41 identifier='Greeting'
42 statement (ExpressionStmt)
43 expression (MethodCallExpr)
44 name (SimpleName)
45 identifier='info'
46 scope (NameExpr)
47 name (SimpleName)
48 identifier='logger'
49 arguments
50 argument (NameExpr)
51 name (SimpleName)
52 identifier='MESSAGE_FORMAT'
53 argument (MethodCallExpr)
54 name (SimpleName)
55 identifier='size'
56 scope (NameExpr)
57 name (SimpleName)
58 identifier='greetings'
59 statement (ExpressionStmt)
60 expression (MethodCallExpr)
61 name (SimpleName)
62 identifier='info'
63 scope (NameExpr)
64 name (SimpleName)
65 identifier='logger'
66 arguments
67 argument (StringLiteralExpr)
68 value='< fixedDelayJob'
69 type (VoidType)
70 name (SimpleName)
71 identifier='fixedDelayJob'
72 annotations
73 annotation (NormalAnnotationExpr)
74 name (Name)
75 identifier='Scheduled'
76 pairs
77 pair (MemberValuePair)
78 name (SimpleName)
79 identifier='fixedDelayString'
80 value (StringLiteralExpr)
81 value='${batch.greeting.fixeddelay}'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
2 13
13 14
14 15
15 16
14 17
17 18
18 19
14 20
20 21
21 22
2 23
23 24
24 25
25 26
26 27
27 28
28 29
27 30
30 31
31 32
26 33
33 34
26 35
35 36
36 37
35 38
38 39
39 40
40 41
2 42
42 43
43 44
44 45
43 46
46 47
47 48
43 49
49 50
50 51
51 52
49 53
53 54
54 55
53 56
56 57
57 58
2 59
59 60
60 61
61 62
60 63
63 64
64 65
60 66
66 67
67 68
0 69
0 70
70 71
0 72
72 73
73 74
74 75
73 76
76 77
77 78
78 79
77 80
80 81

Execute logic with a delay between the end of the last execution and the beginning of the next. Use the <code>fixedDelay</code> element to indicate the time to wait between executions.
