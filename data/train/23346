60
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='setBit'
10 scope (MethodCallExpr)
11 name (SimpleName)
12 identifier='valueOf'
13 scope (NameExpr)
14 name (SimpleName)
15 identifier='BigInteger'
16 arguments
17 argument (LongLiteralExpr)
18 value='0L'
19 arguments
20 argument (IntegerLiteralExpr)
21 value='191'
22 name (SimpleName)
23 identifier='result'
24 type (ClassOrInterfaceType)
25 name (SimpleName)
26 identifier='BigInteger'
27 statement (ExpressionStmt)
28 expression (MethodCallExpr)
29 name (SimpleName)
30 identifier='assertEquals'
31 arguments
32 argument (StringLiteralExpr)
33 value='incorrect value'
34 argument (StringLiteralExpr)
35 value='3138550867693340381917894711603833208051177722232017256448'
36 argument (MethodCallExpr)
37 name (SimpleName)
38 identifier='toString'
39 scope (NameExpr)
40 name (SimpleName)
41 identifier='result'
42 statement (ExpressionStmt)
43 expression (MethodCallExpr)
44 name (SimpleName)
45 identifier='assertEquals'
46 arguments
47 argument (StringLiteralExpr)
48 value='incorrect sign'
49 argument (IntegerLiteralExpr)
50 value='1'
51 argument (MethodCallExpr)
52 name (SimpleName)
53 identifier='signum'
54 scope (NameExpr)
55 name (SimpleName)
56 identifier='result'
57 type (VoidType)
58 name (SimpleName)
59 identifier='testSetBitBug1331'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
10 13
13 14
14 15
10 16
16 17
17 18
7 19
19 20
20 21
6 22
22 23
6 24
24 25
25 26
2 27
27 28
28 29
29 30
28 31
31 32
32 33
31 34
34 35
31 36
36 37
37 38
36 39
39 40
40 41
2 42
42 43
43 44
44 45
43 46
46 47
47 48
46 49
49 50
46 51
51 52
52 53
51 54
54 55
55 56
0 57
0 58
58 59

setBit: check the case when the number of bit to be set can be represented as n * 32 + 31, where n is an arbitrary integer. Here 191 = 5 * 32 + 31
