247
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='File'
11 arguments
12 argument (StringLiteralExpr)
13 value='no-file.cfg'
14 name (SimpleName)
15 identifier='f'
16 type (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='File'
19 statement (ExpressionStmt)
20 expression (MethodCallExpr)
21 name (SimpleName)
22 identifier='println'
23 scope (FieldAccessExpr)
24 name (SimpleName)
25 identifier='out'
26 scope (NameExpr)
27 name (SimpleName)
28 identifier='ToolIO'
29 arguments
30 argument (BinaryExpr)
31 operator='PLUS'
32 left (StringLiteralExpr)
33 value='no-file.canRead() = '
34 right (MethodCallExpr)
35 name (SimpleName)
36 identifier='canRead'
37 scope (NameExpr)
38 name (SimpleName)
39 identifier='f'
40 statement (ExpressionStmt)
41 expression (MethodCallExpr)
42 name (SimpleName)
43 identifier='println'
44 scope (FieldAccessExpr)
45 name (SimpleName)
46 identifier='out'
47 scope (NameExpr)
48 name (SimpleName)
49 identifier='ToolIO'
50 arguments
51 argument (BinaryExpr)
52 operator='PLUS'
53 left (StringLiteralExpr)
54 value='no-file.canWrite() = '
55 right (MethodCallExpr)
56 name (SimpleName)
57 identifier='canWrite'
58 scope (NameExpr)
59 name (SimpleName)
60 identifier='f'
61 statement (ExpressionStmt)
62 expression (MethodCallExpr)
63 name (SimpleName)
64 identifier='println'
65 scope (FieldAccessExpr)
66 name (SimpleName)
67 identifier='out'
68 scope (NameExpr)
69 name (SimpleName)
70 identifier='ToolIO'
71 arguments
72 argument (BinaryExpr)
73 operator='PLUS'
74 left (StringLiteralExpr)
75 value='no-file.exists() = '
76 right (MethodCallExpr)
77 name (SimpleName)
78 identifier='exists'
79 scope (NameExpr)
80 name (SimpleName)
81 identifier='f'
82 statement (ExpressionStmt)
83 expression (AssignExpr)
84 operator='ASSIGN'
85 target (NameExpr)
86 name (SimpleName)
87 identifier='f'
88 value (ObjectCreationExpr)
89 type (ClassOrInterfaceType)
90 name (SimpleName)
91 identifier='File'
92 arguments
93 argument (StringLiteralExpr)
94 value='read-only.cfg'
95 statement (ExpressionStmt)
96 expression (MethodCallExpr)
97 name (SimpleName)
98 identifier='println'
99 scope (FieldAccessExpr)
100 name (SimpleName)
101 identifier='out'
102 scope (NameExpr)
103 name (SimpleName)
104 identifier='ToolIO'
105 arguments
106 argument (BinaryExpr)
107 operator='PLUS'
108 left (StringLiteralExpr)
109 value='read-only.canRead() = '
110 right (MethodCallExpr)
111 name (SimpleName)
112 identifier='canRead'
113 scope (NameExpr)
114 name (SimpleName)
115 identifier='f'
116 statement (ExpressionStmt)
117 expression (MethodCallExpr)
118 name (SimpleName)
119 identifier='println'
120 scope (FieldAccessExpr)
121 name (SimpleName)
122 identifier='out'
123 scope (NameExpr)
124 name (SimpleName)
125 identifier='ToolIO'
126 arguments
127 argument (BinaryExpr)
128 operator='PLUS'
129 left (StringLiteralExpr)
130 value='read-only.canWrite() = '
131 right (MethodCallExpr)
132 name (SimpleName)
133 identifier='canWrite'
134 scope (NameExpr)
135 name (SimpleName)
136 identifier='f'
137 statement (ExpressionStmt)
138 expression (MethodCallExpr)
139 name (SimpleName)
140 identifier='println'
141 scope (FieldAccessExpr)
142 name (SimpleName)
143 identifier='out'
144 scope (NameExpr)
145 name (SimpleName)
146 identifier='ToolIO'
147 arguments
148 argument (BinaryExpr)
149 operator='PLUS'
150 left (StringLiteralExpr)
151 value='read-only.exists() = '
152 right (MethodCallExpr)
153 name (SimpleName)
154 identifier='exists'
155 scope (NameExpr)
156 name (SimpleName)
157 identifier='f'
158 statement (ExpressionStmt)
159 expression (AssignExpr)
160 operator='ASSIGN'
161 target (NameExpr)
162 name (SimpleName)
163 identifier='f'
164 value (ObjectCreationExpr)
165 type (ClassOrInterfaceType)
166 name (SimpleName)
167 identifier='File'
168 arguments
169 argument (StringLiteralExpr)
170 value='Bakery.cfg'
171 statement (ExpressionStmt)
172 expression (MethodCallExpr)
173 name (SimpleName)
174 identifier='println'
175 scope (FieldAccessExpr)
176 name (SimpleName)
177 identifier='out'
178 scope (NameExpr)
179 name (SimpleName)
180 identifier='ToolIO'
181 arguments
182 argument (BinaryExpr)
183 operator='PLUS'
184 left (StringLiteralExpr)
185 value='Bakery.canRead() = '
186 right (MethodCallExpr)
187 name (SimpleName)
188 identifier='canRead'
189 scope (NameExpr)
190 name (SimpleName)
191 identifier='f'
192 statement (ExpressionStmt)
193 expression (MethodCallExpr)
194 name (SimpleName)
195 identifier='println'
196 scope (FieldAccessExpr)
197 name (SimpleName)
198 identifier='out'
199 scope (NameExpr)
200 name (SimpleName)
201 identifier='ToolIO'
202 arguments
203 argument (BinaryExpr)
204 operator='PLUS'
205 left (StringLiteralExpr)
206 value='Bakery.canWrite() = '
207 right (MethodCallExpr)
208 name (SimpleName)
209 identifier='canWrite'
210 scope (NameExpr)
211 name (SimpleName)
212 identifier='f'
213 statement (ExpressionStmt)
214 expression (MethodCallExpr)
215 name (SimpleName)
216 identifier='println'
217 scope (FieldAccessExpr)
218 name (SimpleName)
219 identifier='out'
220 scope (NameExpr)
221 name (SimpleName)
222 identifier='ToolIO'
223 arguments
224 argument (BinaryExpr)
225 operator='PLUS'
226 left (StringLiteralExpr)
227 value='Bakery.exists() = '
228 right (MethodCallExpr)
229 name (SimpleName)
230 identifier='exists'
231 scope (NameExpr)
232 name (SimpleName)
233 identifier='f'
234 type (VoidType)
235 name (SimpleName)
236 identifier='main'
237 parameters
238 parameter (Parameter)
239 isVarArgs='false'
240 name (SimpleName)
241 identifier='args'
242 type (ArrayType)
243 origin='TYPE'
244 componentType (ClassOrInterfaceType)
245 name (SimpleName)
246 identifier='String'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
6 14
14 15
6 16
16 17
17 18
2 19
19 20
20 21
21 22
20 23
23 24
24 25
23 26
26 27
27 28
20 29
29 30
30 31
30 32
32 33
30 34
34 35
35 36
34 37
37 38
38 39
2 40
40 41
41 42
42 43
41 44
44 45
45 46
44 47
47 48
48 49
41 50
50 51
51 52
51 53
53 54
51 55
55 56
56 57
55 58
58 59
59 60
2 61
61 62
62 63
63 64
62 65
65 66
66 67
65 68
68 69
69 70
62 71
71 72
72 73
72 74
74 75
72 76
76 77
77 78
76 79
79 80
80 81
2 82
82 83
83 84
83 85
85 86
86 87
83 88
88 89
89 90
90 91
88 92
92 93
93 94
2 95
95 96
96 97
97 98
96 99
99 100
100 101
99 102
102 103
103 104
96 105
105 106
106 107
106 108
108 109
106 110
110 111
111 112
110 113
113 114
114 115
2 116
116 117
117 118
118 119
117 120
120 121
121 122
120 123
123 124
124 125
117 126
126 127
127 128
127 129
129 130
127 131
131 132
132 133
131 134
134 135
135 136
2 137
137 138
138 139
139 140
138 141
141 142
142 143
141 144
144 145
145 146
138 147
147 148
148 149
148 150
150 151
148 152
152 153
153 154
152 155
155 156
156 157
2 158
158 159
159 160
159 161
161 162
162 163
159 164
164 165
165 166
166 167
164 168
168 169
169 170
2 171
171 172
172 173
173 174
172 175
175 176
176 177
175 178
178 179
179 180
172 181
181 182
182 183
182 184
184 185
182 186
186 187
187 188
186 189
189 190
190 191
2 192
192 193
193 194
194 195
193 196
196 197
197 198
196 199
199 200
200 201
193 202
202 203
203 204
203 205
205 206
203 207
207 208
208 209
207 210
210 211
211 212
2 213
213 214
214 215
215 216
214 217
217 218
218 219
217 220
220 221
221 222
214 223
223 224
224 225
224 226
226 227
224 228
228 229
229 230
228 231
231 232
232 233
0 234
0 235
235 236
0 237
237 238
238 239
238 240
240 241
238 242
242 243
242 244
244 245
245 246

The AST node for `when pc = "foo"'  should be produced by something like  Vector toks = new Vector() ;                                              * toks.addElement(IdentToken("pc")) ;                                   toks.addElement(BuiltInToken("=")) ;                                  toks.addElement(StringToken("foo")) ;                                 AST.When node = new AST.when() ;                                      node.exp = TokVectorToExpr(toks) ;                                    *
