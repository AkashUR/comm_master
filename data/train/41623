103
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='getStartOptions'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='args'
14 name (SimpleName)
15 identifier='options'
16 type (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='Map'
19 typeArguments
20 typeArgument (ClassOrInterfaceType)
21 name (SimpleName)
22 identifier='String'
23 typeArgument (ClassOrInterfaceType)
24 name (SimpleName)
25 identifier='Object'
26 statement (ExpressionStmt)
27 expression (AssignExpr)
28 operator='ASSIGN'
29 target (NameExpr)
30 name (SimpleName)
31 identifier='workingDirectory'
32 value (MethodCallExpr)
33 name (SimpleName)
34 identifier='tryGetCanonicalFileElseGetAbsoluteFile'
35 scope (NameExpr)
36 name (SimpleName)
37 identifier='IOUtils'
38 arguments
39 argument (CastExpr)
40 expression (MethodCallExpr)
41 name (SimpleName)
42 identifier='get'
43 scope (NameExpr)
44 name (SimpleName)
45 identifier='options'
46 arguments
47 argument (NameExpr)
48 name (SimpleName)
49 identifier='DIR'
50 type (ClassOrInterfaceType)
51 name (SimpleName)
52 identifier='File'
53 statement (ExpressionStmt)
54 expression (MethodCallExpr)
55 name (SimpleName)
56 identifier='verifyAndClearStatus'
57 statement (ExpressionStmt)
58 expression (MethodCallExpr)
59 name (SimpleName)
60 identifier='runCommandLine'
61 arguments
62 argument (NameExpr)
63 name (SimpleName)
64 identifier='options'
65 argument (MethodCallExpr)
66 name (SimpleName)
67 identifier='buildCommandLine'
68 arguments
69 argument (NameExpr)
70 name (SimpleName)
71 identifier='options'
72 statement (ExpressionStmt)
73 expression (MethodCallExpr)
74 name (SimpleName)
75 identifier='pollAgentUntilRunning'
76 statement (ExpressionStmt)
77 expression (MethodCallExpr)
78 name (SimpleName)
79 identifier='exit'
80 scope (NameExpr)
81 name (SimpleName)
82 identifier='System'
83 arguments
84 argument (IntegerLiteralExpr)
85 value='0'
86 type (VoidType)
87 name (SimpleName)
88 identifier='start'
89 parameters
90 parameter (Parameter)
91 isVarArgs='false'
92 name (SimpleName)
93 identifier='args'
94 type (ArrayType)
95 origin='TYPE'
96 componentType (ClassOrInterfaceType)
97 name (SimpleName)
98 identifier='String'
99 thrownExceptions
100 thrownException (ClassOrInterfaceType)
101 name (SimpleName)
102 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
12 13
6 14
14 15
6 16
16 17
17 18
16 19
19 20
20 21
21 22
19 23
23 24
24 25
2 26
26 27
27 28
27 29
29 30
30 31
27 32
32 33
33 34
32 35
35 36
36 37
32 38
38 39
39 40
40 41
41 42
40 43
43 44
44 45
40 46
46 47
47 48
48 49
39 50
50 51
51 52
2 53
53 54
54 55
55 56
2 57
57 58
58 59
59 60
58 61
61 62
62 63
63 64
61 65
65 66
66 67
65 68
68 69
69 70
70 71
2 72
72 73
73 74
74 75
2 76
76 77
77 78
78 79
77 80
80 81
81 82
77 83
83 84
84 85
0 86
0 87
87 88
0 89
89 90
90 91
90 92
92 93
90 94
94 95
94 96
96 97
97 98
0 99
99 100
100 101
101 102

After parsing the command line arguments, spawn the Java VM that will host the GemFire JMX Agent.
