90
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='check'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='Assert'
10 arguments
11 argument (BinaryExpr)
12 operator='EQUALS'
13 left (FieldAccessExpr)
14 name (SimpleName)
15 identifier='in'
16 scope (ThisExpr)
17 right (NullLiteralExpr)
18 argument (FieldAccessExpr)
19 name (SimpleName)
20 identifier='SYSTEM_STREAM_EMPTY'
21 scope (NameExpr)
22 name (SimpleName)
23 identifier='EC'
24 statement (ExpressionStmt)
25 expression (AssignExpr)
26 operator='ASSIGN'
27 target (FieldAccessExpr)
28 name (SimpleName)
29 identifier='in'
30 scope (ThisExpr)
31 value (NameExpr)
32 name (SimpleName)
33 identifier='is'
34 statement (ExpressionStmt)
35 expression (AssignExpr)
36 operator='ASSIGN'
37 target (FieldAccessExpr)
38 name (SimpleName)
39 identifier='len'
40 scope (ThisExpr)
41 value (MethodCallExpr)
42 name (SimpleName)
43 identifier='read'
44 scope (FieldAccessExpr)
45 name (SimpleName)
46 identifier='in'
47 scope (ThisExpr)
48 arguments
49 argument (FieldAccessExpr)
50 name (SimpleName)
51 identifier='buff'
52 scope (ThisExpr)
53 statement (ExpressionStmt)
54 expression (MethodCallExpr)
55 name (SimpleName)
56 identifier='check'
57 scope (NameExpr)
58 name (SimpleName)
59 identifier='Assert'
60 arguments
61 argument (BinaryExpr)
62 operator='NOT_EQUALS'
63 left (FieldAccessExpr)
64 name (SimpleName)
65 identifier='len'
66 scope (ThisExpr)
67 right (IntegerLiteralExpr)
68 value='0'
69 argument (FieldAccessExpr)
70 name (SimpleName)
71 identifier='SYSTEM_STREAM_EMPTY'
72 scope (NameExpr)
73 name (SimpleName)
74 identifier='EC'
75 type (VoidType)
76 name (SimpleName)
77 identifier='open'
78 parameters
79 parameter (Parameter)
80 isVarArgs='false'
81 name (SimpleName)
82 identifier='is'
83 type (ClassOrInterfaceType)
84 name (SimpleName)
85 identifier='InputStream'
86 thrownExceptions
87 thrownException (ClassOrInterfaceType)
88 name (SimpleName)
89 identifier='IOException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
11 13
13 14
14 15
13 16
11 17
10 18
18 19
19 20
18 21
21 22
22 23
2 24
24 25
25 26
25 27
27 28
28 29
27 30
25 31
31 32
32 33
2 34
34 35
35 36
35 37
37 38
38 39
37 40
35 41
41 42
42 43
41 44
44 45
45 46
44 47
41 48
48 49
49 50
50 51
49 52
2 53
53 54
54 55
55 56
54 57
57 58
58 59
54 60
60 61
61 62
61 63
63 64
64 65
63 66
61 67
67 68
60 69
69 70
70 71
69 72
72 73
73 74
0 75
0 76
76 77
0 78
78 79
79 80
79 81
81 82
79 83
83 84
84 85
0 86
86 87
87 88
88 89

Re-open this input stream on <code>is</code>. This method need not be called on a newly initialized stream, but it can be called after the stream has been closed to re-open the stream on a different underlying stream without requiring internal resources to be re-allocated.
