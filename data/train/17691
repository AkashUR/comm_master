46
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='write'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='source'
11 argument (MethodCallExpr)
12 name (SimpleName)
13 identifier='write'
14 scope (NameExpr)
15 name (SimpleName)
16 identifier='NodeBuilder'
17 arguments
18 argument (NameExpr)
19 name (SimpleName)
20 identifier='out'
21 argument (NameExpr)
22 name (SimpleName)
23 identifier='format'
24 type (VoidType)
25 name (SimpleName)
26 identifier='write'
27 parameters
28 parameter (Parameter)
29 isVarArgs='false'
30 name (SimpleName)
31 identifier='source'
32 type (ClassOrInterfaceType)
33 name (SimpleName)
34 identifier='Object'
35 parameter (Parameter)
36 isVarArgs='false'
37 name (SimpleName)
38 identifier='out'
39 type (ClassOrInterfaceType)
40 name (SimpleName)
41 identifier='Writer'
42 thrownExceptions
43 thrownException (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
11 14
14 15
15 16
11 17
17 18
18 19
19 20
17 21
21 22
22 23
0 24
0 25
25 26
0 27
27 28
28 29
28 30
30 31
28 32
32 33
33 34
27 35
35 36
35 37
37 38
35 39
39 40
40 41
0 42
42 43
43 44
44 45

This <code>write</code> method will traverse the provided object checking for field annotations in order to compose the XML data. This uses the <code>getClass</code> method on the object to determine the class file that will be used to compose the schema. If there is no <code>Root</code> annotation for the class then this will throw an exception. The root annotation is the only annotation required for an object to be serialized. 
