186
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (NameExpr)
7 name (SimpleName)
8 identifier='Debug'
9 value (BooleanLiteralExpr)
10 value='false'
11 statement (ExpressionStmt)
12 expression (AssignExpr)
13 operator='ASSIGN'
14 target (NameExpr)
15 name (SimpleName)
16 identifier='SpecOption'
17 value (BooleanLiteralExpr)
18 value='false'
19 statement (ExpressionStmt)
20 expression (AssignExpr)
21 operator='ASSIGN'
22 target (NameExpr)
23 name (SimpleName)
24 identifier='MyspecOption'
25 value (BooleanLiteralExpr)
26 value='false'
27 statement (ExpressionStmt)
28 expression (AssignExpr)
29 operator='ASSIGN'
30 target (NameExpr)
31 name (SimpleName)
32 identifier='Spec2Option'
33 value (BooleanLiteralExpr)
34 value='false'
35 statement (ExpressionStmt)
36 expression (AssignExpr)
37 operator='ASSIGN'
38 target (NameExpr)
39 name (SimpleName)
40 identifier='Myspec2Option'
41 value (BooleanLiteralExpr)
42 value='false'
43 statement (ExpressionStmt)
44 expression (AssignExpr)
45 operator='ASSIGN'
46 target (NameExpr)
47 name (SimpleName)
48 identifier='SpecFile'
49 value (StringLiteralExpr)
50 value=''
51 statement (ExpressionStmt)
52 expression (AssignExpr)
53 operator='ASSIGN'
54 target (NameExpr)
55 name (SimpleName)
56 identifier='WriteASTFlag'
57 value (BooleanLiteralExpr)
58 value='false'
59 statement (ExpressionStmt)
60 expression (AssignExpr)
61 operator='ASSIGN'
62 target (NameExpr)
63 name (SimpleName)
64 identifier='LabelFlag'
65 value (BooleanLiteralExpr)
66 value='false'
67 statement (ExpressionStmt)
68 expression (AssignExpr)
69 operator='ASSIGN'
70 target (NameExpr)
71 name (SimpleName)
72 identifier='ReportLabelsFlag'
73 value (BooleanLiteralExpr)
74 value='false'
75 statement (ExpressionStmt)
76 expression (AssignExpr)
77 operator='ASSIGN'
78 target (NameExpr)
79 name (SimpleName)
80 identifier='LabelRoot'
81 value (StringLiteralExpr)
82 value='Lbl_'
83 statement (ExpressionStmt)
84 expression (AssignExpr)
85 operator='ASSIGN'
86 target (NameExpr)
87 name (SimpleName)
88 identifier='FairnessOption'
89 value (StringLiteralExpr)
90 value=''
91 statement (ExpressionStmt)
92 expression (AssignExpr)
93 operator='ASSIGN'
94 target (NameExpr)
95 name (SimpleName)
96 identifier='FairAlgorithm'
97 value (BooleanLiteralExpr)
98 value='false'
99 statement (ExpressionStmt)
100 expression (AssignExpr)
101 operator='ASSIGN'
102 target (NameExpr)
103 name (SimpleName)
104 identifier='CheckTermination'
105 value (BooleanLiteralExpr)
106 value='false'
107 statement (ExpressionStmt)
108 expression (AssignExpr)
109 operator='ASSIGN'
110 target (NameExpr)
111 name (SimpleName)
112 identifier='Nocfg'
113 value (BooleanLiteralExpr)
114 value='false'
115 statement (ExpressionStmt)
116 expression (AssignExpr)
117 operator='ASSIGN'
118 target (NameExpr)
119 name (SimpleName)
120 identifier='NoDoneDisjunct'
121 value (BooleanLiteralExpr)
122 value='false'
123 statement (ExpressionStmt)
124 expression (AssignExpr)
125 operator='ASSIGN'
126 target (NameExpr)
127 name (SimpleName)
128 identifier='optionsInFile'
129 value (BooleanLiteralExpr)
130 value='false'
131 statement (ExpressionStmt)
132 expression (AssignExpr)
133 operator='ASSIGN'
134 target (NameExpr)
135 name (SimpleName)
136 identifier='versionOption'
137 value (NullLiteralExpr)
138 statement (ExpressionStmt)
139 expression (AssignExpr)
140 operator='ASSIGN'
141 target (NameExpr)
142 name (SimpleName)
143 identifier='inputVersionNumber'
144 value (MethodCallExpr)
145 name (SimpleName)
146 identifier='VersionToNumber'
147 arguments
148 argument (FieldAccessExpr)
149 name (SimpleName)
150 identifier='version'
151 scope (NameExpr)
152 name (SimpleName)
153 identifier='PcalParams'
154 statement (ExpressionStmt)
155 expression (AssignExpr)
156 operator='ASSIGN'
157 target (FieldAccessExpr)
158 name (SimpleName)
159 identifier='wrapColumn'
160 scope (NameExpr)
161 name (SimpleName)
162 identifier='PcalTLAGen'
163 value (IntegerLiteralExpr)
164 value='78'
165 statement (ExpressionStmt)
166 expression (AssignExpr)
167 operator='ASSIGN'
168 target (FieldAccessExpr)
169 name (SimpleName)
170 identifier='ssWrapColumn'
171 scope (NameExpr)
172 name (SimpleName)
173 identifier='PcalTLAGen'
174 value (IntegerLiteralExpr)
175 value='45'
176 statement (ExpressionStmt)
177 expression (AssignExpr)
178 operator='ASSIGN'
179 target (NameExpr)
180 name (SimpleName)
181 identifier='tlaPcalMapping'
182 value (NullLiteralExpr)
183 type (VoidType)
184 name (SimpleName)
185 identifier='resetParams'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
9 10
2 11
11 12
12 13
12 14
14 15
15 16
12 17
17 18
2 19
19 20
20 21
20 22
22 23
23 24
20 25
25 26
2 27
27 28
28 29
28 30
30 31
31 32
28 33
33 34
2 35
35 36
36 37
36 38
38 39
39 40
36 41
41 42
2 43
43 44
44 45
44 46
46 47
47 48
44 49
49 50
2 51
51 52
52 53
52 54
54 55
55 56
52 57
57 58
2 59
59 60
60 61
60 62
62 63
63 64
60 65
65 66
2 67
67 68
68 69
68 70
70 71
71 72
68 73
73 74
2 75
75 76
76 77
76 78
78 79
79 80
76 81
81 82
2 83
83 84
84 85
84 86
86 87
87 88
84 89
89 90
2 91
91 92
92 93
92 94
94 95
95 96
92 97
97 98
2 99
99 100
100 101
100 102
102 103
103 104
100 105
105 106
2 107
107 108
108 109
108 110
110 111
111 112
108 113
113 114
2 115
115 116
116 117
116 118
118 119
119 120
116 121
121 122
2 123
123 124
124 125
124 126
126 127
127 128
124 129
129 130
2 131
131 132
132 133
132 134
134 135
135 136
132 137
2 138
138 139
139 140
139 141
141 142
142 143
139 144
144 145
145 146
144 147
147 148
148 149
149 150
148 151
151 152
152 153
2 154
154 155
155 156
155 157
157 158
158 159
157 160
160 161
161 162
155 163
163 164
2 165
165 166
166 167
166 168
168 169
169 170
168 171
171 172
172 173
166 174
174 175
2 176
176 177
177 178
177 179
179 180
180 181
177 182
0 183
0 184
184 185

SZ Mar 9, 2009: Added re-initialization method. Since PcalParams class is used instead of PcalParams instance, it is required to take care of parameter initialization and de-initialization by explicit method. This is required in order to make PCal instance reentrant.  Maybe at some point in time this should be converted to an ordinary configuration object, from the collection of public static variables.
