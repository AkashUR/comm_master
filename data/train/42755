117
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='iterator'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='EXTENSIONS_FQN'
13 name (SimpleName)
14 identifier='entryIterator'
15 type (ClassOrInterfaceType)
16 name (SimpleName)
17 identifier='Iterator'
18 typeArguments
19 typeArgument (ClassOrInterfaceType)
20 name (SimpleName)
21 identifier='String'
22 statement (WhileStmt)
23 body (BlockStmt)
24 statements
25 statement (ExpressionStmt)
26 expression (VariableDeclarationExpr)
27 variables
28 variable (VariableDeclarator)
29 initializer (MethodCallExpr)
30 name (SimpleName)
31 identifier='next'
32 scope (NameExpr)
33 name (SimpleName)
34 identifier='entryIterator'
35 name (SimpleName)
36 identifier='ginModuleFQN'
37 type (ClassOrInterfaceType)
38 name (SimpleName)
39 identifier='String'
40 statement (ExpressionStmt)
41 expression (VariableDeclarationExpr)
42 variables
43 variable (VariableDeclarator)
44 initializer (ConditionalExpr)
45 condition (MethodCallExpr)
46 name (SimpleName)
47 identifier='hasNext'
48 scope (NameExpr)
49 name (SimpleName)
50 identifier='entryIterator'
51 elseExpr (StringLiteralExpr)
52 value=''
53 thenExpr (StringLiteralExpr)
54 value=','
55 name (SimpleName)
56 identifier='hasComma'
57 type (ClassOrInterfaceType)
58 name (SimpleName)
59 identifier='String'
60 statement (ExpressionStmt)
61 expression (MethodCallExpr)
62 name (SimpleName)
63 identifier='append'
64 scope (MethodCallExpr)
65 name (SimpleName)
66 identifier='append'
67 scope (MethodCallExpr)
68 name (SimpleName)
69 identifier='append'
70 scope (MethodCallExpr)
71 name (SimpleName)
72 identifier='append'
73 scope (MethodCallExpr)
74 name (SimpleName)
75 identifier='append'
76 scope (NameExpr)
77 name (SimpleName)
78 identifier='builder'
79 arguments
80 argument (FieldAccessExpr)
81 name (SimpleName)
82 identifier='TAB'
83 scope (NameExpr)
84 name (SimpleName)
85 identifier='GeneratorUtils'
86 arguments
87 argument (NameExpr)
88 name (SimpleName)
89 identifier='ginModuleFQN'
90 arguments
91 argument (StringLiteralExpr)
92 value='.class '
93 arguments
94 argument (NameExpr)
95 name (SimpleName)
96 identifier='hasComma'
97 arguments
98 argument (StringLiteralExpr)
99 value='\n'
100 condition (MethodCallExpr)
101 name (SimpleName)
102 identifier='hasNext'
103 scope (NameExpr)
104 name (SimpleName)
105 identifier='entryIterator'
106 type (VoidType)
107 name (SimpleName)
108 identifier='generateListOfModules'
109 parameters
110 parameter (Parameter)
111 isVarArgs='false'
112 name (SimpleName)
113 identifier='builder'
114 type (ClassOrInterfaceType)
115 name (SimpleName)
116 identifier='StringBuilder'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
6 13
13 14
6 15
15 16
16 17
15 18
18 19
19 20
20 21
2 22
22 23
23 24
24 25
25 26
26 27
27 28
28 29
29 30
30 31
29 32
32 33
33 34
28 35
35 36
28 37
37 38
38 39
24 40
40 41
41 42
42 43
43 44
44 45
45 46
46 47
45 48
48 49
49 50
44 51
51 52
44 53
53 54
43 55
55 56
43 57
57 58
58 59
24 60
60 61
61 62
62 63
61 64
64 65
65 66
64 67
67 68
68 69
67 70
70 71
71 72
70 73
73 74
74 75
73 76
76 77
77 78
73 79
79 80
80 81
81 82
80 83
83 84
84 85
70 86
86 87
87 88
88 89
67 90
90 91
91 92
64 93
93 94
94 95
95 96
61 97
97 98
98 99
22 100
100 101
101 102
100 103
103 104
104 105
0 106
0 107
107 108
0 109
109 110
110 111
110 112
112 113
110 114
114 115
115 116

Generate codeblock with all the GinModules
