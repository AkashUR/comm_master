72
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (FieldAccessExpr)
7 name (SimpleName)
8 identifier='baseTimestamp'
9 scope (ThisExpr)
10 value (NameExpr)
11 name (SimpleName)
12 identifier='baseTimestamp'
13 statement (ExpressionStmt)
14 expression (AssignExpr)
15 operator='ASSIGN'
16 target (FieldAccessExpr)
17 name (SimpleName)
18 identifier='stream'
19 scope (ThisExpr)
20 value (ObjectCreationExpr)
21 type (ClassOrInterfaceType)
22 name (SimpleName)
23 identifier='ByteArrayOutputStream'
24 statement (ExpressionStmt)
25 expression (AssignExpr)
26 operator='ASSIGN'
27 target (FieldAccessExpr)
28 name (SimpleName)
29 identifier='wrappingKey'
30 scope (ThisExpr)
31 value (ConditionalExpr)
32 condition (BinaryExpr)
33 operator='EQUALS'
34 left (NullLiteralExpr)
35 right (NameExpr)
36 name (SimpleName)
37 identifier='key'
38 elseExpr (MethodCallExpr)
39 name (SimpleName)
40 identifier='copyOf'
41 scope (NameExpr)
42 name (SimpleName)
43 identifier='Arrays'
44 arguments
45 argument (NameExpr)
46 name (SimpleName)
47 identifier='key'
48 argument (FieldAccessExpr)
49 name (SimpleName)
50 identifier='length'
51 scope (NameExpr)
52 name (SimpleName)
53 identifier='key'
54 thenExpr (NullLiteralExpr)
55 name (SimpleName)
56 identifier='GTSEncoder'
57 parameters
58 parameter (Parameter)
59 isVarArgs='false'
60 name (SimpleName)
61 identifier='baseTimestamp'
62 type (PrimitiveType)
63 type='LONG'
64 parameter (Parameter)
65 isVarArgs='false'
66 name (SimpleName)
67 identifier='key'
68 type (ArrayType)
69 origin='TYPE'
70 componentType (PrimitiveType)
71 type='BYTE'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
6 9
4 10
10 11
11 12
2 13
13 14
14 15
14 16
16 17
17 18
16 19
14 20
20 21
21 22
22 23
2 24
24 25
25 26
25 27
27 28
28 29
27 30
25 31
31 32
32 33
32 34
32 35
35 36
36 37
31 38
38 39
39 40
38 41
41 42
42 43
38 44
44 45
45 46
46 47
44 48
48 49
49 50
48 51
51 52
52 53
31 54
0 55
55 56
0 57
57 58
58 59
58 60
60 61
58 62
62 63
57 64
64 65
64 66
66 67
64 68
68 69
68 70
70 71

Create an encoder using the given base and AES wrapping key.
