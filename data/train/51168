46
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='i'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='Log'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='LOG_TAG'
14 argument (BinaryExpr)
15 operator='PLUS'
16 left (BinaryExpr)
17 operator='PLUS'
18 left (StringLiteralExpr)
19 value='['
20 right (NameExpr)
21 name (SimpleName)
22 identifier='message'
23 right (StringLiteralExpr)
24 value=']'
25 argument (NameExpr)
26 name (SimpleName)
27 identifier='cause'
28 type (VoidType)
29 name (SimpleName)
30 identifier='i'
31 parameters
32 parameter (Parameter)
33 isVarArgs='false'
34 name (SimpleName)
35 identifier='message'
36 type (ClassOrInterfaceType)
37 name (SimpleName)
38 identifier='String'
39 parameter (Parameter)
40 isVarArgs='false'
41 name (SimpleName)
42 identifier='cause'
43 type (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='Throwable'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
10 14
14 15
14 16
16 17
16 18
18 19
16 20
20 21
21 22
14 23
23 24
10 25
25 26
26 27
0 28
0 29
29 30
0 31
31 32
32 33
32 34
34 35
32 36
36 37
37 38
31 39
39 40
39 41
41 42
39 43
43 44
44 45

<p><b>INFORMATIVE:</b> This level of logging should used be to note that something interesting to most people happened, i.e. when a situation is detected that is likely to have widespread impact, though isn't necessarily an error. Such a condition should only be logged by a module that reasonably believes that it is the most authoritative in that domain (to avoid duplicate logging by non-authoritative components).</p> <p><b>This level is always logged.</b></p>
