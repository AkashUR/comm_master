138
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (StringLiteralExpr)
8 value='Foo\nBar\n\rBaz'
9 name (SimpleName)
10 identifier='newlineStr'
11 type (ClassOrInterfaceType)
12 name (SimpleName)
13 identifier='String'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='createTable'
18 arguments
19 argument (StringLiteralExpr)
20 value='newlineRegressTest'
21 argument (StringLiteralExpr)
22 value='(field1 MEDIUMTEXT)'
23 statement (ExpressionStmt)
24 expression (MethodCallExpr)
25 name (SimpleName)
26 identifier='executeUpdate'
27 scope (FieldAccessExpr)
28 name (SimpleName)
29 identifier='stmt'
30 scope (ThisExpr)
31 arguments
32 argument (BinaryExpr)
33 operator='PLUS'
34 left (BinaryExpr)
35 operator='PLUS'
36 left (StringLiteralExpr)
37 value='INSERT INTO newlineRegressTest VALUES (\''
38 right (NameExpr)
39 name (SimpleName)
40 identifier='newlineStr'
41 right (StringLiteralExpr)
42 value='\')'
43 statement (ExpressionStmt)
44 expression (AssignExpr)
45 operator='ASSIGN'
46 target (FieldAccessExpr)
47 name (SimpleName)
48 identifier='pstmt'
49 scope (ThisExpr)
50 value (MethodCallExpr)
51 name (SimpleName)
52 identifier='prepareStatement'
53 scope (FieldAccessExpr)
54 name (SimpleName)
55 identifier='conn'
56 scope (ThisExpr)
57 arguments
58 argument (StringLiteralExpr)
59 value='INSERT INTO newlineRegressTest VALUES (?)'
60 statement (ExpressionStmt)
61 expression (MethodCallExpr)
62 name (SimpleName)
63 identifier='setString'
64 scope (FieldAccessExpr)
65 name (SimpleName)
66 identifier='pstmt'
67 scope (ThisExpr)
68 arguments
69 argument (IntegerLiteralExpr)
70 value='1'
71 argument (NameExpr)
72 name (SimpleName)
73 identifier='newlineStr'
74 statement (ExpressionStmt)
75 expression (MethodCallExpr)
76 name (SimpleName)
77 identifier='executeUpdate'
78 scope (FieldAccessExpr)
79 name (SimpleName)
80 identifier='pstmt'
81 scope (ThisExpr)
82 statement (ExpressionStmt)
83 expression (AssignExpr)
84 operator='ASSIGN'
85 target (FieldAccessExpr)
86 name (SimpleName)
87 identifier='rs'
88 scope (ThisExpr)
89 value (MethodCallExpr)
90 name (SimpleName)
91 identifier='executeQuery'
92 scope (FieldAccessExpr)
93 name (SimpleName)
94 identifier='stmt'
95 scope (ThisExpr)
96 arguments
97 argument (StringLiteralExpr)
98 value='SELECT * FROM newlineRegressTest'
99 statement (WhileStmt)
100 body (BlockStmt)
101 statements
102 statement (ExpressionStmt)
103 expression (MethodCallExpr)
104 name (SimpleName)
105 identifier='assertTrue'
106 arguments
107 argument (MethodCallExpr)
108 name (SimpleName)
109 identifier='equals'
110 scope (MethodCallExpr)
111 name (SimpleName)
112 identifier='getString'
113 scope (FieldAccessExpr)
114 name (SimpleName)
115 identifier='rs'
116 scope (ThisExpr)
117 arguments
118 argument (IntegerLiteralExpr)
119 value='1'
120 arguments
121 argument (NameExpr)
122 name (SimpleName)
123 identifier='newlineStr'
124 condition (MethodCallExpr)
125 name (SimpleName)
126 identifier='next'
127 scope (FieldAccessExpr)
128 name (SimpleName)
129 identifier='rs'
130 scope (ThisExpr)
131 type (VoidType)
132 name (SimpleName)
133 identifier='testNewlines'
134 thrownExceptions
135 thrownException (ClassOrInterfaceType)
136 name (SimpleName)
137 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
6 9
9 10
6 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
18 21
21 22
2 23
23 24
24 25
25 26
24 27
27 28
28 29
27 30
24 31
31 32
32 33
32 34
34 35
34 36
36 37
34 38
38 39
39 40
32 41
41 42
2 43
43 44
44 45
44 46
46 47
47 48
46 49
44 50
50 51
51 52
50 53
53 54
54 55
53 56
50 57
57 58
58 59
2 60
60 61
61 62
62 63
61 64
64 65
65 66
64 67
61 68
68 69
69 70
68 71
71 72
72 73
2 74
74 75
75 76
76 77
75 78
78 79
79 80
78 81
2 82
82 83
83 84
83 85
85 86
86 87
85 88
83 89
89 90
90 91
89 92
92 93
93 94
92 95
89 96
96 97
97 98
2 99
99 100
100 101
101 102
102 103
103 104
104 105
103 106
106 107
107 108
108 109
107 110
110 111
111 112
110 113
113 114
114 115
113 116
110 117
117 118
118 119
107 120
120 121
121 122
122 123
99 124
124 125
125 126
124 127
127 128
128 129
127 130
0 131
0 132
132 133
0 134
134 135
135 136
136 137

Tests newline being treated correctly.
