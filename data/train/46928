177
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (NameExpr)
7 name (SimpleName)
8 identifier='items'
9 value (BinaryExpr)
10 operator='PLUS'
11 left (BinaryExpr)
12 operator='MINUS'
13 left (NameExpr)
14 name (SimpleName)
15 identifier='max'
16 right (NameExpr)
17 name (SimpleName)
18 identifier='min'
19 right (IntegerLiteralExpr)
20 value='1'
21 statement (ExpressionStmt)
22 expression (AssignExpr)
23 operator='ASSIGN'
24 target (NameExpr)
25 name (SimpleName)
26 identifier='base'
27 value (NameExpr)
28 name (SimpleName)
29 identifier='min'
30 statement (ExpressionStmt)
31 expression (AssignExpr)
32 operator='ASSIGN'
33 target (NameExpr)
34 name (SimpleName)
35 identifier='zipfianconstant'
36 value (NameExpr)
37 name (SimpleName)
38 identifier='_zipfianconstant'
39 statement (ExpressionStmt)
40 expression (AssignExpr)
41 operator='ASSIGN'
42 target (NameExpr)
43 name (SimpleName)
44 identifier='theta'
45 value (NameExpr)
46 name (SimpleName)
47 identifier='zipfianconstant'
48 statement (ExpressionStmt)
49 expression (AssignExpr)
50 operator='ASSIGN'
51 target (NameExpr)
52 name (SimpleName)
53 identifier='zeta2theta'
54 value (MethodCallExpr)
55 name (SimpleName)
56 identifier='zeta'
57 arguments
58 argument (IntegerLiteralExpr)
59 value='2'
60 argument (NameExpr)
61 name (SimpleName)
62 identifier='theta'
63 statement (ExpressionStmt)
64 expression (AssignExpr)
65 operator='ASSIGN'
66 target (NameExpr)
67 name (SimpleName)
68 identifier='alpha'
69 value (BinaryExpr)
70 operator='DIVIDE'
71 left (DoubleLiteralExpr)
72 value='1.0'
73 right (EnclosedExpr)
74 inner (BinaryExpr)
75 operator='MINUS'
76 left (DoubleLiteralExpr)
77 value='1.0'
78 right (NameExpr)
79 name (SimpleName)
80 identifier='theta'
81 statement (ExpressionStmt)
82 expression (AssignExpr)
83 operator='ASSIGN'
84 target (NameExpr)
85 name (SimpleName)
86 identifier='zetan'
87 value (NameExpr)
88 name (SimpleName)
89 identifier='_zetan'
90 statement (ExpressionStmt)
91 expression (AssignExpr)
92 operator='ASSIGN'
93 target (NameExpr)
94 name (SimpleName)
95 identifier='countforzeta'
96 value (NameExpr)
97 name (SimpleName)
98 identifier='items'
99 statement (ExpressionStmt)
100 expression (AssignExpr)
101 operator='ASSIGN'
102 target (NameExpr)
103 name (SimpleName)
104 identifier='eta'
105 value (BinaryExpr)
106 operator='DIVIDE'
107 left (EnclosedExpr)
108 inner (BinaryExpr)
109 operator='MINUS'
110 left (IntegerLiteralExpr)
111 value='1'
112 right (MethodCallExpr)
113 name (SimpleName)
114 identifier='pow'
115 scope (NameExpr)
116 name (SimpleName)
117 identifier='Math'
118 arguments
119 argument (BinaryExpr)
120 operator='DIVIDE'
121 left (DoubleLiteralExpr)
122 value='2.0'
123 right (NameExpr)
124 name (SimpleName)
125 identifier='items'
126 argument (BinaryExpr)
127 operator='MINUS'
128 left (IntegerLiteralExpr)
129 value='1'
130 right (NameExpr)
131 name (SimpleName)
132 identifier='theta'
133 right (EnclosedExpr)
134 inner (BinaryExpr)
135 operator='MINUS'
136 left (IntegerLiteralExpr)
137 value='1'
138 right (BinaryExpr)
139 operator='DIVIDE'
140 left (NameExpr)
141 name (SimpleName)
142 identifier='zeta2theta'
143 right (NameExpr)
144 name (SimpleName)
145 identifier='zetan'
146 statement (ExpressionStmt)
147 expression (MethodCallExpr)
148 name (SimpleName)
149 identifier='nextInt'
150 name (SimpleName)
151 identifier='ZipfianGenerator'
152 parameters
153 parameter (Parameter)
154 isVarArgs='false'
155 name (SimpleName)
156 identifier='min'
157 type (PrimitiveType)
158 type='LONG'
159 parameter (Parameter)
160 isVarArgs='false'
161 name (SimpleName)
162 identifier='max'
163 type (PrimitiveType)
164 type='LONG'
165 parameter (Parameter)
166 isVarArgs='false'
167 name (SimpleName)
168 identifier='_zipfianconstant'
169 type (PrimitiveType)
170 type='DOUBLE'
171 parameter (Parameter)
172 isVarArgs='false'
173 name (SimpleName)
174 identifier='_zetan'
175 type (PrimitiveType)
176 type='DOUBLE'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
9 10
9 11
11 12
11 13
13 14
14 15
11 16
16 17
17 18
9 19
19 20
2 21
21 22
22 23
22 24
24 25
25 26
22 27
27 28
28 29
2 30
30 31
31 32
31 33
33 34
34 35
31 36
36 37
37 38
2 39
39 40
40 41
40 42
42 43
43 44
40 45
45 46
46 47
2 48
48 49
49 50
49 51
51 52
52 53
49 54
54 55
55 56
54 57
57 58
58 59
57 60
60 61
61 62
2 63
63 64
64 65
64 66
66 67
67 68
64 69
69 70
69 71
71 72
69 73
73 74
74 75
74 76
76 77
74 78
78 79
79 80
2 81
81 82
82 83
82 84
84 85
85 86
82 87
87 88
88 89
2 90
90 91
91 92
91 93
93 94
94 95
91 96
96 97
97 98
2 99
99 100
100 101
100 102
102 103
103 104
100 105
105 106
105 107
107 108
108 109
108 110
110 111
108 112
112 113
113 114
112 115
115 116
116 117
112 118
118 119
119 120
119 121
121 122
119 123
123 124
124 125
118 126
126 127
126 128
128 129
126 130
130 131
131 132
105 133
133 134
134 135
134 136
136 137
134 138
138 139
138 140
140 141
141 142
138 143
143 144
144 145
2 146
146 147
147 148
148 149
0 150
150 151
0 152
152 153
153 154
153 155
155 156
153 157
157 158
152 159
159 160
159 161
161 162
159 163
163 164
152 165
165 166
165 167
167 168
165 169
169 170
152 171
171 172
171 173
173 174
171 175
175 176

Create a zipfian generator for items between min and max (inclusive) for the specified zipfian constant, using the precomputed value of zeta.
