43
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='concatenate'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='transform'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='Tx'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='add'
18 scope (NameExpr)
19 name (SimpleName)
20 identifier='transformStack'
21 arguments
22 argument (MethodCallExpr)
23 name (SimpleName)
24 identifier='createGeneralTransformElement'
25 scope (NameExpr)
26 name (SimpleName)
27 identifier='TransformStackElement'
28 arguments
29 argument (NameExpr)
30 name (SimpleName)
31 identifier='Tx'
32 type (VoidType)
33 name (SimpleName)
34 identifier='transform'
35 parameters
36 parameter (Parameter)
37 isVarArgs='false'
38 name (SimpleName)
39 identifier='Tx'
40 type (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='AffineTransform'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
15 21
21 22
22 23
23 24
22 25
25 26
26 27
22 28
28 29
29 30
30 31
0 32
0 33
33 34
0 35
35 36
36 37
36 38
38 39
36 40
40 41
41 42

Composes an <code>AffineTransform</code> object with the <code>Transform</code> in this <code>Graphics2D</code> according to the rule last-specified-first-applied.  If the current <code>Transform</code> is Cx, the result of composition with Tx is a new <code>Transform</code> Cx'.  Cx' becomes the current <code>Transform</code> for this <code>Graphics2D</code>. Transforming a point p by the updated <code>Transform</code> Cx' is equivalent to first transforming p by Tx and then transforming the result by the original <code>Transform</code> Cx.  In other words, Cx'(p) = Cx(Tx(p)).  A copy of the Tx is made, if necessary, so further modifications to Tx do not affect rendering.
