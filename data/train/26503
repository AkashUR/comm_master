41
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='mergeSort2'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='a'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='fromIndex'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='toIndex'
17 type (VoidType)
18 name (SimpleName)
19 identifier='mergeSort'
20 parameters
21 parameter (Parameter)
22 isVarArgs='false'
23 name (SimpleName)
24 identifier='a'
25 type (ArrayType)
26 origin='TYPE'
27 componentType (PrimitiveType)
28 type='FLOAT'
29 parameter (Parameter)
30 isVarArgs='false'
31 name (SimpleName)
32 identifier='fromIndex'
33 type (PrimitiveType)
34 type='INT'
35 parameter (Parameter)
36 isVarArgs='false'
37 name (SimpleName)
38 identifier='toIndex'
39 type (PrimitiveType)
40 type='INT'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
7 14
14 15
15 16
0 17
0 18
18 19
0 20
20 21
21 22
21 23
23 24
21 25
25 26
25 27
27 28
20 29
29 30
29 31
31 32
29 33
33 34
20 35
35 36
35 37
37 38
35 39
39 40

Sorts the specified range of the specified array of elements. <p>This sort is guaranteed to be <i>stable</i>:  equal elements will not be reordered as a result of the sort.<p> The sorting algorithm is a modified mergesort (in which the merge is omitted if the highest element in the low sublist is less than the lowest element in the high sublist).  This algorithm offers guaranteed n*log(n) performance, and can approach linear performance on nearly sorted lists.
