24
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='cleanupAsynchronous'
7 statement (ExpressionStmt)
8 expression (MethodCallExpr)
9 name (SimpleName)
10 identifier='clear'
11 scope (NameExpr)
12 name (SimpleName)
13 identifier='schedule'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='seal'
18 scope (NameExpr)
19 name (SimpleName)
20 identifier='schedule'
21 type (VoidType)
22 name (SimpleName)
23 identifier='kill'
0 1
1 2
2 3
3 4
4 5
5 6
2 7
7 8
8 9
9 10
8 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
0 21
0 22
22 23

A Steppable on the schedule can call this method to cancel the simulation. All existing AsynchronousSteppables are stopped, and then the schedule is reset.  AsynchronousSteppables, ParallelSequences,  and non-main threads should not call this method directly -- it will deadlock. Instead, they may kill the simulation by scheduling a Steppable for the next timestep which calls state.kill().
