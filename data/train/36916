183
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='println'
7 scope (FieldAccessExpr)
8 name (SimpleName)
9 identifier='out'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='System'
13 statement (ExpressionStmt)
14 expression (MethodCallExpr)
15 name (SimpleName)
16 identifier='println'
17 scope (FieldAccessExpr)
18 name (SimpleName)
19 identifier='out'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='System'
23 arguments
24 argument (StringLiteralExpr)
25 value='createList'
26 statement (ExpressionStmt)
27 expression (VariableDeclarationExpr)
28 variables
29 variable (VariableDeclarator)
30 initializer (MethodCallExpr)
31 name (SimpleName)
32 identifier='of'
33 scope (NameExpr)
34 name (SimpleName)
35 identifier='List'
36 arguments
37 argument (IntegerLiteralExpr)
38 value='1'
39 argument (IntegerLiteralExpr)
40 value='2'
41 argument (IntegerLiteralExpr)
42 value='3'
43 name (SimpleName)
44 identifier='list1'
45 type (ClassOrInterfaceType)
46 name (SimpleName)
47 identifier='List'
48 typeArguments
49 typeArgument (ClassOrInterfaceType)
50 name (SimpleName)
51 identifier='Integer'
52 statement (ExpressionStmt)
53 expression (MethodCallExpr)
54 name (SimpleName)
55 identifier='println'
56 scope (FieldAccessExpr)
57 name (SimpleName)
58 identifier='out'
59 scope (NameExpr)
60 name (SimpleName)
61 identifier='System'
62 arguments
63 argument (NameExpr)
64 name (SimpleName)
65 identifier='list1'
66 statement (ExpressionStmt)
67 expression (VariableDeclarationExpr)
68 variables
69 variable (VariableDeclarator)
70 initializer (MethodCallExpr)
71 name (SimpleName)
72 identifier='prepend'
73 scope (MethodCallExpr)
74 name (SimpleName)
75 identifier='tail'
76 scope (NameExpr)
77 name (SimpleName)
78 identifier='list1'
79 arguments
80 argument (IntegerLiteralExpr)
81 value='0'
82 name (SimpleName)
83 identifier='list2'
84 type (ClassOrInterfaceType)
85 name (SimpleName)
86 identifier='List'
87 typeArguments
88 typeArgument (ClassOrInterfaceType)
89 name (SimpleName)
90 identifier='Integer'
91 statement (ExpressionStmt)
92 expression (MethodCallExpr)
93 name (SimpleName)
94 identifier='println'
95 scope (FieldAccessExpr)
96 name (SimpleName)
97 identifier='out'
98 scope (NameExpr)
99 name (SimpleName)
100 identifier='System'
101 arguments
102 argument (NameExpr)
103 name (SimpleName)
104 identifier='list2'
105 statement (ExpressionStmt)
106 expression (MethodCallExpr)
107 name (SimpleName)
108 identifier='println'
109 scope (FieldAccessExpr)
110 name (SimpleName)
111 identifier='out'
112 scope (NameExpr)
113 name (SimpleName)
114 identifier='System'
115 statement (ExpressionStmt)
116 expression (MethodCallExpr)
117 name (SimpleName)
118 identifier='println'
119 scope (FieldAccessExpr)
120 name (SimpleName)
121 identifier='out'
122 scope (NameExpr)
123 name (SimpleName)
124 identifier='System'
125 arguments
126 argument (StringLiteralExpr)
127 value='createQueue'
128 statement (ExpressionStmt)
129 expression (VariableDeclarationExpr)
130 variables
131 variable (VariableDeclarator)
132 initializer (MethodCallExpr)
133 name (SimpleName)
134 identifier='enqueue'
135 scope (MethodCallExpr)
136 name (SimpleName)
137 identifier='enqueue'
138 scope (MethodCallExpr)
139 name (SimpleName)
140 identifier='of'
141 scope (NameExpr)
142 name (SimpleName)
143 identifier='Queue'
144 arguments
145 argument (IntegerLiteralExpr)
146 value='1'
147 argument (IntegerLiteralExpr)
148 value='2'
149 argument (IntegerLiteralExpr)
150 value='3'
151 arguments
152 argument (IntegerLiteralExpr)
153 value='4'
154 arguments
155 argument (IntegerLiteralExpr)
156 value='5'
157 name (SimpleName)
158 identifier='queue'
159 type (ClassOrInterfaceType)
160 name (SimpleName)
161 identifier='Queue'
162 typeArguments
163 typeArgument (ClassOrInterfaceType)
164 name (SimpleName)
165 identifier='Integer'
166 statement (ExpressionStmt)
167 expression (MethodCallExpr)
168 name (SimpleName)
169 identifier='println'
170 scope (FieldAccessExpr)
171 name (SimpleName)
172 identifier='out'
173 scope (NameExpr)
174 name (SimpleName)
175 identifier='System'
176 arguments
177 argument (NameExpr)
178 name (SimpleName)
179 identifier='queue'
180 type (VoidType)
181 name (SimpleName)
182 identifier='createCollection'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
11 12
2 13
13 14
14 15
15 16
14 17
17 18
18 19
17 20
20 21
21 22
14 23
23 24
24 25
2 26
26 27
27 28
28 29
29 30
30 31
31 32
30 33
33 34
34 35
30 36
36 37
37 38
36 39
39 40
36 41
41 42
29 43
43 44
29 45
45 46
46 47
45 48
48 49
49 50
50 51
2 52
52 53
53 54
54 55
53 56
56 57
57 58
56 59
59 60
60 61
53 62
62 63
63 64
64 65
2 66
66 67
67 68
68 69
69 70
70 71
71 72
70 73
73 74
74 75
73 76
76 77
77 78
70 79
79 80
80 81
69 82
82 83
69 84
84 85
85 86
84 87
87 88
88 89
89 90
2 91
91 92
92 93
93 94
92 95
95 96
96 97
95 98
98 99
99 100
92 101
101 102
102 103
103 104
2 105
105 106
106 107
107 108
106 109
109 110
110 111
109 112
112 113
113 114
2 115
115 116
116 117
117 118
116 119
119 120
120 121
119 122
122 123
123 124
116 125
125 126
126 127
2 128
128 129
129 130
130 131
131 132
132 133
133 134
132 135
135 136
136 137
135 138
138 139
139 140
138 141
141 142
142 143
138 144
144 145
145 146
144 147
147 148
144 149
149 150
135 151
151 152
152 153
132 154
154 155
155 156
131 157
157 158
131 159
159 160
160 161
159 162
162 163
163 164
164 165
2 166
166 167
167 168
168 169
167 170
170 171
171 172
170 173
173 174
174 175
167 176
176 177
177 178
178 179
0 180
0 181
181 182

A persistent data structure does preserve the previous version of itself when being modified and is therefore effectively immutable. Fully persistent data structures allow both updates and queries on any version.
