84
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='balance'
7 statement (ExpressionStmt)
8 expression (MethodCallExpr)
9 name (SimpleName)
10 identifier='redimNodeArrays'
11 arguments
12 argument (NameExpr)
13 name (SimpleName)
14 identifier='freenode'
15 statement (ExpressionStmt)
16 expression (VariableDeclarationExpr)
17 variables
18 variable (VariableDeclarator)
19 initializer (ObjectCreationExpr)
20 type (ClassOrInterfaceType)
21 name (SimpleName)
22 identifier='CharVector'
23 name (SimpleName)
24 identifier='kx'
25 type (ClassOrInterfaceType)
26 name (SimpleName)
27 identifier='CharVector'
28 statement (ExpressionStmt)
29 expression (MethodCallExpr)
30 name (SimpleName)
31 identifier='alloc'
32 scope (NameExpr)
33 name (SimpleName)
34 identifier='kx'
35 arguments
36 argument (IntegerLiteralExpr)
37 value='1'
38 statement (ExpressionStmt)
39 expression (VariableDeclarationExpr)
40 variables
41 variable (VariableDeclarator)
42 initializer (ObjectCreationExpr)
43 type (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='TernaryTree'
46 name (SimpleName)
47 identifier='map'
48 type (ClassOrInterfaceType)
49 name (SimpleName)
50 identifier='TernaryTree'
51 statement (ExpressionStmt)
52 expression (MethodCallExpr)
53 name (SimpleName)
54 identifier='compact'
55 arguments
56 argument (NameExpr)
57 name (SimpleName)
58 identifier='kx'
59 argument (NameExpr)
60 name (SimpleName)
61 identifier='map'
62 argument (NameExpr)
63 name (SimpleName)
64 identifier='root'
65 statement (ExpressionStmt)
66 expression (AssignExpr)
67 operator='ASSIGN'
68 target (NameExpr)
69 name (SimpleName)
70 identifier='kv'
71 value (NameExpr)
72 name (SimpleName)
73 identifier='kx'
74 statement (ExpressionStmt)
75 expression (MethodCallExpr)
76 name (SimpleName)
77 identifier='trimToSize'
78 scope (NameExpr)
79 name (SimpleName)
80 identifier='kv'
81 type (VoidType)
82 name (SimpleName)
83 identifier='trimToSize'
0 1
1 2
2 3
3 4
4 5
5 6
2 7
7 8
8 9
9 10
8 11
11 12
12 13
13 14
2 15
15 16
16 17
17 18
18 19
19 20
20 21
21 22
18 23
23 24
18 25
25 26
26 27
2 28
28 29
29 30
30 31
29 32
32 33
33 34
29 35
35 36
36 37
2 38
38 39
39 40
40 41
41 42
42 43
43 44
44 45
41 46
46 47
41 48
48 49
49 50
2 51
51 52
52 53
53 54
52 55
55 56
56 57
57 58
55 59
59 60
60 61
55 62
62 63
63 64
2 65
65 66
66 67
66 68
68 69
69 70
66 71
71 72
72 73
2 74
74 75
75 76
76 77
75 78
78 79
79 80
0 81
0 82
82 83

Each node stores a character (splitchar) which is part of some key(s). In a compressed branch (one that only contain a single string key) the trailer of the key which is not already in nodes is stored externally in the kv array. As items are inserted, key substrings decrease. Some substrings may completely disappear when the whole branch is totally decompressed. The tree is traversed to find the key substrings actually used. In addition, duplicate substrings are removed using a map (implemented with a TernaryTree!).
