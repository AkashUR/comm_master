47
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='visitMultiANewArrayInsn'
7 scope (SuperExpr)
8 arguments
9 argument (NameExpr)
10 name (SimpleName)
11 identifier='typeName'
12 argument (NameExpr)
13 name (SimpleName)
14 identifier='dimCount'
15 statement (ExpressionStmt)
16 expression (MethodCallExpr)
17 name (SimpleName)
18 identifier='calculateArrayLengthAndDispatch'
19 arguments
20 argument (NameExpr)
21 name (SimpleName)
22 identifier='typeName'
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='dimCount'
26 type (VoidType)
27 name (SimpleName)
28 identifier='visitMultiANewArrayInsn'
29 parameters
30 parameter (Parameter)
31 isVarArgs='false'
32 name (SimpleName)
33 identifier='typeName'
34 type (ClassOrInterfaceType)
35 name (SimpleName)
36 identifier='String'
37 parameter (Parameter)
38 isVarArgs='false'
39 name (SimpleName)
40 identifier='dimCount'
41 type (PrimitiveType)
42 type='INT'
43 annotations
44 annotation (MarkerAnnotationExpr)
45 name (Name)
46 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
4 8
8 9
9 10
10 11
8 12
12 13
13 14
2 15
15 16
16 17
17 18
16 19
19 20
20 21
21 22
19 23
23 24
24 25
0 26
0 27
27 28
0 29
29 30
30 31
30 32
32 33
30 34
34 35
35 36
29 37
37 38
37 39
39 40
37 41
41 42
0 43
43 44
44 45
45 46

multianewarray gets its very own visit method in the ASM framework, so we hook it here.  This bytecode is different from most in that it consumes a variable number of stack elements during execution.  The number of stack elements consumed is specified by the dimCount operand.
