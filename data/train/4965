80
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='codeValue'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='right'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='env'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='ctx'
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='asm'
20 statement (ExpressionStmt)
21 expression (MethodCallExpr)
22 name (SimpleName)
23 identifier='add'
24 scope (NameExpr)
25 name (SimpleName)
26 identifier='asm'
27 arguments
28 argument (NameExpr)
29 name (SimpleName)
30 identifier='where'
31 argument (NameExpr)
32 name (SimpleName)
33 identifier='opc_ldc'
34 argument (ObjectCreationExpr)
35 type (ClassOrInterfaceType)
36 name (SimpleName)
37 identifier='Integer'
38 arguments
39 argument (IntegerLiteralExpr)
40 value='1'
41 statement (ExpressionStmt)
42 expression (MethodCallExpr)
43 name (SimpleName)
44 identifier='add'
45 scope (NameExpr)
46 name (SimpleName)
47 identifier='asm'
48 arguments
49 argument (NameExpr)
50 name (SimpleName)
51 identifier='where'
52 argument (NameExpr)
53 name (SimpleName)
54 identifier='opc_ixor'
55 type (VoidType)
56 name (SimpleName)
57 identifier='codeValue'
58 parameters
59 parameter (Parameter)
60 isVarArgs='false'
61 name (SimpleName)
62 identifier='env'
63 type (ClassOrInterfaceType)
64 name (SimpleName)
65 identifier='Environment'
66 parameter (Parameter)
67 isVarArgs='false'
68 name (SimpleName)
69 identifier='ctx'
70 type (ClassOrInterfaceType)
71 name (SimpleName)
72 identifier='Context'
73 parameter (Parameter)
74 isVarArgs='false'
75 name (SimpleName)
76 identifier='asm'
77 type (ClassOrInterfaceType)
78 name (SimpleName)
79 identifier='Assembler'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
10 14
14 15
15 16
10 17
17 18
18 19
2 20
20 21
21 22
22 23
21 24
24 25
25 26
21 27
27 28
28 29
29 30
27 31
31 32
32 33
27 34
34 35
35 36
36 37
34 38
38 39
39 40
2 41
41 42
42 43
43 44
42 45
45 46
46 47
42 48
48 49
49 50
50 51
48 52
52 53
53 54
0 55
0 56
56 57
0 58
58 59
59 60
59 61
61 62
59 63
63 64
64 65
58 66
66 67
66 68
68 69
66 70
70 71
71 72
58 73
73 74
73 75
75 76
73 77
77 78
78 79

Instead of relying on the default code generation which uses conditional branching, generate a simpler stream using XOR.
