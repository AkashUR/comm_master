44
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='checkEqualsWithScaleOfExpected'
7 arguments
8 argument (StringLiteralExpr)
9 value=''
10 argument (ObjectCreationExpr)
11 type (ClassOrInterfaceType)
12 name (SimpleName)
13 identifier='BigDecimal'
14 arguments
15 argument (NameExpr)
16 name (SimpleName)
17 identifier='expected'
18 argument (ObjectCreationExpr)
19 type (ClassOrInterfaceType)
20 name (SimpleName)
21 identifier='BigDecimal'
22 arguments
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='actual'
26 type (VoidType)
27 name (SimpleName)
28 identifier='checkEquals'
29 parameters
30 parameter (Parameter)
31 isVarArgs='false'
32 name (SimpleName)
33 identifier='expected'
34 type (ClassOrInterfaceType)
35 name (SimpleName)
36 identifier='String'
37 parameter (Parameter)
38 isVarArgs='false'
39 name (SimpleName)
40 identifier='actual'
41 type (ClassOrInterfaceType)
42 name (SimpleName)
43 identifier='String'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
11 12
12 13
10 14
14 15
15 16
16 17
7 18
18 19
19 20
20 21
18 22
22 23
23 24
24 25
0 26
0 27
27 28
0 29
29 30
30 31
30 32
32 33
30 34
34 35
35 36
29 37
37 38
37 39
39 40
37 41
41 42
42 43

Compares the expected value with the actual value. In case the actual value has a fraction, then the expected value must defined with also a fractional part. The actual value will be rounded, in order to make writing test more convenient. The fractional part of the expected value must have at least two digits (in case the actual value as a fractional part with more than 2 digits.)<br> e.g. <br> checkEquals(30 , 30) == true <br> checkEquals(30.12 , 30.1234) == true<br> checkEquals(30.123 , 30.1234) == true<br> checkEquals(30 , 30.1234) with throw IllegalArgumentException<br> checkEquals(30.1 , 30.1234) with throw IllegalArgumentException<br>
