99
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='String'
11 arguments
12 argument (NameExpr)
13 name (SimpleName)
14 identifier='prefix'
15 name (SimpleName)
16 identifier='name'
17 type (ClassOrInterfaceType)
18 name (SimpleName)
19 identifier='String'
20 statement (ExpressionStmt)
21 expression (VariableDeclarationExpr)
22 variables
23 variable (VariableDeclarator)
24 initializer (MethodCallExpr)
25 name (SimpleName)
26 identifier='splitOn'
27 scope (NameExpr)
28 name (SimpleName)
29 identifier='Util'
30 arguments
31 argument (CharLiteralExpr)
32 value='.'
33 argument (NameExpr)
34 name (SimpleName)
35 identifier='name'
36 argument (IntegerLiteralExpr)
37 value='0'
38 argument (MethodCallExpr)
39 name (SimpleName)
40 identifier='length'
41 scope (NameExpr)
42 name (SimpleName)
43 identifier='name'
44 name (SimpleName)
45 identifier='splittedName'
46 type (ArrayType)
47 origin='TYPE'
48 componentType (ClassOrInterfaceType)
49 name (SimpleName)
50 identifier='String'
51 statement (ForeachStmt)
52 body (BlockStmt)
53 statements
54 statement (ExpressionStmt)
55 expression (MethodCallExpr)
56 name (SimpleName)
57 identifier='findPackages'
58 scope (NameExpr)
59 name (SimpleName)
60 identifier='location'
61 arguments
62 argument (NameExpr)
63 name (SimpleName)
64 identifier='splittedName'
65 argument (NameExpr)
66 name (SimpleName)
67 identifier='requestor'
68 iterable (FieldAccessExpr)
69 name (SimpleName)
70 identifier='locations'
71 scope (ThisExpr)
72 variable (VariableDeclarationExpr)
73 variables
74 variable (VariableDeclarator)
75 name (SimpleName)
76 identifier='location'
77 type (ClassOrInterfaceType)
78 name (SimpleName)
79 identifier='CodenvyClasspathLocation'
80 type (VoidType)
81 name (SimpleName)
82 identifier='findPackages'
83 parameters
84 parameter (Parameter)
85 isVarArgs='false'
86 name (SimpleName)
87 identifier='prefix'
88 type (ArrayType)
89 origin='TYPE'
90 componentType (PrimitiveType)
91 type='CHAR'
92 parameter (Parameter)
93 isVarArgs='false'
94 name (SimpleName)
95 identifier='requestor'
96 type (ClassOrInterfaceType)
97 name (SimpleName)
98 identifier='ISearchRequestor'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
13 14
6 15
15 16
6 17
17 18
18 19
2 20
20 21
21 22
22 23
23 24
24 25
25 26
24 27
27 28
28 29
24 30
30 31
31 32
30 33
33 34
34 35
30 36
36 37
30 38
38 39
39 40
38 41
41 42
42 43
23 44
44 45
23 46
46 47
46 48
48 49
49 50
2 51
51 52
52 53
53 54
54 55
55 56
56 57
55 58
58 59
59 60
55 61
61 62
62 63
63 64
61 65
65 66
66 67
51 68
68 69
69 70
68 71
51 72
72 73
73 74
74 75
75 76
74 77
77 78
78 79
0 80
0 81
81 82
0 83
83 84
84 85
84 86
86 87
84 88
88 89
88 90
90 91
83 92
92 93
92 94
94 95
92 96
96 97
97 98

Find the packages that start with the given prefix. A valid prefix is a qualified name separated by periods (ex. java.util). The packages found are passed to: ISearchRequestor.acceptPackage(char[][] packageName)
