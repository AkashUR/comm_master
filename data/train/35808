543
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='_createStatechart'
10 arguments
11 argument (StringLiteralExpr)
12 value='sc'
13 name (SimpleName)
14 identifier='sc'
15 type (ClassOrInterfaceType)
16 name (SimpleName)
17 identifier='Statechart'
18 statement (BlockStmt)
19 statements
20 statement (ExpressionStmt)
21 expression (VariableDeclarationExpr)
22 variables
23 variable (VariableDeclarator)
24 initializer (MethodCallExpr)
25 name (SimpleName)
26 identifier='_createInterfaceScope'
27 arguments
28 argument (StringLiteralExpr)
29 value='Interface'
30 argument (NameExpr)
31 name (SimpleName)
32 identifier='sc'
33 name (SimpleName)
34 identifier='s_scope'
35 type (ClassOrInterfaceType)
36 name (SimpleName)
37 identifier='InterfaceScope'
38 statement (ExpressionStmt)
39 expression (VariableDeclarationExpr)
40 variables
41 variable (VariableDeclarator)
42 initializer (MethodCallExpr)
43 name (SimpleName)
44 identifier='_createVariableDefinition'
45 arguments
46 argument (StringLiteralExpr)
47 value='v1'
48 argument (NameExpr)
49 name (SimpleName)
50 identifier='TYPE_INTEGER'
51 argument (NameExpr)
52 name (SimpleName)
53 identifier='s_scope'
54 name (SimpleName)
55 identifier='v1'
56 type (ClassOrInterfaceType)
57 name (SimpleName)
58 identifier='VariableDefinition'
59 statement (ExpressionStmt)
60 expression (VariableDeclarationExpr)
61 variables
62 variable (VariableDeclarator)
63 initializer (MethodCallExpr)
64 name (SimpleName)
65 identifier='_createRegion'
66 arguments
67 argument (StringLiteralExpr)
68 value='r'
69 argument (NameExpr)
70 name (SimpleName)
71 identifier='sc'
72 name (SimpleName)
73 identifier='r'
74 type (ClassOrInterfaceType)
75 name (SimpleName)
76 identifier='Region'
77 statement (BlockStmt)
78 statements
79 statement (ExpressionStmt)
80 expression (VariableDeclarationExpr)
81 variables
82 variable (VariableDeclarator)
83 initializer (MethodCallExpr)
84 name (SimpleName)
85 identifier='_createState'
86 arguments
87 argument (StringLiteralExpr)
88 value='s1'
89 argument (NameExpr)
90 name (SimpleName)
91 identifier='r'
92 name (SimpleName)
93 identifier='s1'
94 type (ClassOrInterfaceType)
95 name (SimpleName)
96 identifier='State'
97 statement (BlockStmt)
98 statements
99 statement (ExpressionStmt)
100 expression (MethodCallExpr)
101 name (SimpleName)
102 identifier='_createExitAssignment'
103 arguments
104 argument (NameExpr)
105 name (SimpleName)
106 identifier='v1'
107 argument (NameExpr)
108 name (SimpleName)
109 identifier='s1'
110 argument (IntegerLiteralExpr)
111 value='1'
112 statement (ExpressionStmt)
113 expression (VariableDeclarationExpr)
114 variables
115 variable (VariableDeclarator)
116 initializer (MethodCallExpr)
117 name (SimpleName)
118 identifier='_createRegion'
119 arguments
120 argument (StringLiteralExpr)
121 value='r'
122 argument (NameExpr)
123 name (SimpleName)
124 identifier='s1'
125 name (SimpleName)
126 identifier='r_s1'
127 type (ClassOrInterfaceType)
128 name (SimpleName)
129 identifier='Region'
130 statement (BlockStmt)
131 statements
132 statement (ExpressionStmt)
133 expression (VariableDeclarationExpr)
134 variables
135 variable (VariableDeclarator)
136 initializer (MethodCallExpr)
137 name (SimpleName)
138 identifier='_createState'
139 arguments
140 argument (StringLiteralExpr)
141 value='s3'
142 argument (NameExpr)
143 name (SimpleName)
144 identifier='r_s1'
145 name (SimpleName)
146 identifier='s3'
147 type (ClassOrInterfaceType)
148 name (SimpleName)
149 identifier='State'
150 statement (BlockStmt)
151 statements
152 statement (ExpressionStmt)
153 expression (VariableDeclarationExpr)
154 variables
155 variable (VariableDeclarator)
156 initializer (MethodCallExpr)
157 name (SimpleName)
158 identifier='_createRegion'
159 arguments
160 argument (StringLiteralExpr)
161 value='r'
162 argument (NameExpr)
163 name (SimpleName)
164 identifier='s3'
165 name (SimpleName)
166 identifier='r_s3'
167 type (ClassOrInterfaceType)
168 name (SimpleName)
169 identifier='Region'
170 statement (BlockStmt)
171 statements
172 statement (ExpressionStmt)
173 expression (VariableDeclarationExpr)
174 variables
175 variable (VariableDeclarator)
176 initializer (MethodCallExpr)
177 name (SimpleName)
178 identifier='_createState'
179 arguments
180 argument (StringLiteralExpr)
181 value='s4'
182 argument (NameExpr)
183 name (SimpleName)
184 identifier='r_s3'
185 name (SimpleName)
186 identifier='s4'
187 type (ClassOrInterfaceType)
188 name (SimpleName)
189 identifier='State'
190 statement (ExpressionStmt)
191 expression (MethodCallExpr)
192 name (SimpleName)
193 identifier='_createExitAssignment'
194 arguments
195 argument (NameExpr)
196 name (SimpleName)
197 identifier='v1'
198 argument (NameExpr)
199 name (SimpleName)
200 identifier='s4'
201 argument (IntegerLiteralExpr)
202 value='3'
203 statement (ExpressionStmt)
204 expression (VariableDeclarationExpr)
205 variables
206 variable (VariableDeclarator)
207 initializer (MethodCallExpr)
208 name (SimpleName)
209 identifier='_createState'
210 arguments
211 argument (StringLiteralExpr)
212 value='s5'
213 argument (NameExpr)
214 name (SimpleName)
215 identifier='r_s3'
216 name (SimpleName)
217 identifier='s5'
218 type (ClassOrInterfaceType)
219 name (SimpleName)
220 identifier='State'
221 statement (ExpressionStmt)
222 expression (VariableDeclarationExpr)
223 variables
224 variable (VariableDeclarator)
225 initializer (MethodCallExpr)
226 name (SimpleName)
227 identifier='_createState'
228 arguments
229 argument (StringLiteralExpr)
230 value='s2'
231 argument (NameExpr)
232 name (SimpleName)
233 identifier='r'
234 name (SimpleName)
235 identifier='s2'
236 type (ClassOrInterfaceType)
237 name (SimpleName)
238 identifier='State'
239 statement (BlockStmt)
240 statements
241 statement (ExpressionStmt)
242 expression (VariableDeclarationExpr)
243 variables
244 variable (VariableDeclarator)
245 initializer (MethodCallExpr)
246 name (SimpleName)
247 identifier='_createRegion'
248 arguments
249 argument (StringLiteralExpr)
250 value='r'
251 argument (NameExpr)
252 name (SimpleName)
253 identifier='s2'
254 name (SimpleName)
255 identifier='r_s1'
256 type (ClassOrInterfaceType)
257 name (SimpleName)
258 identifier='Region'
259 statement (BlockStmt)
260 statements
261 statement (ExpressionStmt)
262 expression (MethodCallExpr)
263 name (SimpleName)
264 identifier='_createState'
265 arguments
266 argument (StringLiteralExpr)
267 value='s6'
268 argument (NameExpr)
269 name (SimpleName)
270 identifier='r_s1'
271 statement (ExpressionStmt)
272 expression (MethodCallExpr)
273 name (SimpleName)
274 identifier='_createTransition'
275 arguments
276 argument (MethodCallExpr)
277 name (SimpleName)
278 identifier='findState'
279 arguments
280 argument (NameExpr)
281 name (SimpleName)
282 identifier='sc'
283 argument (StringLiteralExpr)
284 value='s4'
285 argument (MethodCallExpr)
286 name (SimpleName)
287 identifier='findState'
288 arguments
289 argument (NameExpr)
290 name (SimpleName)
291 identifier='sc'
292 argument (StringLiteralExpr)
293 value='s6'
294 statement (ExpressionStmt)
295 expression (VariableDeclarationExpr)
296 variables
297 variable (VariableDeclarator)
298 initializer (MethodCallExpr)
299 name (SimpleName)
300 identifier='transform'
301 scope (NameExpr)
302 name (SimpleName)
303 identifier='sequencer'
304 arguments
305 argument (NameExpr)
306 name (SimpleName)
307 identifier='sc'
308 name (SimpleName)
309 identifier='flow'
310 type (ClassOrInterfaceType)
311 name (SimpleName)
312 identifier='ExecutionFlow'
313 statement (ExpressionStmt)
314 expression (VariableDeclarationExpr)
315 variables
316 variable (VariableDeclarator)
317 initializer (MethodCallExpr)
318 name (SimpleName)
319 identifier='get'
320 scope (MethodCallExpr)
321 name (SimpleName)
322 identifier='getStates'
323 scope (NameExpr)
324 name (SimpleName)
325 identifier='flow'
326 arguments
327 argument (IntegerLiteralExpr)
328 value='0'
329 name (SimpleName)
330 identifier='_s1'
331 type (ClassOrInterfaceType)
332 name (SimpleName)
333 identifier='ExecutionState'
334 statement (ExpressionStmt)
335 expression (MethodCallExpr)
336 name (SimpleName)
337 identifier='assertEquals'
338 arguments
339 argument (StringLiteralExpr)
340 value='sc.r.s1'
341 argument (MethodCallExpr)
342 name (SimpleName)
343 identifier='getName'
344 scope (NameExpr)
345 name (SimpleName)
346 identifier='_s1'
347 statement (ExpressionStmt)
348 expression (MethodCallExpr)
349 name (SimpleName)
350 identifier='assertNotNull'
351 arguments
352 argument (MethodCallExpr)
353 name (SimpleName)
354 identifier='getExitAction'
355 scope (NameExpr)
356 name (SimpleName)
357 identifier='_s1'
358 statement (ExpressionStmt)
359 expression (VariableDeclarationExpr)
360 variables
361 variable (VariableDeclarator)
362 initializer (MethodCallExpr)
363 name (SimpleName)
364 identifier='get'
365 scope (MethodCallExpr)
366 name (SimpleName)
367 identifier='getStates'
368 scope (NameExpr)
369 name (SimpleName)
370 identifier='flow'
371 arguments
372 argument (IntegerLiteralExpr)
373 value='1'
374 name (SimpleName)
375 identifier='_s3'
376 type (ClassOrInterfaceType)
377 name (SimpleName)
378 identifier='ExecutionState'
379 statement (ExpressionStmt)
380 expression (MethodCallExpr)
381 name (SimpleName)
382 identifier='assertEquals'
383 arguments
384 argument (StringLiteralExpr)
385 value='sc.r.s1.r.s3'
386 argument (MethodCallExpr)
387 name (SimpleName)
388 identifier='getName'
389 scope (NameExpr)
390 name (SimpleName)
391 identifier='_s3'
392 statement (ExpressionStmt)
393 expression (MethodCallExpr)
394 name (SimpleName)
395 identifier='assertNull'
396 arguments
397 argument (MethodCallExpr)
398 name (SimpleName)
399 identifier='getExitAction'
400 scope (NameExpr)
401 name (SimpleName)
402 identifier='_s3'
403 statement (ExpressionStmt)
404 expression (VariableDeclarationExpr)
405 variables
406 variable (VariableDeclarator)
407 initializer (MethodCallExpr)
408 name (SimpleName)
409 identifier='get'
410 scope (MethodCallExpr)
411 name (SimpleName)
412 identifier='getStates'
413 scope (NameExpr)
414 name (SimpleName)
415 identifier='flow'
416 arguments
417 argument (IntegerLiteralExpr)
418 value='2'
419 name (SimpleName)
420 identifier='_s4'
421 type (ClassOrInterfaceType)
422 name (SimpleName)
423 identifier='ExecutionState'
424 statement (ExpressionStmt)
425 expression (MethodCallExpr)
426 name (SimpleName)
427 identifier='assertEquals'
428 arguments
429 argument (StringLiteralExpr)
430 value='sc.r.s1.r.s3.r.s4'
431 argument (MethodCallExpr)
432 name (SimpleName)
433 identifier='getName'
434 scope (NameExpr)
435 name (SimpleName)
436 identifier='_s4'
437 statement (ExpressionStmt)
438 expression (MethodCallExpr)
439 name (SimpleName)
440 identifier='assertNotNull'
441 arguments
442 argument (MethodCallExpr)
443 name (SimpleName)
444 identifier='getExitAction'
445 scope (NameExpr)
446 name (SimpleName)
447 identifier='_s4'
448 statement (ExpressionStmt)
449 expression (VariableDeclarationExpr)
450 variables
451 variable (VariableDeclarator)
452 initializer (MethodCallExpr)
453 name (SimpleName)
454 identifier='get'
455 scope (MethodCallExpr)
456 name (SimpleName)
457 identifier='getReactions'
458 scope (NameExpr)
459 name (SimpleName)
460 identifier='_s4'
461 arguments
462 argument (IntegerLiteralExpr)
463 value='0'
464 name (SimpleName)
465 identifier='_t'
466 type (ClassOrInterfaceType)
467 name (SimpleName)
468 identifier='Reaction'
469 statement (ExpressionStmt)
470 expression (MethodCallExpr)
471 name (SimpleName)
472 identifier='assertTrue'
473 arguments
474 argument (MethodCallExpr)
475 name (SimpleName)
476 identifier='isTransition'
477 scope (NameExpr)
478 name (SimpleName)
479 identifier='_t'
480 statement (ExpressionStmt)
481 expression (VariableDeclarationExpr)
482 variables
483 variable (VariableDeclarator)
484 initializer (CastExpr)
485 expression (MethodCallExpr)
486 name (SimpleName)
487 identifier='getEffect'
488 scope (NameExpr)
489 name (SimpleName)
490 identifier='_t'
491 type (ClassOrInterfaceType)
492 name (SimpleName)
493 identifier='Sequence'
494 name (SimpleName)
495 identifier='_effect'
496 type (ClassOrInterfaceType)
497 name (SimpleName)
498 identifier='Sequence'
499 statement (ExpressionStmt)
500 expression (MethodCallExpr)
501 name (SimpleName)
502 identifier='assertEquals'
503 arguments
504 argument (IntegerLiteralExpr)
505 value='2'
506 argument (MethodCallExpr)
507 name (SimpleName)
508 identifier='size'
509 scope (MethodCallExpr)
510 name (SimpleName)
511 identifier='getSteps'
512 scope (NameExpr)
513 name (SimpleName)
514 identifier='_effect'
515 statement (ExpressionStmt)
516 expression (MethodCallExpr)
517 name (SimpleName)
518 identifier='assertCall'
519 arguments
520 argument (NameExpr)
521 name (SimpleName)
522 identifier='_effect'
523 argument (IntegerLiteralExpr)
524 value='0'
525 argument (MethodCallExpr)
526 name (SimpleName)
527 identifier='getExitSequence'
528 scope (NameExpr)
529 name (SimpleName)
530 identifier='_s1'
531 type (VoidType)
532 name (SimpleName)
533 identifier='testParentExitPartial'
534 annotations
535 annotation (SingleMemberAnnotationExpr)
536 memberValue (StringLiteralExpr)
537 value='unused'
538 name (Name)
539 identifier='SuppressWarnings'
540 annotation (MarkerAnnotationExpr)
541 name (Name)
542 identifier='Test'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
6 13
13 14
6 15
15 16
16 17
2 18
18 19
19 20
20 21
21 22
22 23
23 24
24 25
25 26
24 27
27 28
28 29
27 30
30 31
31 32
23 33
33 34
23 35
35 36
36 37
19 38
38 39
39 40
40 41
41 42
42 43
43 44
42 45
45 46
46 47
45 48
48 49
49 50
45 51
51 52
52 53
41 54
54 55
41 56
56 57
57 58
19 59
59 60
60 61
61 62
62 63
63 64
64 65
63 66
66 67
67 68
66 69
69 70
70 71
62 72
72 73
62 74
74 75
75 76
19 77
77 78
78 79
79 80
80 81
81 82
82 83
83 84
84 85
83 86
86 87
87 88
86 89
89 90
90 91
82 92
92 93
82 94
94 95
95 96
78 97
97 98
98 99
99 100
100 101
101 102
100 103
103 104
104 105
105 106
103 107
107 108
108 109
103 110
110 111
98 112
112 113
113 114
114 115
115 116
116 117
117 118
116 119
119 120
120 121
119 122
122 123
123 124
115 125
125 126
115 127
127 128
128 129
98 130
130 131
131 132
132 133
133 134
134 135
135 136
136 137
137 138
136 139
139 140
140 141
139 142
142 143
143 144
135 145
145 146
135 147
147 148
148 149
131 150
150 151
151 152
152 153
153 154
154 155
155 156
156 157
157 158
156 159
159 160
160 161
159 162
162 163
163 164
155 165
165 166
155 167
167 168
168 169
151 170
170 171
171 172
172 173
173 174
174 175
175 176
176 177
177 178
176 179
179 180
180 181
179 182
182 183
183 184
175 185
185 186
175 187
187 188
188 189
171 190
190 191
191 192
192 193
191 194
194 195
195 196
196 197
194 198
198 199
199 200
194 201
201 202
171 203
203 204
204 205
205 206
206 207
207 208
208 209
207 210
210 211
211 212
210 213
213 214
214 215
206 216
216 217
206 218
218 219
219 220
78 221
221 222
222 223
223 224
224 225
225 226
226 227
225 228
228 229
229 230
228 231
231 232
232 233
224 234
234 235
224 236
236 237
237 238
78 239
239 240
240 241
241 242
242 243
243 244
244 245
245 246
246 247
245 248
248 249
249 250
248 251
251 252
252 253
244 254
254 255
244 256
256 257
257 258
240 259
259 260
260 261
261 262
262 263
263 264
262 265
265 266
266 267
265 268
268 269
269 270
2 271
271 272
272 273
273 274
272 275
275 276
276 277
277 278
276 279
279 280
280 281
281 282
279 283
283 284
275 285
285 286
286 287
285 288
288 289
289 290
290 291
288 292
292 293
2 294
294 295
295 296
296 297
297 298
298 299
299 300
298 301
301 302
302 303
298 304
304 305
305 306
306 307
297 308
308 309
297 310
310 311
311 312
2 313
313 314
314 315
315 316
316 317
317 318
318 319
317 320
320 321
321 322
320 323
323 324
324 325
317 326
326 327
327 328
316 329
329 330
316 331
331 332
332 333
2 334
334 335
335 336
336 337
335 338
338 339
339 340
338 341
341 342
342 343
341 344
344 345
345 346
2 347
347 348
348 349
349 350
348 351
351 352
352 353
353 354
352 355
355 356
356 357
2 358
358 359
359 360
360 361
361 362
362 363
363 364
362 365
365 366
366 367
365 368
368 369
369 370
362 371
371 372
372 373
361 374
374 375
361 376
376 377
377 378
2 379
379 380
380 381
381 382
380 383
383 384
384 385
383 386
386 387
387 388
386 389
389 390
390 391
2 392
392 393
393 394
394 395
393 396
396 397
397 398
398 399
397 400
400 401
401 402
2 403
403 404
404 405
405 406
406 407
407 408
408 409
407 410
410 411
411 412
410 413
413 414
414 415
407 416
416 417
417 418
406 419
419 420
406 421
421 422
422 423
2 424
424 425
425 426
426 427
425 428
428 429
429 430
428 431
431 432
432 433
431 434
434 435
435 436
2 437
437 438
438 439
439 440
438 441
441 442
442 443
443 444
442 445
445 446
446 447
2 448
448 449
449 450
450 451
451 452
452 453
453 454
452 455
455 456
456 457
455 458
458 459
459 460
452 461
461 462
462 463
451 464
464 465
451 466
466 467
467 468
2 469
469 470
470 471
471 472
470 473
473 474
474 475
475 476
474 477
477 478
478 479
2 480
480 481
481 482
482 483
483 484
484 485
485 486
486 487
485 488
488 489
489 490
484 491
491 492
492 493
483 494
494 495
483 496
496 497
497 498
2 499
499 500
500 501
501 502
500 503
503 504
504 505
503 506
506 507
507 508
506 509
509 510
510 511
509 512
512 513
513 514
2 515
515 516
516 517
517 518
516 519
519 520
520 521
521 522
519 523
523 524
519 525
525 526
526 527
525 528
528 529
529 530
0 531
0 532
532 533
0 534
534 535
535 536
536 537
535 538
538 539
534 540
540 541
541 542

The transition sequence must contain all exit actions for parent states that will be left by a transition. A parent state may have no exit action.
