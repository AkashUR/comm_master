68
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='fromData'
7 scope (SuperExpr)
8 arguments
9 argument (NameExpr)
10 name (SimpleName)
11 identifier='in'
12 statement (ExpressionStmt)
13 expression (AssignExpr)
14 operator='ASSIGN'
15 target (NameExpr)
16 name (SimpleName)
17 identifier='refreshInterval'
18 value (MethodCallExpr)
19 name (SimpleName)
20 identifier='readLong'
21 scope (NameExpr)
22 name (SimpleName)
23 identifier='in'
24 statement (ExpressionStmt)
25 expression (AssignExpr)
26 operator='ASSIGN'
27 target (NameExpr)
28 name (SimpleName)
29 identifier='alertDefs'
30 value (CastExpr)
31 expression (MethodCallExpr)
32 name (SimpleName)
33 identifier='readObjectArray'
34 scope (NameExpr)
35 name (SimpleName)
36 identifier='DataSerializer'
37 arguments
38 argument (NameExpr)
39 name (SimpleName)
40 identifier='in'
41 type (ArrayType)
42 origin='TYPE'
43 componentType (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='StatAlertDefinition'
46 type (VoidType)
47 name (SimpleName)
48 identifier='fromData'
49 parameters
50 parameter (Parameter)
51 isVarArgs='false'
52 name (SimpleName)
53 identifier='in'
54 type (ClassOrInterfaceType)
55 name (SimpleName)
56 identifier='DataInput'
57 thrownExceptions
58 thrownException (ClassOrInterfaceType)
59 name (SimpleName)
60 identifier='IOException'
61 thrownException (ClassOrInterfaceType)
62 name (SimpleName)
63 identifier='ClassNotFoundException'
64 annotations
65 annotation (MarkerAnnotationExpr)
66 name (Name)
67 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
4 8
8 9
9 10
10 11
2 12
12 13
13 14
13 15
15 16
16 17
13 18
18 19
19 20
18 21
21 22
22 23
2 24
24 25
25 26
25 27
27 28
28 29
25 30
30 31
31 32
32 33
31 34
34 35
35 36
31 37
37 38
38 39
39 40
30 41
41 42
41 43
43 44
44 45
0 46
0 47
47 48
0 49
49 50
50 51
50 52
52 53
50 54
54 55
55 56
0 57
57 58
58 59
59 60
57 61
61 62
62 63
0 64
64 65
65 66
66 67

A callback used by GemFire Data Serialization mechanism to read from a stream.
