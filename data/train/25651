131
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='PurityGraph'
11 name (SimpleName)
12 identifier='r'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='PurityGraph'
16 statement (ExpressionStmt)
17 expression (VariableDeclarationExpr)
18 variables
19 variable (VariableDeclarator)
20 initializer (MethodCallExpr)
21 name (SimpleName)
22 identifier='iterator'
23 scope (MethodCallExpr)
24 name (SimpleName)
25 identifier='getTails'
26 scope (NameExpr)
27 name (SimpleName)
28 identifier='graph'
29 name (SimpleName)
30 identifier='it'
31 type (ClassOrInterfaceType)
32 name (SimpleName)
33 identifier='Iterator'
34 statement (WhileStmt)
35 body (BlockStmt)
36 statements
37 statement (ExpressionStmt)
38 expression (VariableDeclarationExpr)
39 variables
40 variable (VariableDeclarator)
41 initializer (CastExpr)
42 expression (MethodCallExpr)
43 name (SimpleName)
44 identifier='next'
45 scope (NameExpr)
46 name (SimpleName)
47 identifier='it'
48 type (ClassOrInterfaceType)
49 name (SimpleName)
50 identifier='Stmt'
51 name (SimpleName)
52 identifier='stmt'
53 type (ClassOrInterfaceType)
54 name (SimpleName)
55 identifier='Stmt'
56 statement (ExpressionStmt)
57 expression (VariableDeclarationExpr)
58 variables
59 variable (VariableDeclarator)
60 initializer (CastExpr)
61 expression (MethodCallExpr)
62 name (SimpleName)
63 identifier='getFlowAfter'
64 arguments
65 argument (NameExpr)
66 name (SimpleName)
67 identifier='stmt'
68 type (ClassOrInterfaceType)
69 name (SimpleName)
70 identifier='PurityGraphBox'
71 name (SimpleName)
72 identifier='ref'
73 type (ClassOrInterfaceType)
74 name (SimpleName)
75 identifier='PurityGraphBox'
76 statement (ExpressionStmt)
77 expression (MethodCallExpr)
78 name (SimpleName)
79 identifier='union'
80 scope (NameExpr)
81 name (SimpleName)
82 identifier='r'
83 arguments
84 argument (FieldAccessExpr)
85 name (SimpleName)
86 identifier='g'
87 scope (NameExpr)
88 name (SimpleName)
89 identifier='ref'
90 condition (MethodCallExpr)
91 name (SimpleName)
92 identifier='hasNext'
93 scope (NameExpr)
94 name (SimpleName)
95 identifier='it'
96 statement (ExpressionStmt)
97 expression (MethodCallExpr)
98 name (SimpleName)
99 identifier='removeLocals'
100 scope (NameExpr)
101 name (SimpleName)
102 identifier='r'
103 statement (ExpressionStmt)
104 expression (AssignExpr)
105 operator='ASSIGN'
106 target (FieldAccessExpr)
107 name (SimpleName)
108 identifier='g'
109 scope (EnclosedExpr)
110 inner (CastExpr)
111 expression (NameExpr)
112 name (SimpleName)
113 identifier='dst'
114 type (ClassOrInterfaceType)
115 name (SimpleName)
116 identifier='PurityGraphBox'
117 value (NameExpr)
118 name (SimpleName)
119 identifier='r'
120 type (VoidType)
121 name (SimpleName)
122 identifier='copyResult'
123 parameters
124 parameter (Parameter)
125 isVarArgs='false'
126 name (SimpleName)
127 identifier='dst'
128 type (ClassOrInterfaceType)
129 name (SimpleName)
130 identifier='Object'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
19 20
20 21
21 22
20 23
23 24
24 25
23 26
26 27
27 28
19 29
29 30
19 31
31 32
32 33
2 34
34 35
35 36
36 37
37 38
38 39
39 40
40 41
41 42
42 43
43 44
42 45
45 46
46 47
41 48
48 49
49 50
40 51
51 52
40 53
53 54
54 55
36 56
56 57
57 58
58 59
59 60
60 61
61 62
62 63
61 64
64 65
65 66
66 67
60 68
68 69
69 70
59 71
71 72
59 73
73 74
74 75
36 76
76 77
77 78
78 79
77 80
80 81
81 82
77 83
83 84
84 85
85 86
84 87
87 88
88 89
34 90
90 91
91 92
90 93
93 94
94 95
2 96
96 97
97 98
98 99
97 100
100 101
101 102
2 103
103 104
104 105
104 106
106 107
107 108
106 109
109 110
110 111
111 112
112 113
110 114
114 115
115 116
104 117
117 118
118 119
0 120
0 121
121 122
0 123
123 124
124 125
124 126
126 127
124 128
128 129
129 130

Put into dst the purity graph obtained by merging all purity graphs at the method return. It is a valid summary that can be used in methodCall if you do interprocedural analysis.
