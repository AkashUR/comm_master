62
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (AssertStmt)
4 check (BinaryExpr)
5 operator='NOT_EQUALS'
6 left (NameExpr)
7 name (SimpleName)
8 identifier='address'
9 right (NullLiteralExpr)
10 statement (AssertStmt)
11 check (BinaryExpr)
12 operator='NOT_EQUALS'
13 left (NameExpr)
14 name (SimpleName)
15 identifier='memoryModule'
16 right (NullLiteralExpr)
17 statement (ExpressionStmt)
18 expression (AssignExpr)
19 operator='ASSIGN'
20 target (FieldAccessExpr)
21 name (SimpleName)
22 identifier='address'
23 scope (ThisExpr)
24 value (NameExpr)
25 name (SimpleName)
26 identifier='address'
27 statement (ExpressionStmt)
28 expression (AssignExpr)
29 operator='ASSIGN'
30 target (FieldAccessExpr)
31 name (SimpleName)
32 identifier='function'
33 scope (ThisExpr)
34 value (NullLiteralExpr)
35 statement (ExpressionStmt)
36 expression (AssignExpr)
37 operator='ASSIGN'
38 target (FieldAccessExpr)
39 name (SimpleName)
40 identifier='memoryModule'
41 scope (ThisExpr)
42 value (NameExpr)
43 name (SimpleName)
44 identifier='memoryModule'
45 name (SimpleName)
46 identifier='ResolvedFunction'
47 parameters
48 parameter (Parameter)
49 isVarArgs='false'
50 name (SimpleName)
51 identifier='memoryModule'
52 type (ClassOrInterfaceType)
53 name (SimpleName)
54 identifier='MemoryModule'
55 parameter (Parameter)
56 isVarArgs='false'
57 name (SimpleName)
58 identifier='address'
59 type (ClassOrInterfaceType)
60 name (SimpleName)
61 identifier='Address'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
4 9
2 10
10 11
11 12
11 13
13 14
14 15
11 16
2 17
17 18
18 19
18 20
20 21
21 22
20 23
18 24
24 25
25 26
2 27
27 28
28 29
28 30
30 31
31 32
30 33
28 34
2 35
35 36
36 37
36 38
38 39
39 40
38 41
36 42
42 43
43 44
0 45
45 46
0 47
47 48
48 49
48 50
50 51
48 52
52 53
53 54
47 55
55 56
55 57
57 58
55 59
59 60
60 61

Creates a new function object if the memory module and the function address could be resolved.
