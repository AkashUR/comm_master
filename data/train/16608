98
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (ArrayAccessExpr)
7 index (UnaryExpr)
8 operator='POSTFIX_INCREMENT'
9 expression (NameExpr)
10 name (SimpleName)
11 identifier='offset'
12 name (NameExpr)
13 name (SimpleName)
14 identifier='buffer'
15 value (CastExpr)
16 expression (IntegerLiteralExpr)
17 value='0'
18 type (PrimitiveType)
19 type='BYTE'
20 statement (ExpressionStmt)
21 expression (AssignExpr)
22 operator='ASSIGN'
23 target (ArrayAccessExpr)
24 index (UnaryExpr)
25 operator='POSTFIX_INCREMENT'
26 expression (NameExpr)
27 name (SimpleName)
28 identifier='offset'
29 name (NameExpr)
30 name (SimpleName)
31 identifier='buffer'
32 value (CastExpr)
33 expression (IntegerLiteralExpr)
34 value='0'
35 type (PrimitiveType)
36 type='BYTE'
37 statement (ExpressionStmt)
38 expression (AssignExpr)
39 operator='ASSIGN'
40 target (ArrayAccessExpr)
41 index (UnaryExpr)
42 operator='POSTFIX_INCREMENT'
43 expression (NameExpr)
44 name (SimpleName)
45 identifier='offset'
46 name (NameExpr)
47 name (SimpleName)
48 identifier='buffer'
49 value (CastExpr)
50 expression (EnclosedExpr)
51 inner (BinaryExpr)
52 operator='BINARY_AND'
53 left (EnclosedExpr)
54 inner (BinaryExpr)
55 operator='SIGNED_RIGHT_SHIFT'
56 left (NameExpr)
57 name (SimpleName)
58 identifier='i'
59 right (IntegerLiteralExpr)
60 value='8'
61 right (IntegerLiteralExpr)
62 value='0xff'
63 type (PrimitiveType)
64 type='BYTE'
65 statement (ExpressionStmt)
66 expression (AssignExpr)
67 operator='ASSIGN'
68 target (ArrayAccessExpr)
69 index (UnaryExpr)
70 operator='POSTFIX_INCREMENT'
71 expression (NameExpr)
72 name (SimpleName)
73 identifier='offset'
74 name (NameExpr)
75 name (SimpleName)
76 identifier='buffer'
77 value (CastExpr)
78 expression (EnclosedExpr)
79 inner (BinaryExpr)
80 operator='BINARY_AND'
81 left (NameExpr)
82 name (SimpleName)
83 identifier='i'
84 right (IntegerLiteralExpr)
85 value='0xff'
86 type (PrimitiveType)
87 type='BYTE'
88 type (VoidType)
89 name (SimpleName)
90 identifier='writeShort'
91 parameters
92 parameter (Parameter)
93 isVarArgs='false'
94 name (SimpleName)
95 identifier='i'
96 type (PrimitiveType)
97 type='SHORT'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
7 9
9 10
10 11
6 12
12 13
13 14
4 15
15 16
16 17
15 18
18 19
2 20
20 21
21 22
21 23
23 24
24 25
24 26
26 27
27 28
23 29
29 30
30 31
21 32
32 33
33 34
32 35
35 36
2 37
37 38
38 39
38 40
40 41
41 42
41 43
43 44
44 45
40 46
46 47
47 48
38 49
49 50
50 51
51 52
51 53
53 54
54 55
54 56
56 57
57 58
54 59
59 60
51 61
61 62
49 63
63 64
2 65
65 66
66 67
66 68
68 69
69 70
69 71
71 72
72 73
68 74
74 75
75 76
66 77
77 78
78 79
79 80
79 81
81 82
82 83
79 84
84 85
77 86
86 87
0 88
0 89
89 90
0 91
91 92
92 93
92 94
94 95
92 96
96 97

Puts a short integer into the buffer as 2 bytes, big-endian but w/ leading zeros (e.g., as if an int32 value). This is based on looking at ganglia data as received on the wire. For example, <code>cpu_num</code> is reported as ushort.
