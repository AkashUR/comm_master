142
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='NioSocketAcceptor'
11 name (SimpleName)
12 identifier='acceptor'
13 type (ClassOrInterfaceType)
14 name (SimpleName)
15 identifier='IoAcceptor'
16 statement (ExpressionStmt)
17 expression (MethodCallExpr)
18 name (SimpleName)
19 identifier='addLast'
20 scope (MethodCallExpr)
21 name (SimpleName)
22 identifier='getFilterChain'
23 scope (NameExpr)
24 name (SimpleName)
25 identifier='acceptor'
26 arguments
27 argument (StringLiteralExpr)
28 value='logger'
29 argument (ObjectCreationExpr)
30 type (ClassOrInterfaceType)
31 name (SimpleName)
32 identifier='LoggingFilter'
33 statement (ExpressionStmt)
34 expression (MethodCallExpr)
35 name (SimpleName)
36 identifier='addLast'
37 scope (MethodCallExpr)
38 name (SimpleName)
39 identifier='getFilterChain'
40 scope (NameExpr)
41 name (SimpleName)
42 identifier='acceptor'
43 arguments
44 argument (StringLiteralExpr)
45 value='codec'
46 argument (ObjectCreationExpr)
47 type (ClassOrInterfaceType)
48 name (SimpleName)
49 identifier='ProtocolCodecFilter'
50 arguments
51 argument (ObjectCreationExpr)
52 type (ClassOrInterfaceType)
53 name (SimpleName)
54 identifier='TextLineCodecFactory'
55 arguments
56 argument (MethodCallExpr)
57 name (SimpleName)
58 identifier='forName'
59 scope (NameExpr)
60 name (SimpleName)
61 identifier='Charset'
62 arguments
63 argument (StringLiteralExpr)
64 value='UTF-8'
65 statement (ExpressionStmt)
66 expression (MethodCallExpr)
67 name (SimpleName)
68 identifier='setHandler'
69 scope (NameExpr)
70 name (SimpleName)
71 identifier='acceptor'
72 arguments
73 argument (ObjectCreationExpr)
74 type (ClassOrInterfaceType)
75 name (SimpleName)
76 identifier='TimeServerHandler'
77 statement (ExpressionStmt)
78 expression (MethodCallExpr)
79 name (SimpleName)
80 identifier='setReadBufferSize'
81 scope (MethodCallExpr)
82 name (SimpleName)
83 identifier='getSessionConfig'
84 scope (NameExpr)
85 name (SimpleName)
86 identifier='acceptor'
87 arguments
88 argument (IntegerLiteralExpr)
89 value='2048'
90 statement (ExpressionStmt)
91 expression (MethodCallExpr)
92 name (SimpleName)
93 identifier='setIdleTime'
94 scope (MethodCallExpr)
95 name (SimpleName)
96 identifier='getSessionConfig'
97 scope (NameExpr)
98 name (SimpleName)
99 identifier='acceptor'
100 arguments
101 argument (FieldAccessExpr)
102 name (SimpleName)
103 identifier='BOTH_IDLE'
104 scope (NameExpr)
105 name (SimpleName)
106 identifier='IdleStatus'
107 argument (IntegerLiteralExpr)
108 value='10'
109 statement (ExpressionStmt)
110 expression (MethodCallExpr)
111 name (SimpleName)
112 identifier='bind'
113 scope (NameExpr)
114 name (SimpleName)
115 identifier='acceptor'
116 arguments
117 argument (ObjectCreationExpr)
118 type (ClassOrInterfaceType)
119 name (SimpleName)
120 identifier='InetSocketAddress'
121 arguments
122 argument (NameExpr)
123 name (SimpleName)
124 identifier='PORT'
125 type (VoidType)
126 name (SimpleName)
127 identifier='main'
128 parameters
129 parameter (Parameter)
130 isVarArgs='false'
131 name (SimpleName)
132 identifier='args'
133 type (ArrayType)
134 origin='TYPE'
135 componentType (ClassOrInterfaceType)
136 name (SimpleName)
137 identifier='String'
138 thrownExceptions
139 thrownException (ClassOrInterfaceType)
140 name (SimpleName)
141 identifier='IOException'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
6 11
11 12
6 13
13 14
14 15
2 16
16 17
17 18
18 19
17 20
20 21
21 22
20 23
23 24
24 25
17 26
26 27
27 28
26 29
29 30
30 31
31 32
2 33
33 34
34 35
35 36
34 37
37 38
38 39
37 40
40 41
41 42
34 43
43 44
44 45
43 46
46 47
47 48
48 49
46 50
50 51
51 52
52 53
53 54
51 55
55 56
56 57
57 58
56 59
59 60
60 61
56 62
62 63
63 64
2 65
65 66
66 67
67 68
66 69
69 70
70 71
66 72
72 73
73 74
74 75
75 76
2 77
77 78
78 79
79 80
78 81
81 82
82 83
81 84
84 85
85 86
78 87
87 88
88 89
2 90
90 91
91 92
92 93
91 94
94 95
95 96
94 97
97 98
98 99
91 100
100 101
101 102
102 103
101 104
104 105
105 106
100 107
107 108
2 109
109 110
110 111
111 112
110 113
113 114
114 115
110 116
116 117
117 118
118 119
119 120
117 121
121 122
122 123
123 124
0 125
0 126
126 127
0 128
128 129
129 130
129 131
131 132
129 133
133 134
133 135
135 136
136 137
0 138
138 139
139 140
140 141

The server implementation. It's based on TCP, and uses a logging filter  plus a text line decoder.
