65
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ForeachStmt)
4 body (BlockStmt)
5 statements
6 statement (ExpressionStmt)
7 expression (MethodCallExpr)
8 name (SimpleName)
9 identifier='union'
10 arguments
11 argument (MethodCallExpr)
12 name (SimpleName)
13 identifier='getKey'
14 scope (NameExpr)
15 name (SimpleName)
16 identifier='entry'
17 argument (MethodCallExpr)
18 name (SimpleName)
19 identifier='getValue'
20 scope (NameExpr)
21 name (SimpleName)
22 identifier='entry'
23 iterable (MethodCallExpr)
24 name (SimpleName)
25 identifier='entrySet'
26 scope (MethodCallExpr)
27 name (SimpleName)
28 identifier='getMatches'
29 scope (NameExpr)
30 name (SimpleName)
31 identifier='other'
32 variable (VariableDeclarationExpr)
33 variables
34 variable (VariableDeclarator)
35 name (SimpleName)
36 identifier='entry'
37 type (ClassOrInterfaceType)
38 name (SimpleName)
39 identifier='Entry'
40 scope (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='Map'
43 typeArguments
44 typeArgument (ClassOrInterfaceType)
45 name (SimpleName)
46 identifier='R'
47 typeArgument (ClassOrInterfaceType)
48 name (SimpleName)
49 identifier='R'
50 type (VoidType)
51 name (SimpleName)
52 identifier='merge'
53 parameters
54 parameter (Parameter)
55 isVarArgs='false'
56 name (SimpleName)
57 identifier='other'
58 type (ClassOrInterfaceType)
59 name (SimpleName)
60 identifier='DisjointSet'
61 typeArguments
62 typeArgument (ClassOrInterfaceType)
63 name (SimpleName)
64 identifier='R'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
12 13
11 14
14 15
15 16
10 17
17 18
18 19
17 20
20 21
21 22
3 23
23 24
24 25
23 26
26 27
27 28
26 29
29 30
30 31
3 32
32 33
33 34
34 35
35 36
34 37
37 38
38 39
37 40
40 41
41 42
37 43
43 44
44 45
45 46
43 47
47 48
48 49
0 50
0 51
51 52
0 53
53 54
54 55
54 56
56 57
54 58
58 59
59 60
58 61
61 62
62 63
63 64

Merge works in a similar fashion to a naive symmetric hash join. We keep the current disjoint sets and attach all nodes of 'other' incrementally There is certainly room for further optimisations...
