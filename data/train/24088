99
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='registerInput'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='varName'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='rdd'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='format'
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='hasHeader'
20 argument (NameExpr)
21 name (SimpleName)
22 identifier='delim'
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='fill'
26 argument (NameExpr)
27 name (SimpleName)
28 identifier='fillValue'
29 argument (UnaryExpr)
30 operator='MINUS'
31 expression (IntegerLiteralExpr)
32 value='1'
33 argument (UnaryExpr)
34 operator='MINUS'
35 expression (IntegerLiteralExpr)
36 value='1'
37 argument (UnaryExpr)
38 operator='MINUS'
39 expression (IntegerLiteralExpr)
40 value='1'
41 type (VoidType)
42 name (SimpleName)
43 identifier='registerInput'
44 parameters
45 parameter (Parameter)
46 isVarArgs='false'
47 name (SimpleName)
48 identifier='varName'
49 type (ClassOrInterfaceType)
50 name (SimpleName)
51 identifier='String'
52 parameter (Parameter)
53 isVarArgs='false'
54 name (SimpleName)
55 identifier='rdd'
56 type (ClassOrInterfaceType)
57 name (SimpleName)
58 identifier='JavaRDD'
59 typeArguments
60 typeArgument (ClassOrInterfaceType)
61 name (SimpleName)
62 identifier='String'
63 parameter (Parameter)
64 isVarArgs='false'
65 name (SimpleName)
66 identifier='format'
67 type (ClassOrInterfaceType)
68 name (SimpleName)
69 identifier='String'
70 parameter (Parameter)
71 isVarArgs='false'
72 name (SimpleName)
73 identifier='hasHeader'
74 type (PrimitiveType)
75 type='BOOLEAN'
76 parameter (Parameter)
77 isVarArgs='false'
78 name (SimpleName)
79 identifier='delim'
80 type (ClassOrInterfaceType)
81 name (SimpleName)
82 identifier='String'
83 parameter (Parameter)
84 isVarArgs='false'
85 name (SimpleName)
86 identifier='fill'
87 type (PrimitiveType)
88 type='BOOLEAN'
89 parameter (Parameter)
90 isVarArgs='false'
91 name (SimpleName)
92 identifier='fillValue'
93 type (PrimitiveType)
94 type='DOUBLE'
95 thrownExceptions
96 thrownException (ClassOrInterfaceType)
97 name (SimpleName)
98 identifier='DMLRuntimeException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
7 14
14 15
15 16
7 17
17 18
18 19
7 20
20 21
21 22
7 23
23 24
24 25
7 26
26 27
27 28
7 29
29 30
29 31
31 32
7 33
33 34
33 35
35 36
7 37
37 38
37 39
39 40
0 41
0 42
42 43
0 44
44 45
45 46
45 47
47 48
45 49
49 50
50 51
44 52
52 53
52 54
54 55
52 56
56 57
57 58
56 59
59 60
60 61
61 62
44 63
63 64
63 65
65 66
63 67
67 68
68 69
44 70
70 71
70 72
72 73
70 74
74 75
44 76
76 77
76 78
78 79
76 80
80 81
81 82
44 83
83 84
83 85
85 86
83 87
87 88
44 89
89 90
89 91
91 92
89 93
93 94
0 95
95 96
96 97
97 98

Register CSV/Text as inputs: Method for supplying csv file format properties, but without dimensions or nnz <p> Marks the variable in the DML script as input variable. Note that this expects a "varName = read(...)" statement in the DML script which through non-MLContext invocation would have been created by reading a HDFS file.
