63
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (FieldAccessExpr)
7 name (SimpleName)
8 identifier='length'
9 scope (ThisExpr)
10 value (NameExpr)
11 name (SimpleName)
12 identifier='length'
13 statement (ExpressionStmt)
14 expression (AssignExpr)
15 operator='ASSIGN'
16 target (FieldAccessExpr)
17 name (SimpleName)
18 identifier='backingArraySize'
19 scope (ThisExpr)
20 value (BinaryExpr)
21 operator='PLUS'
22 left (EnclosedExpr)
23 inner (BinaryExpr)
24 operator='BINARY_AND'
25 left (NameExpr)
26 name (SimpleName)
27 identifier='length'
28 right (IntegerLiteralExpr)
29 value='1'
30 right (EnclosedExpr)
31 inner (BinaryExpr)
32 operator='SIGNED_RIGHT_SHIFT'
33 left (NameExpr)
34 name (SimpleName)
35 identifier='length'
36 right (IntegerLiteralExpr)
37 value='1'
38 statement (ExpressionStmt)
39 expression (AssignExpr)
40 operator='ASSIGN'
41 target (FieldAccessExpr)
42 name (SimpleName)
43 identifier='backingArray'
44 scope (ThisExpr)
45 value (ObjectCreationExpr)
46 type (ClassOrInterfaceType)
47 name (SimpleName)
48 identifier='AtomicIntegerArray'
49 arguments
50 argument (FieldAccessExpr)
51 name (SimpleName)
52 identifier='backingArraySize'
53 scope (ThisExpr)
54 name (SimpleName)
55 identifier='AtomicShortArray'
56 parameters
57 parameter (Parameter)
58 isVarArgs='false'
59 name (SimpleName)
60 identifier='length'
61 type (PrimitiveType)
62 type='INT'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
6 9
4 10
10 11
11 12
2 13
13 14
14 15
14 16
16 17
17 18
16 19
14 20
20 21
20 22
22 23
23 24
23 25
25 26
26 27
23 28
28 29
20 30
30 31
31 32
31 33
33 34
34 35
31 36
36 37
2 38
38 39
39 40
39 41
41 42
42 43
41 44
39 45
45 46
46 47
47 48
45 49
49 50
50 51
51 52
50 53
0 54
54 55
0 56
56 57
57 58
57 59
59 60
57 61
61 62

Creates an atomic short array of a given length
