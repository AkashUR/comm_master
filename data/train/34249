57
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='perpendicular'
7 arguments
8 argument (MethodCallExpr)
9 name (SimpleName)
10 identifier='x'
11 scope (NameExpr)
12 name (SimpleName)
13 identifier='v'
14 argument (MethodCallExpr)
15 name (SimpleName)
16 identifier='y'
17 scope (NameExpr)
18 name (SimpleName)
19 identifier='v'
20 argument (MethodCallExpr)
21 name (SimpleName)
22 identifier='z'
23 scope (NameExpr)
24 name (SimpleName)
25 identifier='v'
26 argument (NameExpr)
27 name (SimpleName)
28 identifier='dest1'
29 argument (NameExpr)
30 name (SimpleName)
31 identifier='dest2'
32 type (VoidType)
33 name (SimpleName)
34 identifier='perpendicular'
35 parameters
36 parameter (Parameter)
37 isVarArgs='false'
38 name (SimpleName)
39 identifier='v'
40 type (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='Vector3fc'
43 parameter (Parameter)
44 isVarArgs='false'
45 name (SimpleName)
46 identifier='dest1'
47 type (ClassOrInterfaceType)
48 name (SimpleName)
49 identifier='Vector3f'
50 parameter (Parameter)
51 isVarArgs='false'
52 name (SimpleName)
53 identifier='dest2'
54 type (ClassOrInterfaceType)
55 name (SimpleName)
56 identifier='Vector3f'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
8 11
11 12
12 13
7 14
14 15
15 16
14 17
17 18
18 19
7 20
20 21
21 22
20 23
23 24
24 25
7 26
26 27
27 28
7 29
29 30
30 31
0 32
0 33
33 34
0 35
35 36
36 37
36 38
38 39
36 40
40 41
41 42
35 43
43 44
43 45
45 46
43 47
47 48
48 49
35 50
50 51
50 52
52 53
50 54
54 55
55 56

Compute two arbitrary vectors perpendicular to the given normalized vector <code>v</code>, and store them in <code>dest1</code> and <code>dest2</code>, respectively. <p> The computed vectors will themselves be perpendicular to each another and normalized. So the tree vectors <code>v</code>, <code>dest1</code> and <code>dest2</code> form an orthonormal basis.
