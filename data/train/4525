65
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='compactNodeNumbering'
7 scope (FieldAccessExpr)
8 name (SimpleName)
9 identifier='cfg'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='ir'
13 statement (ExpressionStmt)
14 expression (MethodCallExpr)
15 name (SimpleName)
16 identifier='approximate'
17 scope (NameExpr)
18 name (SimpleName)
19 identifier='LTDominators'
20 arguments
21 argument (NameExpr)
22 name (SimpleName)
23 identifier='ir'
24 argument (BooleanLiteralExpr)
25 value='true'
26 statement (ExpressionStmt)
27 expression (MethodCallExpr)
28 name (SimpleName)
29 identifier='perform'
30 scope (NameExpr)
31 name (SimpleName)
32 identifier='DominatorTree'
33 arguments
34 argument (NameExpr)
35 name (SimpleName)
36 identifier='ir'
37 argument (BooleanLiteralExpr)
38 value='true'
39 statement (ExpressionStmt)
40 expression (MethodCallExpr)
41 name (SimpleName)
42 identifier='perform'
43 scope (NameExpr)
44 name (SimpleName)
45 identifier='LSTGraph'
46 arguments
47 argument (NameExpr)
48 name (SimpleName)
49 identifier='ir'
50 type (VoidType)
51 name (SimpleName)
52 identifier='perform'
53 parameters
54 parameter (Parameter)
55 isVarArgs='false'
56 name (SimpleName)
57 identifier='ir'
58 type (ClassOrInterfaceType)
59 name (SimpleName)
60 identifier='IR'
61 annotations
62 annotation (MarkerAnnotationExpr)
63 name (Name)
64 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
7 10
10 11
11 12
2 13
13 14
14 15
15 16
14 17
17 18
18 19
14 20
20 21
21 22
22 23
20 24
24 25
2 26
26 27
27 28
28 29
27 30
30 31
31 32
27 33
33 34
34 35
35 36
33 37
37 38
2 39
39 40
40 41
41 42
40 43
43 44
44 45
40 46
46 47
47 48
48 49
0 50
0 51
51 52
0 53
53 54
54 55
54 56
56 57
54 58
58 59
59 60
0 61
61 62
62 63
63 64

Build the Loop Structure Tree (LST) for the given IR. NOTE: CFG must be reducible. TODO: Detect irreducible CFG, apply node splitting and then construct LST.
