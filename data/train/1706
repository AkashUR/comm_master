41
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='add'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='mModules'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='module'
14 statement (ExpressionStmt)
15 expression (MethodCallExpr)
16 name (SimpleName)
17 identifier='registerListeners'
18 arguments
19 argument (NameExpr)
20 name (SimpleName)
21 identifier='module'
22 statement (ExpressionStmt)
23 expression (MethodCallExpr)
24 name (SimpleName)
25 identifier='registerProviders'
26 arguments
27 argument (NameExpr)
28 name (SimpleName)
29 identifier='module'
30 type (VoidType)
31 name (SimpleName)
32 identifier='addModule'
33 parameters
34 parameter (Parameter)
35 isVarArgs='false'
36 name (SimpleName)
37 identifier='module'
38 type (ClassOrInterfaceType)
39 name (SimpleName)
40 identifier='Module'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
2 14
14 15
15 16
16 17
15 18
18 19
19 20
20 21
2 22
22 23
23 24
24 25
23 26
26 27
27 28
28 29
0 30
0 31
31 32
0 33
33 34
34 35
34 36
36 37
34 38
38 39
39 40

Adds a module to the processing chain.  Each module is tested for the interfaces that it supports and is registered or receives a listener to consume or produce the supported interface data type.  All elements and events that are produced by any module are automatically routed to  all other components that support the corresponding listener interface. At least one module should consume complex samples and either produce decoded messages and/or audio, or produce decoded real sample buffers for all other modules to consume.
