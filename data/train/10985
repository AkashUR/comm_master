117
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (ObjectCreationExpr)
8 type (ClassOrInterfaceType)
9 name (SimpleName)
10 identifier='ECFieldF2m'
11 arguments
12 argument (IntegerLiteralExpr)
13 value='2000'
14 argument (ArrayCreationExpr)
15 elementType (PrimitiveType)
16 type='INT'
17 initializer (ArrayInitializerExpr)
18 values
19 value (IntegerLiteralExpr)
20 value='981'
21 value (IntegerLiteralExpr)
22 value='2'
23 value (IntegerLiteralExpr)
24 value='1'
25 levels
26 level (ArrayCreationLevel)
27 name (SimpleName)
28 identifier='f1'
29 type (ClassOrInterfaceType)
30 name (SimpleName)
31 identifier='ECFieldF2m'
32 statement (ExpressionStmt)
33 expression (VariableDeclarationExpr)
34 variables
35 variable (VariableDeclarator)
36 initializer (ObjectCreationExpr)
37 type (ClassOrInterfaceType)
38 name (SimpleName)
39 identifier='ECFieldF2m'
40 arguments
41 argument (IntegerLiteralExpr)
42 value='2000'
43 argument (MethodCallExpr)
44 name (SimpleName)
45 identifier='setBit'
46 scope (MethodCallExpr)
47 name (SimpleName)
48 identifier='setBit'
49 scope (MethodCallExpr)
50 name (SimpleName)
51 identifier='setBit'
52 scope (MethodCallExpr)
53 name (SimpleName)
54 identifier='setBit'
55 scope (MethodCallExpr)
56 name (SimpleName)
57 identifier='setBit'
58 scope (MethodCallExpr)
59 name (SimpleName)
60 identifier='valueOf'
61 scope (NameExpr)
62 name (SimpleName)
63 identifier='BigInteger'
64 arguments
65 argument (LongLiteralExpr)
66 value='0L'
67 arguments
68 argument (IntegerLiteralExpr)
69 value='0'
70 arguments
71 argument (IntegerLiteralExpr)
72 value='1'
73 arguments
74 argument (IntegerLiteralExpr)
75 value='2'
76 arguments
77 argument (IntegerLiteralExpr)
78 value='981'
79 arguments
80 argument (IntegerLiteralExpr)
81 value='2000'
82 name (SimpleName)
83 identifier='f2'
84 type (ClassOrInterfaceType)
85 name (SimpleName)
86 identifier='ECFieldF2m'
87 statement (ExpressionStmt)
88 expression (MethodCallExpr)
89 name (SimpleName)
90 identifier='assertTrue'
91 arguments
92 argument (BinaryExpr)
93 operator='AND'
94 left (MethodCallExpr)
95 name (SimpleName)
96 identifier='equals'
97 scope (NameExpr)
98 name (SimpleName)
99 identifier='f1'
100 arguments
101 argument (NameExpr)
102 name (SimpleName)
103 identifier='f2'
104 right (MethodCallExpr)
105 name (SimpleName)
106 identifier='equals'
107 scope (NameExpr)
108 name (SimpleName)
109 identifier='f2'
110 arguments
111 argument (NameExpr)
112 name (SimpleName)
113 identifier='f1'
114 type (VoidType)
115 name (SimpleName)
116 identifier='testEqualsObject04'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
7 11
11 12
12 13
11 14
14 15
15 16
14 17
17 18
18 19
19 20
18 21
21 22
18 23
23 24
14 25
25 26
6 27
27 28
6 29
29 30
30 31
2 32
32 33
33 34
34 35
35 36
36 37
37 38
38 39
36 40
40 41
41 42
40 43
43 44
44 45
43 46
46 47
47 48
46 49
49 50
50 51
49 52
52 53
53 54
52 55
55 56
56 57
55 58
58 59
59 60
58 61
61 62
62 63
58 64
64 65
65 66
55 67
67 68
68 69
52 70
70 71
71 72
49 73
73 74
74 75
46 76
76 77
77 78
43 79
79 80
80 81
35 82
82 83
35 84
84 85
85 86
2 87
87 88
88 89
89 90
88 91
91 92
92 93
92 94
94 95
95 96
94 97
97 98
98 99
94 100
100 101
101 102
102 103
92 104
104 105
105 106
104 107
107 108
108 109
104 110
110 111
111 112
112 113
0 114
0 115
115 116

Test #4 for <code>equals()</code> method.<br> Assertion: pentanomial basis - objects equal if their m, and rp are mutually equal.
