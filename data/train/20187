180
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='createPathExpression'
10 arguments
11 argument (BooleanLiteralExpr)
12 value='true'
13 argument (BooleanLiteralExpr)
14 value='true'
15 argument (BooleanLiteralExpr)
16 value='true'
17 name (SimpleName)
18 identifier='pathExpression'
19 type (ClassOrInterfaceType)
20 name (SimpleName)
21 identifier='PathExpression'
22 statement (ExpressionStmt)
23 expression (VariableDeclarationExpr)
24 variables
25 variable (VariableDeclarator)
26 initializer (ObjectCreationExpr)
27 type (ClassOrInterfaceType)
28 name (SimpleName)
29 identifier='GraphModel'
30 name (SimpleName)
31 identifier='graph'
32 type (ClassOrInterfaceType)
33 name (SimpleName)
34 identifier='GraphModel'
35 statement (ExpressionStmt)
36 expression (VariableDeclarationExpr)
37 variables
38 variable (VariableDeclarator)
39 initializer (MethodCallExpr)
40 name (SimpleName)
41 identifier='fillGraphModel'
42 arguments
43 argument (NameExpr)
44 name (SimpleName)
45 identifier='graph'
46 name (SimpleName)
47 identifier='nodes'
48 type (ArrayType)
49 origin='TYPE'
50 componentType (ClassOrInterfaceType)
51 name (SimpleName)
52 identifier='GraphNode'
53 statement (ExpressionStmt)
54 expression (VariableDeclarationExpr)
55 variables
56 variable (VariableDeclarator)
57 initializer (MethodCallExpr)
58 name (SimpleName)
59 identifier='nextMatch'
60 scope (NameExpr)
61 name (SimpleName)
62 identifier='pathExpression'
63 arguments
64 argument (NameExpr)
65 name (SimpleName)
66 identifier='graph'
67 argument (MethodCallExpr)
68 name (SimpleName)
69 identifier='buildSingleSet'
70 arguments
71 argument (ArrayAccessExpr)
72 index (IntegerLiteralExpr)
73 value='0'
74 name (NameExpr)
75 name (SimpleName)
76 identifier='nodes'
77 name (SimpleName)
78 identifier='output'
79 type (ClassOrInterfaceType)
80 name (SimpleName)
81 identifier='Collection'
82 typeArguments
83 typeArgument (ClassOrInterfaceType)
84 name (SimpleName)
85 identifier='GraphNode'
86 statement (ExpressionStmt)
87 expression (MethodCallExpr)
88 name (SimpleName)
89 identifier='assertEquals'
90 arguments
91 argument (IntegerLiteralExpr)
92 value='6'
93 argument (MethodCallExpr)
94 name (SimpleName)
95 identifier='size'
96 scope (NameExpr)
97 name (SimpleName)
98 identifier='output'
99 statement (ExpressionStmt)
100 expression (MethodCallExpr)
101 name (SimpleName)
102 identifier='assertGraphContainsElement'
103 arguments
104 argument (NameExpr)
105 name (SimpleName)
106 identifier='output'
107 argument (NameExpr)
108 name (SimpleName)
109 identifier='nodes'
110 argument (IntegerLiteralExpr)
111 value='1'
112 statement (ExpressionStmt)
113 expression (MethodCallExpr)
114 name (SimpleName)
115 identifier='assertGraphContainsElement'
116 arguments
117 argument (NameExpr)
118 name (SimpleName)
119 identifier='output'
120 argument (NameExpr)
121 name (SimpleName)
122 identifier='nodes'
123 argument (IntegerLiteralExpr)
124 value='2'
125 statement (ExpressionStmt)
126 expression (MethodCallExpr)
127 name (SimpleName)
128 identifier='assertGraphContainsElement'
129 arguments
130 argument (NameExpr)
131 name (SimpleName)
132 identifier='output'
133 argument (NameExpr)
134 name (SimpleName)
135 identifier='nodes'
136 argument (IntegerLiteralExpr)
137 value='3'
138 statement (ExpressionStmt)
139 expression (MethodCallExpr)
140 name (SimpleName)
141 identifier='assertGraphContainsElement'
142 arguments
143 argument (NameExpr)
144 name (SimpleName)
145 identifier='output'
146 argument (NameExpr)
147 name (SimpleName)
148 identifier='nodes'
149 argument (IntegerLiteralExpr)
150 value='4'
151 statement (ExpressionStmt)
152 expression (MethodCallExpr)
153 name (SimpleName)
154 identifier='assertGraphContainsElement'
155 arguments
156 argument (NameExpr)
157 name (SimpleName)
158 identifier='output'
159 argument (NameExpr)
160 name (SimpleName)
161 identifier='nodes'
162 argument (IntegerLiteralExpr)
163 value='5'
164 statement (ExpressionStmt)
165 expression (MethodCallExpr)
166 name (SimpleName)
167 identifier='assertGraphContainsElement'
168 arguments
169 argument (NameExpr)
170 name (SimpleName)
171 identifier='output'
172 argument (NameExpr)
173 name (SimpleName)
174 identifier='nodes'
175 argument (IntegerLiteralExpr)
176 value='6'
177 type (VoidType)
178 name (SimpleName)
179 identifier='testPathExpressionNextMatchCumulativeRecursive'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
10 13
13 14
10 15
15 16
6 17
17 18
6 19
19 20
20 21
2 22
22 23
23 24
24 25
25 26
26 27
27 28
28 29
25 30
30 31
25 32
32 33
33 34
2 35
35 36
36 37
37 38
38 39
39 40
40 41
39 42
42 43
43 44
44 45
38 46
46 47
38 48
48 49
48 50
50 51
51 52
2 53
53 54
54 55
55 56
56 57
57 58
58 59
57 60
60 61
61 62
57 63
63 64
64 65
65 66
63 67
67 68
68 69
67 70
70 71
71 72
72 73
71 74
74 75
75 76
56 77
77 78
56 79
79 80
80 81
79 82
82 83
83 84
84 85
2 86
86 87
87 88
88 89
87 90
90 91
91 92
90 93
93 94
94 95
93 96
96 97
97 98
2 99
99 100
100 101
101 102
100 103
103 104
104 105
105 106
103 107
107 108
108 109
103 110
110 111
2 112
112 113
113 114
114 115
113 116
116 117
117 118
118 119
116 120
120 121
121 122
116 123
123 124
2 125
125 126
126 127
127 128
126 129
129 130
130 131
131 132
129 133
133 134
134 135
129 136
136 137
2 138
138 139
139 140
140 141
139 142
142 143
143 144
144 145
142 146
146 147
147 148
142 149
149 150
2 151
151 152
152 153
153 154
152 155
155 156
156 157
157 158
155 159
159 160
160 161
155 162
162 163
2 164
164 165
165 166
166 167
165 168
168 169
169 170
170 171
168 172
172 173
173 174
168 175
175 176
0 177
0 178
178 179

Tests recursive and cumulative version of PathExpression.nextMatch(GraphModel, Collection<GraphNode>)
