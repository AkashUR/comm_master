172
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ForStmt)
4 body (BlockStmt)
5 statements
6 statement (ExpressionStmt)
7 expression (VariableDeclarationExpr)
8 variables
9 variable (VariableDeclarator)
10 initializer (MethodCallExpr)
11 name (SimpleName)
12 identifier='next'
13 scope (NameExpr)
14 name (SimpleName)
15 identifier='it'
16 name (SimpleName)
17 identifier='entry'
18 type (ClassOrInterfaceType)
19 name (SimpleName)
20 identifier='Entry'
21 typeArguments
22 typeArgument (ClassOrInterfaceType)
23 name (SimpleName)
24 identifier='Id'
25 typeArgument (ClassOrInterfaceType)
26 name (SimpleName)
27 identifier='Id'
28 statement (ExpressionStmt)
29 expression (VariableDeclarationExpr)
30 variables
31 variable (VariableDeclarator)
32 initializer (MethodCallExpr)
33 name (SimpleName)
34 identifier='getKey'
35 scope (NameExpr)
36 name (SimpleName)
37 identifier='entry'
38 name (SimpleName)
39 identifier='cc'
40 type (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='Id'
43 statement (ExpressionStmt)
44 expression (VariableDeclarationExpr)
45 variables
46 variable (VariableDeclarator)
47 initializer (MethodCallExpr)
48 name (SimpleName)
49 identifier='getValue'
50 scope (NameExpr)
51 name (SimpleName)
52 identifier='entry'
53 name (SimpleName)
54 identifier='bb'
55 type (ClassOrInterfaceType)
56 name (SimpleName)
57 identifier='Id'
58 statement (ExpressionStmt)
59 expression (VariableDeclarationExpr)
60 variables
61 variable (VariableDeclarator)
62 initializer (MethodCallExpr)
63 name (SimpleName)
64 identifier='get'
65 scope (NameExpr)
66 name (SimpleName)
67 identifier='aFromB'
68 arguments
69 argument (NameExpr)
70 name (SimpleName)
71 identifier='bb'
72 name (SimpleName)
73 identifier='aa'
74 type (ClassOrInterfaceType)
75 name (SimpleName)
76 identifier='Id'
77 statement (ExpressionStmt)
78 expression (MethodCallExpr)
79 name (SimpleName)
80 identifier='put'
81 scope (NameExpr)
82 name (SimpleName)
83 identifier='aFromC'
84 arguments
85 argument (NameExpr)
86 name (SimpleName)
87 identifier='cc'
88 argument (NameExpr)
89 name (SimpleName)
90 identifier='aa'
91 compare (MethodCallExpr)
92 name (SimpleName)
93 identifier='hasNext'
94 scope (NameExpr)
95 name (SimpleName)
96 identifier='it'
97 initialization
98 initializatio (VariableDeclarationExpr)
99 variables
100 variable (VariableDeclarator)
101 initializer (MethodCallExpr)
102 name (SimpleName)
103 identifier='iterator'
104 scope (MethodCallExpr)
105 name (SimpleName)
106 identifier='entrySet'
107 scope (NameExpr)
108 name (SimpleName)
109 identifier='bFromC'
110 name (SimpleName)
111 identifier='it'
112 type (ClassOrInterfaceType)
113 name (SimpleName)
114 identifier='Iterator'
115 typeArguments
116 typeArgument (ClassOrInterfaceType)
117 name (SimpleName)
118 identifier='Entry'
119 typeArguments
120 typeArgument (ClassOrInterfaceType)
121 name (SimpleName)
122 identifier='Id'
123 typeArgument (ClassOrInterfaceType)
124 name (SimpleName)
125 identifier='Id'
126 type (VoidType)
127 name (SimpleName)
128 identifier='constructAFromC'
129 parameters
130 parameter (Parameter)
131 isVarArgs='false'
132 name (SimpleName)
133 identifier='aFromC'
134 type (ClassOrInterfaceType)
135 name (SimpleName)
136 identifier='Map'
137 typeArguments
138 typeArgument (ClassOrInterfaceType)
139 name (SimpleName)
140 identifier='Id'
141 typeArgument (ClassOrInterfaceType)
142 name (SimpleName)
143 identifier='Id'
144 parameter (Parameter)
145 isVarArgs='false'
146 name (SimpleName)
147 identifier='aFromB'
148 type (ClassOrInterfaceType)
149 name (SimpleName)
150 identifier='Map'
151 typeArguments
152 typeArgument (ClassOrInterfaceType)
153 name (SimpleName)
154 identifier='Id'
155 typeArgument (ClassOrInterfaceType)
156 name (SimpleName)
157 identifier='Id'
158 parameter (Parameter)
159 isVarArgs='false'
160 name (SimpleName)
161 identifier='bFromC'
162 type (ClassOrInterfaceType)
163 name (SimpleName)
164 identifier='Map'
165 typeArguments
166 typeArgument (ClassOrInterfaceType)
167 name (SimpleName)
168 identifier='Id'
169 typeArgument (ClassOrInterfaceType)
170 name (SimpleName)
171 identifier='Id'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 11
11 12
10 13
13 14
14 15
9 16
16 17
9 18
18 19
19 20
18 21
21 22
22 23
23 24
21 25
25 26
26 27
5 28
28 29
29 30
30 31
31 32
32 33
33 34
32 35
35 36
36 37
31 38
38 39
31 40
40 41
41 42
5 43
43 44
44 45
45 46
46 47
47 48
48 49
47 50
50 51
51 52
46 53
53 54
46 55
55 56
56 57
5 58
58 59
59 60
60 61
61 62
62 63
63 64
62 65
65 66
66 67
62 68
68 69
69 70
70 71
61 72
72 73
61 74
74 75
75 76
5 77
77 78
78 79
79 80
78 81
81 82
82 83
78 84
84 85
85 86
86 87
84 88
88 89
89 90
3 91
91 92
92 93
91 94
94 95
95 96
3 97
97 98
98 99
99 100
100 101
101 102
102 103
101 104
104 105
105 106
104 107
107 108
108 109
100 110
110 111
100 112
112 113
113 114
112 115
115 116
116 117
117 118
116 119
119 120
120 121
121 122
119 123
123 124
124 125
0 126
0 127
127 128
0 129
129 130
130 131
130 132
132 133
130 134
134 135
135 136
134 137
137 138
138 139
139 140
137 141
141 142
142 143
129 144
144 145
144 146
146 147
144 148
148 149
149 150
148 151
151 152
152 153
153 154
151 155
155 156
156 157
129 158
158 159
158 160
160 161
158 162
162 163
163 164
162 165
165 166
166 167
167 168
165 169
169 170
170 171

If, say, households point to buildings, and buildings point to parcels, and all you need is households to parcels, then this small helper utility can be used to construct the direct mapping.  This may be particularly important to save memory since the original two mappings can then be cleared (remember to do this, though!). One reason for not using it is that dealing with special cases gets increasingly difficult (e.g. houssholds not having buildings).
