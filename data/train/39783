75
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (AssignExpr)
5 operator='ASSIGN'
6 target (ArrayAccessExpr)
7 index (IntegerLiteralExpr)
8 value='0'
9 name (NameExpr)
10 name (SimpleName)
11 identifier='tempBuffer'
12 value (CastExpr)
13 expression (EnclosedExpr)
14 inner (BinaryExpr)
15 operator='BINARY_AND'
16 left (EnclosedExpr)
17 inner (BinaryExpr)
18 operator='UNSIGNED_RIGHT_SHIFT'
19 left (NameExpr)
20 name (SimpleName)
21 identifier='v'
22 right (IntegerLiteralExpr)
23 value='8'
24 right (IntegerLiteralExpr)
25 value='0xFF'
26 type (PrimitiveType)
27 type='BYTE'
28 statement (ExpressionStmt)
29 expression (AssignExpr)
30 operator='ASSIGN'
31 target (ArrayAccessExpr)
32 index (IntegerLiteralExpr)
33 value='1'
34 name (NameExpr)
35 name (SimpleName)
36 identifier='tempBuffer'
37 value (CastExpr)
38 expression (EnclosedExpr)
39 inner (BinaryExpr)
40 operator='BINARY_AND'
41 left (EnclosedExpr)
42 inner (BinaryExpr)
43 operator='UNSIGNED_RIGHT_SHIFT'
44 left (NameExpr)
45 name (SimpleName)
46 identifier='v'
47 right (IntegerLiteralExpr)
48 value='0'
49 right (IntegerLiteralExpr)
50 value='0xFF'
51 type (PrimitiveType)
52 type='BYTE'
53 statement (ExpressionStmt)
54 expression (MethodCallExpr)
55 name (SimpleName)
56 identifier='write'
57 arguments
58 argument (NameExpr)
59 name (SimpleName)
60 identifier='tempBuffer'
61 argument (IntegerLiteralExpr)
62 value='0'
63 argument (IntegerLiteralExpr)
64 value='2'
65 type (VoidType)
66 name (SimpleName)
67 identifier='writeShort'
68 parameters
69 parameter (Parameter)
70 isVarArgs='false'
71 name (SimpleName)
72 identifier='v'
73 type (PrimitiveType)
74 type='INT'
0 1
1 2
2 3
3 4
4 5
4 6
6 7
7 8
6 9
9 10
10 11
4 12
12 13
13 14
14 15
14 16
16 17
17 18
17 19
19 20
20 21
17 22
22 23
14 24
24 25
12 26
26 27
2 28
28 29
29 30
29 31
31 32
32 33
31 34
34 35
35 36
29 37
37 38
38 39
39 40
39 41
41 42
42 43
42 44
44 45
45 46
42 47
47 48
39 49
49 50
37 51
51 52
2 53
53 54
54 55
55 56
54 57
57 58
58 59
59 60
57 61
61 62
57 63
63 64
0 65
0 66
66 67
0 68
68 69
69 70
69 71
71 72
69 73
73 74

Writes a <code>short</code> to the underlying output stream as two bytes, high byte first. If no exception is thrown, the counter <code>written</code> is incremented by <code>2</code>.
