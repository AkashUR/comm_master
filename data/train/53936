74
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='visitMethodInsn'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='mv'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='INVOKESTATIC'
14 argument (MethodCallExpr)
15 name (SimpleName)
16 identifier='getClassInternalName'
17 arguments
18 argument (NameExpr)
19 name (SimpleName)
20 identifier='targetType'
21 argument (StringLiteralExpr)
22 value='valueOf'
23 argument (BinaryExpr)
24 operator='PLUS'
25 left (BinaryExpr)
26 operator='PLUS'
27 left (BinaryExpr)
28 operator='PLUS'
29 left (StringLiteralExpr)
30 value='('
31 right (MethodCallExpr)
32 name (SimpleName)
33 identifier='getTypeDescription'
34 arguments
35 argument (NameExpr)
36 name (SimpleName)
37 identifier='sourceType'
38 right (StringLiteralExpr)
39 value=')'
40 right (MethodCallExpr)
41 name (SimpleName)
42 identifier='getTypeDescription'
43 arguments
44 argument (NameExpr)
45 name (SimpleName)
46 identifier='targetType'
47 argument (BooleanLiteralExpr)
48 value='false'
49 type (VoidType)
50 name (SimpleName)
51 identifier='doCastToWrappedType'
52 parameters
53 parameter (Parameter)
54 isVarArgs='false'
55 name (SimpleName)
56 identifier='mv'
57 type (ClassOrInterfaceType)
58 name (SimpleName)
59 identifier='MethodVisitor'
60 parameter (Parameter)
61 isVarArgs='false'
62 name (SimpleName)
63 identifier='sourceType'
64 type (ClassOrInterfaceType)
65 name (SimpleName)
66 identifier='ClassNode'
67 parameter (Parameter)
68 isVarArgs='false'
69 name (SimpleName)
70 identifier='targetType'
71 type (ClassOrInterfaceType)
72 name (SimpleName)
73 identifier='ClassNode'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
10 14
14 15
15 16
14 17
17 18
18 19
19 20
10 21
21 22
10 23
23 24
23 25
25 26
25 27
27 28
27 29
29 30
27 31
31 32
32 33
31 34
34 35
35 36
36 37
25 38
38 39
23 40
40 41
41 42
40 43
43 44
44 45
45 46
10 47
47 48
0 49
0 50
50 51
0 52
52 53
53 54
53 55
55 56
53 57
57 58
58 59
52 60
60 61
60 62
62 63
60 64
64 65
65 66
52 67
67 68
67 69
69 70
67 71
71 72
72 73

Given a primitive number type (byte, integer, short, ...), generates bytecode to convert it to a wrapped number (Integer, Long, Double) using calls to [WrappedType].valueOf
