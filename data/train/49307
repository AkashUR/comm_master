98
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='getClassForName'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='classLoader'
13 arguments
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='className'
17 name (SimpleName)
18 identifier='clazz'
19 type (ClassOrInterfaceType)
20 name (SimpleName)
21 identifier='Class'
22 typeArguments
23 typeArgument (WildcardType)
24 statement (ExpressionStmt)
25 expression (VariableDeclarationExpr)
26 variables
27 variable (VariableDeclarator)
28 initializer (MethodCallExpr)
29 name (SimpleName)
30 identifier='getType'
31 scope (NameExpr)
32 name (SimpleName)
33 identifier='Type'
34 arguments
35 argument (NameExpr)
36 name (SimpleName)
37 identifier='clazz'
38 name (SimpleName)
39 identifier='objectType'
40 type (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='Type'
43 statement (ExpressionStmt)
44 expression (VariableDeclarationExpr)
45 variables
46 variable (VariableDeclarator)
47 initializer (MethodCallExpr)
48 name (SimpleName)
49 identifier='buildNewReferenceConstant'
50 scope (FieldAccessExpr)
51 name (SimpleName)
52 identifier='heap'
53 scope (FieldAccessExpr)
54 name (SimpleName)
55 identifier='env'
56 scope (ThisExpr)
57 arguments
58 argument (NameExpr)
59 name (SimpleName)
60 identifier='objectType'
61 name (SimpleName)
62 identifier='newObject'
63 type (ClassOrInterfaceType)
64 name (SimpleName)
65 identifier='ReferenceConstant'
66 statement (ExpressionStmt)
67 expression (MethodCallExpr)
68 name (SimpleName)
69 identifier='pushRef'
70 scope (FieldAccessExpr)
71 name (SimpleName)
72 identifier='operandStack'
73 scope (MethodCallExpr)
74 name (SimpleName)
75 identifier='topFrame'
76 scope (NameExpr)
77 name (SimpleName)
78 identifier='env'
79 arguments
80 argument (NameExpr)
81 name (SimpleName)
82 identifier='newObject'
83 type (VoidType)
84 name (SimpleName)
85 identifier='NEW'
86 parameters
87 parameter (Parameter)
88 isVarArgs='false'
89 name (SimpleName)
90 identifier='className'
91 type (ClassOrInterfaceType)
92 name (SimpleName)
93 identifier='String'
94 annotations
95 annotation (MarkerAnnotationExpr)
96 name (Name)
97 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
7 13
13 14
14 15
15 16
6 17
17 18
6 19
19 20
20 21
19 22
22 23
2 24
24 25
25 26
26 27
27 28
28 29
29 30
28 31
31 32
32 33
28 34
34 35
35 36
36 37
27 38
38 39
27 40
40 41
41 42
2 43
43 44
44 45
45 46
46 47
47 48
48 49
47 50
50 51
51 52
50 53
53 54
54 55
53 56
47 57
57 58
58 59
59 60
46 61
61 62
46 63
63 64
64 65
2 66
66 67
67 68
68 69
67 70
70 71
71 72
70 73
73 74
74 75
73 76
76 77
77 78
67 79
79 80
80 81
81 82
0 83
0 84
84 85
0 86
86 87
87 88
87 89
89 90
87 91
91 92
92 93
0 94
94 95
95 96
96 97

Allocate space on the heap and push a reference ref to it onto the stack. For each instance field declared by class className, we add a tuple (ref, default value) to the field's map. http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2. doc10.html#new
