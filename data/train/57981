68
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExplicitConstructorInvocationStmt)
4 isThis='true'
5 arguments
6 argument (NameExpr)
7 name (SimpleName)
8 identifier='p_scheme'
9 argument (NullLiteralExpr)
10 argument (NameExpr)
11 name (SimpleName)
12 identifier='p_host'
13 argument (UnaryExpr)
14 operator='MINUS'
15 expression (IntegerLiteralExpr)
16 value='1'
17 argument (NameExpr)
18 name (SimpleName)
19 identifier='p_path'
20 argument (NameExpr)
21 name (SimpleName)
22 identifier='p_queryString'
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='p_fragment'
26 name (SimpleName)
27 identifier='URI'
28 parameters
29 parameter (Parameter)
30 isVarArgs='false'
31 name (SimpleName)
32 identifier='p_scheme'
33 type (ClassOrInterfaceType)
34 name (SimpleName)
35 identifier='String'
36 parameter (Parameter)
37 isVarArgs='false'
38 name (SimpleName)
39 identifier='p_host'
40 type (ClassOrInterfaceType)
41 name (SimpleName)
42 identifier='String'
43 parameter (Parameter)
44 isVarArgs='false'
45 name (SimpleName)
46 identifier='p_path'
47 type (ClassOrInterfaceType)
48 name (SimpleName)
49 identifier='String'
50 parameter (Parameter)
51 isVarArgs='false'
52 name (SimpleName)
53 identifier='p_queryString'
54 type (ClassOrInterfaceType)
55 name (SimpleName)
56 identifier='String'
57 parameter (Parameter)
58 isVarArgs='false'
59 name (SimpleName)
60 identifier='p_fragment'
61 type (ClassOrInterfaceType)
62 name (SimpleName)
63 identifier='String'
64 thrownExceptions
65 thrownException (ClassOrInterfaceType)
66 name (SimpleName)
67 identifier='MalformedURIException'
0 1
1 2
2 3
3 4
3 5
5 6
6 7
7 8
5 9
5 10
10 11
11 12
5 13
13 14
13 15
15 16
5 17
17 18
18 19
5 20
20 21
21 22
5 23
23 24
24 25
0 26
26 27
0 28
28 29
29 30
29 31
31 32
29 33
33 34
34 35
28 36
36 37
36 38
38 39
36 40
40 41
41 42
28 43
43 44
43 45
45 46
43 47
47 48
48 49
28 50
50 51
50 52
52 53
50 54
54 55
55 56
28 57
57 58
57 59
59 60
57 61
61 62
62 63
0 64
64 65
65 66
66 67

Construct a new URI that follows the generic URI syntax from its component parts. Each component is validated for syntax and some basic semantic checks are performed as well.  See the individual setter methods for specifics.
