73
0 root (ConstructorDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExplicitConstructorInvocationStmt)
4 isThis='false'
5 arguments
6 argument (NameExpr)
7 name (SimpleName)
8 identifier='params'
9 argument (NameExpr)
10 name (SimpleName)
11 identifier='payloadBytes'
12 argument (NameExpr)
13 name (SimpleName)
14 identifier='offset'
15 argument (NameExpr)
16 name (SimpleName)
17 identifier='serializer'
18 argument (NameExpr)
19 name (SimpleName)
20 identifier='length'
21 name (SimpleName)
22 identifier='Block'
23 parameters
24 parameter (Parameter)
25 isVarArgs='false'
26 name (SimpleName)
27 identifier='params'
28 type (ClassOrInterfaceType)
29 name (SimpleName)
30 identifier='NetworkParameters'
31 parameter (Parameter)
32 isVarArgs='false'
33 name (SimpleName)
34 identifier='payloadBytes'
35 type (ArrayType)
36 origin='TYPE'
37 componentType (PrimitiveType)
38 type='BYTE'
39 parameter (Parameter)
40 isVarArgs='false'
41 name (SimpleName)
42 identifier='offset'
43 type (PrimitiveType)
44 type='INT'
45 parameter (Parameter)
46 isVarArgs='false'
47 name (SimpleName)
48 identifier='parent'
49 type (ClassOrInterfaceType)
50 name (SimpleName)
51 identifier='Message'
52 annotations
53 annotation (MarkerAnnotationExpr)
54 name (Name)
55 identifier='Nullable'
56 parameter (Parameter)
57 isVarArgs='false'
58 name (SimpleName)
59 identifier='serializer'
60 type (ClassOrInterfaceType)
61 name (SimpleName)
62 identifier='MessageSerializer'
63 parameter (Parameter)
64 isVarArgs='false'
65 name (SimpleName)
66 identifier='length'
67 type (PrimitiveType)
68 type='INT'
69 thrownExceptions
70 thrownException (ClassOrInterfaceType)
71 name (SimpleName)
72 identifier='ProtocolException'
0 1
1 2
2 3
3 4
3 5
5 6
6 7
7 8
5 9
9 10
10 11
5 12
12 13
13 14
5 15
15 16
16 17
5 18
18 19
19 20
0 21
21 22
0 23
23 24
24 25
24 26
26 27
24 28
28 29
29 30
23 31
31 32
31 33
33 34
31 35
35 36
35 37
37 38
23 39
39 40
39 41
41 42
39 43
43 44
23 45
45 46
45 47
47 48
45 49
49 50
50 51
45 52
52 53
53 54
54 55
23 56
56 57
56 58
58 59
56 60
60 61
61 62
23 63
63 64
63 65
65 66
63 67
67 68
0 69
69 70
70 71
71 72

Construct a block object from the Bitcoin wire format. Used in the case of a block contained within another message (i.e. for AuxPoW header).
