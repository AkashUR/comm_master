74
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='addComponent'
7 arguments
8 argument (MethodCallExpr)
9 name (SimpleName)
10 identifier='createIterableFromColumn'
11 scope (NameExpr)
12 name (SimpleName)
13 identifier='IndexComponent'
14 arguments
15 argument (ObjectCreationExpr)
16 type (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='NameComponentDescription'
19 arguments
20 argument (NameExpr)
21 name (SimpleName)
22 identifier='componentName'
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='valueType'
26 argument (NameExpr)
27 name (SimpleName)
28 identifier='valueByteOrder'
29 argument (NameExpr)
30 name (SimpleName)
31 identifier='sourceColumnName'
32 argument (NameExpr)
33 name (SimpleName)
34 identifier='codeToAccessValue'
35 type (VoidType)
36 name (SimpleName)
37 identifier='componentFromIterableColumn'
38 parameters
39 parameter (Parameter)
40 isVarArgs='false'
41 name (SimpleName)
42 identifier='componentName'
43 type (ClassOrInterfaceType)
44 name (SimpleName)
45 identifier='String'
46 parameter (Parameter)
47 isVarArgs='false'
48 name (SimpleName)
49 identifier='valueType'
50 type (ClassOrInterfaceType)
51 name (SimpleName)
52 identifier='ValueType'
53 parameter (Parameter)
54 isVarArgs='false'
55 name (SimpleName)
56 identifier='valueByteOrder'
57 type (ClassOrInterfaceType)
58 name (SimpleName)
59 identifier='ValueByteOrder'
60 parameter (Parameter)
61 isVarArgs='false'
62 name (SimpleName)
63 identifier='sourceColumnName'
64 type (ClassOrInterfaceType)
65 name (SimpleName)
66 identifier='String'
67 parameter (Parameter)
68 isVarArgs='false'
69 name (SimpleName)
70 identifier='codeToAccessValue'
71 type (ClassOrInterfaceType)
72 name (SimpleName)
73 identifier='String'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
8 11
11 12
12 13
8 14
14 15
15 16
16 17
17 18
15 19
19 20
20 21
21 22
19 23
23 24
24 25
19 26
26 27
27 28
14 29
29 30
30 31
14 32
32 33
33 34
0 35
0 36
36 37
0 38
38 39
39 40
39 41
41 42
39 43
43 44
44 45
38 46
46 47
46 48
48 49
46 50
50 51
51 52
38 53
53 54
53 55
55 56
53 57
57 58
58 59
38 60
60 61
60 62
62 63
60 64
64 65
65 66
38 67
67 68
67 69
69 70
67 71
71 72
72 73

Allows multiple index rows when indexing by a cell with iterable values. It doesn't support arbitrary protobuf structures - you need to be able to extract an iterable<valueType> using codeToAccessValue.
