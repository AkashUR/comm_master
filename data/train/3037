60
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (CastExpr)
8 expression (MethodCallExpr)
9 name (SimpleName)
10 identifier='clone'
11 scope (NameExpr)
12 name (SimpleName)
13 identifier='a'
14 type (ArrayType)
15 origin='TYPE'
16 componentType (ClassOrInterfaceType)
17 name (SimpleName)
18 identifier='Object'
19 name (SimpleName)
20 identifier='aux'
21 type (ArrayType)
22 origin='TYPE'
23 componentType (ClassOrInterfaceType)
24 name (SimpleName)
25 identifier='Object'
26 statement (ExpressionStmt)
27 expression (MethodCallExpr)
28 name (SimpleName)
29 identifier='mergeSort'
30 arguments
31 argument (NameExpr)
32 name (SimpleName)
33 identifier='aux'
34 argument (NameExpr)
35 name (SimpleName)
36 identifier='a'
37 argument (IntegerLiteralExpr)
38 value='0'
39 argument (FieldAccessExpr)
40 name (SimpleName)
41 identifier='length'
42 scope (NameExpr)
43 name (SimpleName)
44 identifier='a'
45 argument (IntegerLiteralExpr)
46 value='0'
47 type (VoidType)
48 name (SimpleName)
49 identifier='sort'
50 parameters
51 parameter (Parameter)
52 isVarArgs='false'
53 name (SimpleName)
54 identifier='a'
55 type (ArrayType)
56 origin='TYPE'
57 componentType (ClassOrInterfaceType)
58 name (SimpleName)
59 identifier='Object'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
8 11
11 12
12 13
7 14
14 15
14 16
16 17
17 18
6 19
19 20
6 21
21 22
21 23
23 24
24 25
2 26
26 27
27 28
28 29
27 30
30 31
31 32
32 33
30 34
34 35
35 36
30 37
37 38
30 39
39 40
40 41
39 42
42 43
43 44
30 45
45 46
0 47
0 48
48 49
0 50
50 51
51 52
51 53
53 54
51 55
55 56
55 57
57 58
58 59

Sorts the specified array of objects into ascending order, according to the <i>natural ordering</i> of its elements.  All elements in the array must implement the <tt>Comparable</tt> interface.  Furthermore, all elements in the array must be <i>mutually comparable</i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the array).<p> This sort is guaranteed to be <i>stable</i>:  equal elements will not be reordered as a result of the sort.<p> The sorting algorithm is a modified mergesort (in which the merge is omitted if the highest element in the low sublist is less than the lowest element in the high sublist).  This algorithm offers guaranteed n*log(n) performance.
