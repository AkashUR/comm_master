68
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='getSentenceInstance'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='BreakIterator'
13 arguments
14 argument (FieldAccessExpr)
15 name (SimpleName)
16 identifier='ROOT'
17 scope (NameExpr)
18 name (SimpleName)
19 identifier='Locale'
20 name (SimpleName)
21 identifier='expected'
22 type (ClassOrInterfaceType)
23 name (SimpleName)
24 identifier='BreakIterator'
25 statement (ExpressionStmt)
26 expression (VariableDeclarationExpr)
27 variables
28 variable (VariableDeclarator)
29 initializer (ObjectCreationExpr)
30 type (ClassOrInterfaceType)
31 name (SimpleName)
32 identifier='CustomSeparatorBreakIterator'
33 arguments
34 argument (MethodCallExpr)
35 name (SimpleName)
36 identifier='randomSeparator'
37 name (SimpleName)
38 identifier='actual'
39 type (ClassOrInterfaceType)
40 name (SimpleName)
41 identifier='BreakIterator'
42 statement (ExpressionStmt)
43 expression (MethodCallExpr)
44 name (SimpleName)
45 identifier='assertSameBreaks'
46 arguments
47 argument (StringLiteralExpr)
48 value='000ab000'
49 argument (IntegerLiteralExpr)
50 value='3'
51 argument (IntegerLiteralExpr)
52 value='2'
53 argument (IntegerLiteralExpr)
54 value='4'
55 argument (NameExpr)
56 name (SimpleName)
57 identifier='expected'
58 argument (NameExpr)
59 name (SimpleName)
60 identifier='actual'
61 type (VoidType)
62 name (SimpleName)
63 identifier='testFirstPosition'
64 thrownExceptions
65 thrownException (ClassOrInterfaceType)
66 name (SimpleName)
67 identifier='Exception'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
7 13
13 14
14 15
15 16
14 17
17 18
18 19
6 20
20 21
6 22
22 23
23 24
2 25
25 26
26 27
27 28
28 29
29 30
30 31
31 32
29 33
33 34
34 35
35 36
28 37
37 38
28 39
39 40
40 41
2 42
42 43
43 44
44 45
43 46
46 47
47 48
46 49
49 50
46 51
51 52
46 53
53 54
46 55
55 56
56 57
46 58
58 59
59 60
0 61
0 62
62 63
0 64
64 65
65 66
66 67

the current position must be ignored, initial position is always first()
