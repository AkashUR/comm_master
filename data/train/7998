97
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='beginShape'
7 statement (ExpressionStmt)
8 expression (MethodCallExpr)
9 name (SimpleName)
10 identifier='vertex'
11 arguments
12 argument (NameExpr)
13 name (SimpleName)
14 identifier='x1'
15 argument (NameExpr)
16 name (SimpleName)
17 identifier='y1'
18 statement (ExpressionStmt)
19 expression (MethodCallExpr)
20 name (SimpleName)
21 identifier='bezierVertex'
22 arguments
23 argument (NameExpr)
24 name (SimpleName)
25 identifier='x2'
26 argument (NameExpr)
27 name (SimpleName)
28 identifier='y2'
29 argument (NameExpr)
30 name (SimpleName)
31 identifier='x3'
32 argument (NameExpr)
33 name (SimpleName)
34 identifier='y3'
35 argument (NameExpr)
36 name (SimpleName)
37 identifier='x4'
38 argument (NameExpr)
39 name (SimpleName)
40 identifier='y4'
41 statement (ExpressionStmt)
42 expression (MethodCallExpr)
43 name (SimpleName)
44 identifier='endShape'
45 type (VoidType)
46 name (SimpleName)
47 identifier='bezier'
48 parameters
49 parameter (Parameter)
50 isVarArgs='false'
51 name (SimpleName)
52 identifier='x1'
53 type (PrimitiveType)
54 type='FLOAT'
55 parameter (Parameter)
56 isVarArgs='false'
57 name (SimpleName)
58 identifier='y1'
59 type (PrimitiveType)
60 type='FLOAT'
61 parameter (Parameter)
62 isVarArgs='false'
63 name (SimpleName)
64 identifier='x2'
65 type (PrimitiveType)
66 type='FLOAT'
67 parameter (Parameter)
68 isVarArgs='false'
69 name (SimpleName)
70 identifier='y2'
71 type (PrimitiveType)
72 type='FLOAT'
73 parameter (Parameter)
74 isVarArgs='false'
75 name (SimpleName)
76 identifier='x3'
77 type (PrimitiveType)
78 type='FLOAT'
79 parameter (Parameter)
80 isVarArgs='false'
81 name (SimpleName)
82 identifier='y3'
83 type (PrimitiveType)
84 type='FLOAT'
85 parameter (Parameter)
86 isVarArgs='false'
87 name (SimpleName)
88 identifier='x4'
89 type (PrimitiveType)
90 type='FLOAT'
91 parameter (Parameter)
92 isVarArgs='false'
93 name (SimpleName)
94 identifier='y4'
95 type (PrimitiveType)
96 type='FLOAT'
0 1
1 2
2 3
3 4
4 5
5 6
2 7
7 8
8 9
9 10
8 11
11 12
12 13
13 14
11 15
15 16
16 17
2 18
18 19
19 20
20 21
19 22
22 23
23 24
24 25
22 26
26 27
27 28
22 29
29 30
30 31
22 32
32 33
33 34
22 35
35 36
36 37
22 38
38 39
39 40
2 41
41 42
42 43
43 44
0 45
0 46
46 47
0 48
48 49
49 50
49 51
51 52
49 53
53 54
48 55
55 56
55 57
57 58
55 59
59 60
48 61
61 62
61 63
63 64
61 65
65 66
48 67
67 68
67 69
69 70
67 71
71 72
48 73
73 74
73 75
75 76
73 77
77 78
48 79
79 80
79 81
81 82
79 83
83 84
48 85
85 86
85 87
87 88
85 89
89 90
48 91
91 92
91 93
93 94
91 95
95 96

Draw a cubic bezier curve. The first and last points are the on-curve points. The middle two are the 'control' points, or 'handles' in an application like Illustrator. <P> Identical to typing: <PRE>beginShape(); vertex(x1, y1); bezierVertex(x2, y2, x3, y3, x4, y4); endShape(); </PRE> In Postscript-speak, this would be: <PRE>moveto(x1, y1); curveto(x2, y2, x3, y3, x4, y4);</PRE> If you were to try and continue that curve like so: <PRE>curveto(x5, y5, x6, y6, x7, y7);</PRE> This would be done in processing by adding these statements: <PRE>bezierVertex(x5, y5, x6, y6, x7, y7) </PRE> To draw a quadratic (instead of cubic) curve, use the control point twice by doubling it: <PRE>bezier(x1, y1, cx, cy, cx, cy, x2, y2);</PRE>
