388
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='getRandomInt'
10 scope (NameExpr)
11 name (SimpleName)
12 identifier='SecurityHelper'
13 arguments
14 argument (IntegerLiteralExpr)
15 value='0'
16 argument (IntegerLiteralExpr)
17 value='0'
18 argument (IntegerLiteralExpr)
19 value='0'
20 name (SimpleName)
21 identifier='randomNumber'
22 type (PrimitiveType)
23 type='INT'
24 statement (ExpressionStmt)
25 expression (MethodCallExpr)
26 name (SimpleName)
27 identifier='assertTrue'
28 arguments
29 argument (BinaryExpr)
30 operator='EQUALS'
31 left (NameExpr)
32 name (SimpleName)
33 identifier='randomNumber'
34 right (IntegerLiteralExpr)
35 value='0'
36 statement (ExpressionStmt)
37 expression (AssignExpr)
38 operator='ASSIGN'
39 target (NameExpr)
40 name (SimpleName)
41 identifier='randomNumber'
42 value (MethodCallExpr)
43 name (SimpleName)
44 identifier='getRandomInt'
45 scope (NameExpr)
46 name (SimpleName)
47 identifier='SecurityHelper'
48 arguments
49 argument (UnaryExpr)
50 operator='MINUS'
51 expression (IntegerLiteralExpr)
52 value='1'
53 argument (UnaryExpr)
54 operator='MINUS'
55 expression (IntegerLiteralExpr)
56 value='10'
57 argument (IntegerLiteralExpr)
58 value='1'
59 statement (ExpressionStmt)
60 expression (MethodCallExpr)
61 name (SimpleName)
62 identifier='assertTrue'
63 arguments
64 argument (BinaryExpr)
65 operator='EQUALS'
66 left (NameExpr)
67 name (SimpleName)
68 identifier='randomNumber'
69 right (IntegerLiteralExpr)
70 value='0'
71 statement (ExpressionStmt)
72 expression (AssignExpr)
73 operator='ASSIGN'
74 target (NameExpr)
75 name (SimpleName)
76 identifier='randomNumber'
77 value (MethodCallExpr)
78 name (SimpleName)
79 identifier='getRandomInt'
80 scope (NameExpr)
81 name (SimpleName)
82 identifier='SecurityHelper'
83 arguments
84 argument (UnaryExpr)
85 operator='MINUS'
86 expression (IntegerLiteralExpr)
87 value='10'
88 argument (IntegerLiteralExpr)
89 value='2'
90 argument (IntegerLiteralExpr)
91 value='1'
92 statement (ExpressionStmt)
93 expression (MethodCallExpr)
94 name (SimpleName)
95 identifier='assertTrue'
96 arguments
97 argument (MethodCallExpr)
98 name (SimpleName)
99 identifier='format'
100 scope (NameExpr)
101 name (SimpleName)
102 identifier='MessageFormat'
103 arguments
104 argument (StringLiteralExpr)
105 value='randomNumber={0}'
106 argument (NameExpr)
107 name (SimpleName)
108 identifier='randomNumber'
109 argument (BinaryExpr)
110 operator='AND'
111 left (BinaryExpr)
112 operator='GREATER_EQUALS'
113 left (NameExpr)
114 name (SimpleName)
115 identifier='randomNumber'
116 right (IntegerLiteralExpr)
117 value='0'
118 right (BinaryExpr)
119 operator='LESS_EQUALS'
120 left (NameExpr)
121 name (SimpleName)
122 identifier='randomNumber'
123 right (IntegerLiteralExpr)
124 value='2'
125 statement (ExpressionStmt)
126 expression (AssignExpr)
127 operator='ASSIGN'
128 target (NameExpr)
129 name (SimpleName)
130 identifier='randomNumber'
131 value (MethodCallExpr)
132 name (SimpleName)
133 identifier='getRandomInt'
134 scope (NameExpr)
135 name (SimpleName)
136 identifier='SecurityHelper'
137 arguments
138 argument (IntegerLiteralExpr)
139 value='5'
140 argument (IntegerLiteralExpr)
141 value='2'
142 argument (IntegerLiteralExpr)
143 value='1'
144 statement (ExpressionStmt)
145 expression (MethodCallExpr)
146 name (SimpleName)
147 identifier='assertTrue'
148 arguments
149 argument (MethodCallExpr)
150 name (SimpleName)
151 identifier='format'
152 scope (NameExpr)
153 name (SimpleName)
154 identifier='MessageFormat'
155 arguments
156 argument (StringLiteralExpr)
157 value='randomNumber={0}'
158 argument (NameExpr)
159 name (SimpleName)
160 identifier='randomNumber'
161 argument (BinaryExpr)
162 operator='AND'
163 left (BinaryExpr)
164 operator='LESS_EQUALS'
165 left (NameExpr)
166 name (SimpleName)
167 identifier='randomNumber'
168 right (IntegerLiteralExpr)
169 value='5'
170 right (BinaryExpr)
171 operator='GREATER_EQUALS'
172 left (NameExpr)
173 name (SimpleName)
174 identifier='randomNumber'
175 right (IntegerLiteralExpr)
176 value='2'
177 statement (ExpressionStmt)
178 expression (AssignExpr)
179 operator='ASSIGN'
180 target (NameExpr)
181 name (SimpleName)
182 identifier='randomNumber'
183 value (MethodCallExpr)
184 name (SimpleName)
185 identifier='getRandomInt'
186 scope (NameExpr)
187 name (SimpleName)
188 identifier='SecurityHelper'
189 arguments
190 argument (IntegerLiteralExpr)
191 value='500'
192 argument (IntegerLiteralExpr)
193 value='3000'
194 argument (IntegerLiteralExpr)
195 value='100'
196 statement (ExpressionStmt)
197 expression (MethodCallExpr)
198 name (SimpleName)
199 identifier='assertTrue'
200 arguments
201 argument (MethodCallExpr)
202 name (SimpleName)
203 identifier='format'
204 scope (NameExpr)
205 name (SimpleName)
206 identifier='MessageFormat'
207 arguments
208 argument (StringLiteralExpr)
209 value='randomNumber={0}'
210 argument (NameExpr)
211 name (SimpleName)
212 identifier='randomNumber'
213 argument (BinaryExpr)
214 operator='EQUALS'
215 left (BinaryExpr)
216 operator='REMAINDER'
217 left (EnclosedExpr)
218 inner (BinaryExpr)
219 operator='MINUS'
220 left (NameExpr)
221 name (SimpleName)
222 identifier='randomNumber'
223 right (IntegerLiteralExpr)
224 value='500'
225 right (IntegerLiteralExpr)
226 value='100'
227 right (IntegerLiteralExpr)
228 value='0'
229 statement (ExpressionStmt)
230 expression (AssignExpr)
231 operator='ASSIGN'
232 target (NameExpr)
233 name (SimpleName)
234 identifier='randomNumber'
235 value (MethodCallExpr)
236 name (SimpleName)
237 identifier='getRandomInt'
238 scope (NameExpr)
239 name (SimpleName)
240 identifier='SecurityHelper'
241 arguments
242 argument (IntegerLiteralExpr)
243 value='500'
244 argument (IntegerLiteralExpr)
245 value='3000'
246 argument (IntegerLiteralExpr)
247 value='15'
248 statement (ExpressionStmt)
249 expression (MethodCallExpr)
250 name (SimpleName)
251 identifier='assertTrue'
252 arguments
253 argument (MethodCallExpr)
254 name (SimpleName)
255 identifier='format'
256 scope (NameExpr)
257 name (SimpleName)
258 identifier='MessageFormat'
259 arguments
260 argument (StringLiteralExpr)
261 value='randomNumber={0}'
262 argument (NameExpr)
263 name (SimpleName)
264 identifier='randomNumber'
265 argument (BinaryExpr)
266 operator='EQUALS'
267 left (BinaryExpr)
268 operator='REMAINDER'
269 left (EnclosedExpr)
270 inner (BinaryExpr)
271 operator='MINUS'
272 left (NameExpr)
273 name (SimpleName)
274 identifier='randomNumber'
275 right (IntegerLiteralExpr)
276 value='500'
277 right (IntegerLiteralExpr)
278 value='15'
279 right (IntegerLiteralExpr)
280 value='0'
281 statement (ExpressionStmt)
282 expression (AssignExpr)
283 operator='ASSIGN'
284 target (NameExpr)
285 name (SimpleName)
286 identifier='randomNumber'
287 value (MethodCallExpr)
288 name (SimpleName)
289 identifier='getRandomInt'
290 scope (NameExpr)
291 name (SimpleName)
292 identifier='SecurityHelper'
293 arguments
294 argument (IntegerLiteralExpr)
295 value='500'
296 argument (IntegerLiteralExpr)
297 value='3000'
298 argument (IntegerLiteralExpr)
299 value='0'
300 statement (ExpressionStmt)
301 expression (MethodCallExpr)
302 name (SimpleName)
303 identifier='assertTrue'
304 arguments
305 argument (MethodCallExpr)
306 name (SimpleName)
307 identifier='format'
308 scope (NameExpr)
309 name (SimpleName)
310 identifier='MessageFormat'
311 arguments
312 argument (StringLiteralExpr)
313 value='randomNumber={0}'
314 argument (NameExpr)
315 name (SimpleName)
316 identifier='randomNumber'
317 argument (BinaryExpr)
318 operator='AND'
319 left (BinaryExpr)
320 operator='GREATER_EQUALS'
321 left (NameExpr)
322 name (SimpleName)
323 identifier='randomNumber'
324 right (IntegerLiteralExpr)
325 value='500'
326 right (BinaryExpr)
327 operator='LESS_EQUALS'
328 left (NameExpr)
329 name (SimpleName)
330 identifier='randomNumber'
331 right (IntegerLiteralExpr)
332 value='3000'
333 statement (ExpressionStmt)
334 expression (AssignExpr)
335 operator='ASSIGN'
336 target (NameExpr)
337 name (SimpleName)
338 identifier='randomNumber'
339 value (MethodCallExpr)
340 name (SimpleName)
341 identifier='getRandomInt'
342 scope (NameExpr)
343 name (SimpleName)
344 identifier='SecurityHelper'
345 arguments
346 argument (IntegerLiteralExpr)
347 value='0'
348 argument (IntegerLiteralExpr)
349 value='10'
350 argument (IntegerLiteralExpr)
351 value='11'
352 statement (ExpressionStmt)
353 expression (MethodCallExpr)
354 name (SimpleName)
355 identifier='assertTrue'
356 arguments
357 argument (MethodCallExpr)
358 name (SimpleName)
359 identifier='format'
360 scope (NameExpr)
361 name (SimpleName)
362 identifier='MessageFormat'
363 arguments
364 argument (StringLiteralExpr)
365 value='randomNumber={0}'
366 argument (NameExpr)
367 name (SimpleName)
368 identifier='randomNumber'
369 argument (BinaryExpr)
370 operator='AND'
371 left (BinaryExpr)
372 operator='GREATER_EQUALS'
373 left (NameExpr)
374 name (SimpleName)
375 identifier='randomNumber'
376 right (IntegerLiteralExpr)
377 value='0'
378 right (BinaryExpr)
379 operator='LESS_EQUALS'
380 left (NameExpr)
381 name (SimpleName)
382 identifier='randomNumber'
383 right (IntegerLiteralExpr)
384 value='10'
385 type (VoidType)
386 name (SimpleName)
387 identifier='testRealmJMXAuthenticatorRandomNumberGenerator'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
7 13
13 14
14 15
13 16
16 17
13 18
18 19
6 20
20 21
6 22
22 23
2 24
24 25
25 26
26 27
25 28
28 29
29 30
29 31
31 32
32 33
29 34
34 35
2 36
36 37
37 38
37 39
39 40
40 41
37 42
42 43
43 44
42 45
45 46
46 47
42 48
48 49
49 50
49 51
51 52
48 53
53 54
53 55
55 56
48 57
57 58
2 59
59 60
60 61
61 62
60 63
63 64
64 65
64 66
66 67
67 68
64 69
69 70
2 71
71 72
72 73
72 74
74 75
75 76
72 77
77 78
78 79
77 80
80 81
81 82
77 83
83 84
84 85
84 86
86 87
83 88
88 89
83 90
90 91
2 92
92 93
93 94
94 95
93 96
96 97
97 98
98 99
97 100
100 101
101 102
97 103
103 104
104 105
103 106
106 107
107 108
96 109
109 110
109 111
111 112
111 113
113 114
114 115
111 116
116 117
109 118
118 119
118 120
120 121
121 122
118 123
123 124
2 125
125 126
126 127
126 128
128 129
129 130
126 131
131 132
132 133
131 134
134 135
135 136
131 137
137 138
138 139
137 140
140 141
137 142
142 143
2 144
144 145
145 146
146 147
145 148
148 149
149 150
150 151
149 152
152 153
153 154
149 155
155 156
156 157
155 158
158 159
159 160
148 161
161 162
161 163
163 164
163 165
165 166
166 167
163 168
168 169
161 170
170 171
170 172
172 173
173 174
170 175
175 176
2 177
177 178
178 179
178 180
180 181
181 182
178 183
183 184
184 185
183 186
186 187
187 188
183 189
189 190
190 191
189 192
192 193
189 194
194 195
2 196
196 197
197 198
198 199
197 200
200 201
201 202
202 203
201 204
204 205
205 206
201 207
207 208
208 209
207 210
210 211
211 212
200 213
213 214
213 215
215 216
215 217
217 218
218 219
218 220
220 221
221 222
218 223
223 224
215 225
225 226
213 227
227 228
2 229
229 230
230 231
230 232
232 233
233 234
230 235
235 236
236 237
235 238
238 239
239 240
235 241
241 242
242 243
241 244
244 245
241 246
246 247
2 248
248 249
249 250
250 251
249 252
252 253
253 254
254 255
253 256
256 257
257 258
253 259
259 260
260 261
259 262
262 263
263 264
252 265
265 266
265 267
267 268
267 269
269 270
270 271
270 272
272 273
273 274
270 275
275 276
267 277
277 278
265 279
279 280
2 281
281 282
282 283
282 284
284 285
285 286
282 287
287 288
288 289
287 290
290 291
291 292
287 293
293 294
294 295
293 296
296 297
293 298
298 299
2 300
300 301
301 302
302 303
301 304
304 305
305 306
306 307
305 308
308 309
309 310
305 311
311 312
312 313
311 314
314 315
315 316
304 317
317 318
317 319
319 320
319 321
321 322
322 323
319 324
324 325
317 326
326 327
326 328
328 329
329 330
326 331
331 332
2 333
333 334
334 335
334 336
336 337
337 338
334 339
339 340
340 341
339 342
342 343
343 344
339 345
345 346
346 347
345 348
348 349
345 350
350 351
2 352
352 353
353 354
354 355
353 356
356 357
357 358
358 359
357 360
360 361
361 362
357 363
363 364
364 365
363 366
366 367
367 368
356 369
369 370
369 371
371 372
371 373
373 374
374 375
371 376
376 377
369 378
378 379
378 380
380 381
381 382
378 383
383 384
0 385
0 386
386 387

Confirm that RealmJMXAuthenticator.getRandomInt(min, max) always returns a coherent value
