117
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='makeCoder'
10 name (SimpleName)
11 identifier='burs'
12 type (ClassOrInterfaceType)
13 name (SimpleName)
14 identifier='BURS_StateCoder'
15 statement (ForStmt)
16 body (BlockStmt)
17 statements
18 statement (ExpressionStmt)
19 expression (VariableDeclarationExpr)
20 variables
21 variable (VariableDeclarator)
22 initializer (MethodCallExpr)
23 name (SimpleName)
24 identifier='nextElement'
25 scope (NameExpr)
26 name (SimpleName)
27 identifier='e'
28 name (SimpleName)
29 identifier='s'
30 type (ClassOrInterfaceType)
31 name (SimpleName)
32 identifier='Instruction'
33 statement (ExpressionStmt)
34 expression (VariableDeclarationExpr)
35 variables
36 variable (VariableDeclarator)
37 initializer (MethodCallExpr)
38 name (SimpleName)
39 identifier='buildTree'
40 arguments
41 argument (NameExpr)
42 name (SimpleName)
43 identifier='s'
44 name (SimpleName)
45 identifier='tn'
46 type (ClassOrInterfaceType)
47 name (SimpleName)
48 identifier='AbstractBURS_TreeNode'
49 statement (ExpressionStmt)
50 expression (MethodCallExpr)
51 name (SimpleName)
52 identifier='label'
53 arguments
54 argument (NameExpr)
55 name (SimpleName)
56 identifier='tn'
57 statement (ExpressionStmt)
58 expression (MethodCallExpr)
59 name (SimpleName)
60 identifier='mark'
61 arguments
62 argument (NameExpr)
63 name (SimpleName)
64 identifier='tn'
65 argument (CastExpr)
66 expression (IntegerLiteralExpr)
67 value='1'
68 type (PrimitiveType)
69 type='BYTE'
70 statement (ExpressionStmt)
71 expression (MethodCallExpr)
72 name (SimpleName)
73 identifier='generateTree'
74 arguments
75 argument (NameExpr)
76 name (SimpleName)
77 identifier='tn'
78 argument (NameExpr)
79 name (SimpleName)
80 identifier='burs'
81 compare (MethodCallExpr)
82 name (SimpleName)
83 identifier='hasMoreElements'
84 scope (NameExpr)
85 name (SimpleName)
86 identifier='e'
87 initialization
88 initializatio (VariableDeclarationExpr)
89 variables
90 variable (VariableDeclarator)
91 initializer (MethodCallExpr)
92 name (SimpleName)
93 identifier='forwardRealInstrEnumerator'
94 scope (NameExpr)
95 name (SimpleName)
96 identifier='bb'
97 name (SimpleName)
98 identifier='e'
99 type (ClassOrInterfaceType)
100 name (SimpleName)
101 identifier='Enumeration'
102 typeArguments
103 typeArgument (ClassOrInterfaceType)
104 name (SimpleName)
105 identifier='Instruction'
106 type (VoidType)
107 name (SimpleName)
108 identifier='invoke'
109 parameters
110 parameter (Parameter)
111 isVarArgs='false'
112 name (SimpleName)
113 identifier='bb'
114 type (ClassOrInterfaceType)
115 name (SimpleName)
116 identifier='BasicBlock'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
6 10
10 11
6 12
12 13
13 14
2 15
15 16
16 17
17 18
18 19
19 20
20 21
21 22
22 23
23 24
22 25
25 26
26 27
21 28
28 29
21 30
30 31
31 32
17 33
33 34
34 35
35 36
36 37
37 38
38 39
37 40
40 41
41 42
42 43
36 44
44 45
36 46
46 47
47 48
17 49
49 50
50 51
51 52
50 53
53 54
54 55
55 56
17 57
57 58
58 59
59 60
58 61
61 62
62 63
63 64
61 65
65 66
66 67
65 68
68 69
17 70
70 71
71 72
72 73
71 74
74 75
75 76
76 77
74 78
78 79
79 80
15 81
81 82
82 83
81 84
84 85
85 86
15 87
87 88
88 89
89 90
90 91
91 92
92 93
91 94
94 95
95 96
90 97
97 98
90 99
99 100
100 101
99 102
102 103
103 104
104 105
0 106
0 107
107 108
0 109
109 110
110 111
110 112
112 113
110 114
114 115
115 116

Build BURS trees for the basic block <code>bb</code>, label the trees, and then generate MIR instructions based on the labeling.
