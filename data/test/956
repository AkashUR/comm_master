31
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='push'
7 scope (NameExpr)
8 name (SimpleName)
9 identifier='myFilesWaitingForRevision'
10 arguments
11 argument (MethodCallExpr)
12 name (SimpleName)
13 identifier='newArrayList'
14 scope (NameExpr)
15 name (SimpleName)
16 identifier='ContainerUtil'
17 typeArguments
18 typeArgument (ClassOrInterfaceType)
19 name (SimpleName)
20 identifier='Pair'
21 typeArguments
22 typeArgument (ClassOrInterfaceType)
23 name (SimpleName)
24 identifier='String'
25 typeArgument (ClassOrInterfaceType)
26 name (SimpleName)
27 identifier='String'
28 type (VoidType)
29 name (SimpleName)
30 identifier='startUpdate'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
4 10
10 11
11 12
12 13
11 14
14 15
15 16
11 17
17 18
18 19
19 20
18 21
21 22
22 23
23 24
21 25
25 26
26 27
0 28
0 29
29 30

Same UpdateEventHandler instance could be used to update several roots - for instance, when updating whole project that contains multiple working copies => so this method explicitly indicates when update of new root is started (to correctly collect updated files). <p/> Still UPDATE_NONE (which is currently fired by command line and by SVNKit for 1.6 and below working copies - and is just skipped by UpdateEventHandler) or UPDATE_STARTED (which is currently fired by SVNKit for 1.7 working copies) events should be considered for such purposes, especially if further we want to support commands like "svn update <folder1> <folder2>". <p/> TODO: Check if UPDATE_NONE is fired in some other cases by SVNKit. <p/> TODO: Currently for command line UPDATE_NONE event could be fired several times for the same folder - as "svn update" output is TODO: processed line by line, "Updating '.'" line (which results in firing UPDATE_NONE) is printed before auth request and then TODO: the command could be repeated with new credentials. This case should also be handled if we want to rely on UPDATE_NONE or TODO: UPDATE_STARTED event in some code paths.
