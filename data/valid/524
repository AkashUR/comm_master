38
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (MethodCallExpr)
5 name (SimpleName)
6 identifier='substituteForAll'
7 arguments
8 argument (NameExpr)
9 name (SimpleName)
10 identifier='exprs'
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='strs'
14 argument (BooleanLiteralExpr)
15 value='true'
16 type (VoidType)
17 name (SimpleName)
18 identifier='substituteForAll'
19 parameters
20 parameter (Parameter)
21 isVarArgs='false'
22 name (SimpleName)
23 identifier='exprs'
24 type (ClassOrInterfaceType)
25 name (SimpleName)
26 identifier='Vector'
27 parameter (Parameter)
28 isVarArgs='false'
29 name (SimpleName)
30 identifier='strs'
31 type (ClassOrInterfaceType)
32 name (SimpleName)
33 identifier='Vector'
34 thrownExceptions
35 thrownException (ClassOrInterfaceType)
36 name (SimpleName)
37 identifier='TLAExprException'
0 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
9 10
7 11
11 12
12 13
7 14
14 15
0 16
0 17
17 18
0 19
19 20
20 21
20 22
22 23
20 24
24 25
25 26
19 27
27 28
27 29
29 30
27 31
31 32
32 33
0 34
34 35
35 36
36 37

Substitutes clones of the expressions in exprs for the corresponding strings of strs in the current expression. This is called with parenthesize = true only during the initial parsing  phase (the execution of ParseAlgorithm.getAlgorithm).  It is called with  parenthesize = false by: PcalFixIDs.FixExpr : replaces the string of an IDENT token with a new one to perform renaming in case of name conflicts. PcalTLAGen.AddSubscriptsToExpr: adds the primes and "[self]" subscripts to variables when needed. This method was modified by LL on 10 August 2012 to do the substitutions "simultaneously" rather than one after the other.  The original code  first did all the substitutions for the first string, then all the substitutions for the second string, etc.  This yielded a bug if the expression substituted for the first string contained the second string.  For example, the substitutions a <- F(b), b <- c in  a + b  produced  F(c) + c  instead of the correct  F(b) + c .
