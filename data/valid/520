72
0 root (MethodDeclaration)
1 body (BlockStmt)
2 statements
3 statement (ExpressionStmt)
4 expression (VariableDeclarationExpr)
5 variables
6 variable (VariableDeclarator)
7 initializer (MethodCallExpr)
8 name (SimpleName)
9 identifier='execute'
10 arguments
11 argument (NameExpr)
12 name (SimpleName)
13 identifier='expression'
14 argument (NameExpr)
15 name (SimpleName)
16 identifier='transientState'
17 name (SimpleName)
18 identifier='result'
19 type (ClassOrInterfaceType)
20 name (SimpleName)
21 identifier='Object'
22 statement (ExpressionStmt)
23 expression (MethodCallExpr)
24 name (SimpleName)
25 identifier='put'
26 scope (NameExpr)
27 name (SimpleName)
28 identifier='state'
29 arguments
30 argument (NameExpr)
31 name (SimpleName)
32 identifier='variable'
33 argument (NameExpr)
34 name (SimpleName)
35 identifier='result'
36 type (VoidType)
37 name (SimpleName)
38 identifier='assign'
39 parameters
40 parameter (Parameter)
41 isVarArgs='false'
42 name (SimpleName)
43 identifier='variable'
44 type (ClassOrInterfaceType)
45 name (SimpleName)
46 identifier='String'
47 parameter (Parameter)
48 isVarArgs='false'
49 name (SimpleName)
50 identifier='expression'
51 type (ClassOrInterfaceType)
52 name (SimpleName)
53 identifier='String'
54 parameter (Parameter)
55 isVarArgs='false'
56 name (SimpleName)
57 identifier='transientState'
58 type (ClassOrInterfaceType)
59 name (SimpleName)
60 identifier='Map'
61 typeArguments
62 typeArgument (ClassOrInterfaceType)
63 name (SimpleName)
64 identifier='String'
65 typeArgument (ClassOrInterfaceType)
66 name (SimpleName)
67 identifier='Object'
68 annotations
69 annotation (MarkerAnnotationExpr)
70 name (Name)
71 identifier='Override'
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
7 10
10 11
11 12
12 13
10 14
14 15
15 16
6 17
17 18
6 19
19 20
20 21
2 22
22 23
23 24
24 25
23 26
26 27
27 28
23 29
29 30
30 31
31 32
29 33
33 34
34 35
0 36
0 37
37 38
0 39
39 40
40 41
40 42
42 43
40 44
44 45
45 46
39 47
47 48
47 49
49 50
47 51
51 52
52 53
39 54
54 55
54 56
56 57
54 58
58 59
59 60
58 61
61 62
62 63
63 64
61 65
65 66
66 67
0 68
68 69
69 70
70 71

Execute an expression and assign the result to a variable.  The variable is maintained in the context of this executor and is available to all subsequent expressions.
